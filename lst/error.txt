; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\error.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\error.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\error.crf User\Error.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;14     
;;;15     void delay(uint32_t unDelayMs) {
000000  4932              LDR      r1,|L1.204|
;;;16     	uint32_t unEntryTime = unSystemTick;
000002  680a              LDR      r2,[r1,#0]  ; unSystemTick
000004  e000              B        |L1.8|
                  |L1.6|
;;;17     	while (((uint32_t) (unSystemTick - unEntryTime)) < unDelayMs) {
;;;18     		__NOP();
000006  bf00              NOP      
                  |L1.8|
000008  680b              LDR      r3,[r1,#0]            ;17  ; unSystemTick
00000a  1a9b              SUBS     r3,r3,r2              ;17
00000c  4283              CMP      r3,r0                 ;17
00000e  d3fa              BCC      |L1.6|
;;;19     	}
;;;20     }
000010  4770              BX       lr
;;;21     
                          ENDP

                  clearError PROC
;;;22     void clearError(void) {
000012  492f              LDR      r1,|L1.208|
;;;23     	unErrorMaster = 0;
000014  2000              MOVS     r0,#0
000016  6088              STR      r0,[r1,#8]  ; unErrorMaster
;;;24     }
000018  4770              BX       lr
;;;25     
                          ENDP

                  resetError PROC
;;;26     void resetError(ENUM_ERROR_LEVEL enumErrorType) {
00001a  2800              CMP      r0,#0
00001c  d006              BEQ      |L1.44|
;;;27     	if (ERR_NULL != enumErrorType) {
;;;28     		unErrorMaster &= ~(1UL << (enumErrorType - 1));
00001e  2101              MOVS     r1,#1
000020  1e40              SUBS     r0,r0,#1
000022  4081              LSLS     r1,r1,r0
000024  482a              LDR      r0,|L1.208|
000026  6882              LDR      r2,[r0,#8]  ; unErrorMaster
000028  438a              BICS     r2,r2,r1
00002a  6082              STR      r2,[r0,#8]  ; unErrorMaster
                  |L1.44|
;;;29     	}
;;;30     }
00002c  4770              BX       lr
;;;31     
                          ENDP

                  setError PROC
;;;32     void setError(ENUM_ERROR_LEVEL enumErrorType) {
00002e  4928              LDR      r1,|L1.208|
;;;33     	if (ERR_NULL == enumErrorType) {
000030  2800              CMP      r0,#0
000032  d006              BEQ      |L1.66|
;;;34     		unErrorMaster = 0;
;;;35     	} else {
;;;36     		unErrorMaster |= 1UL << (enumErrorType - 1);
000034  2201              MOVS     r2,#1
000036  1e40              SUBS     r0,r0,#1
000038  4082              LSLS     r2,r2,r0
00003a  6888              LDR      r0,[r1,#8]  ; unErrorMaster
00003c  4302              ORRS     r2,r2,r0
00003e  608a              STR      r2,[r1,#8]  ; unErrorMaster
;;;37     	}
;;;38     }
000040  4770              BX       lr
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;34
000044  6088              STR      r0,[r1,#8]            ;34  ; unErrorMaster
000046  4770              BX       lr
;;;39     
                          ENDP

                  getPrecedenceError PROC
;;;40     ENUM_ERROR_LEVEL getPrecedenceError(void) {
000048  4921              LDR      r1,|L1.208|
;;;41     	register ENUM_ERROR_LEVEL iVernier = ERR_BRD_FAULT;
00004a  2008              MOVS     r0,#8
;;;42     	while (iVernier) {
;;;43     		iVernier--;
;;;44     		if (unErrorMaster >> iVernier) {
00004c  688a              LDR      r2,[r1,#8]
                  |L1.78|
00004e  1e40              SUBS     r0,r0,#1
000050  b2c0              UXTB     r0,r0                 ;43
000052  4611              MOV      r1,r2                 ;43
000054  40c1              LSRS     r1,r1,r0
000056  d002              BEQ      |L1.94|
000058  1c40              ADDS     r0,r0,#1
;;;45     			return (iVernier + 1);
00005a  b2c0              UXTB     r0,r0
;;;46     		}
;;;47     	}
;;;48     	return iVernier;
;;;49     }
00005c  4770              BX       lr
                  |L1.94|
00005e  2800              CMP      r0,#0                 ;42
000060  d1f5              BNE      |L1.78|
000062  4770              BX       lr
;;;50     
                          ENDP

                  LEDBlinkHandler PROC
;;;51     void LEDBlinkHandler(ENUM_ERROR_LEVEL tErrorType, uint32_t unErrorStartTime) {
000064  b5f8              PUSH     {r3-r7,lr}
000066  2700              MOVS     r7,#0
;;;52     	uint16_t iLEDTime;
;;;53     	if (ERR_BRD_FAULT == tErrorType) {
;;;54     		// Always ON
;;;55     		LED_ON;
000068  4c1a              LDR      r4,|L1.212|
00006a  4605              MOV      r5,r0                 ;51
00006c  2808              CMP      r0,#8                 ;53
00006e  d010              BEQ      |L1.146|
;;;56     	} else if (ERR_NULL == tErrorType) {
;;;57     		// Always off
;;;58     		LED_OFF;
000070  2601              MOVS     r6,#1
000072  2d00              CMP      r5,#0                 ;56
000074  d00f              BEQ      |L1.150|
;;;59     	} else {
;;;60     		iLEDTime = (uint16_t) (((uint32_t) (unSystemTick - unErrorStartTime)) % LED_PATTERN_INTERVAL);
000076  4815              LDR      r0,|L1.204|
000078  6800              LDR      r0,[r0,#0]  ; unSystemTick
00007a  1a40              SUBS     r0,r0,r1
00007c  217d              MOVS     r1,#0x7d
00007e  0109              LSLS     r1,r1,#4
000080  f7fffffe          BL       __aeabi_uidivmod
000084  4608              MOV      r0,r1
;;;61     		if (iLEDTime >= unLED_BLINK_PATTERN_TABLE[tErrorType]) {
000086  4a14              LDR      r2,|L1.216|
000088  00a9              LSLS     r1,r5,#2
00008a  5851              LDR      r1,[r2,r1]
00008c  4281              CMP      r1,r0
00008e  d902              BLS      |L1.150|
000090  e003              B        |L1.154|
                  |L1.146|
000092  6327              STR      r7,[r4,#0x30]         ;55
;;;62     			LED_OFF;
;;;63     		} else {
;;;64     			iLEDTime %= LED_BLINK_INTERVAL;
;;;65     			if (iLEDTime < LED_BLINK_ON_TIME) {
;;;66     				LED_ON;
;;;67     			} else {
;;;68     				LED_OFF;
;;;69     			}
;;;70     		}
;;;71     	}
;;;72     }
000094  bdf8              POP      {r3-r7,pc}
                  |L1.150|
000096  6326              STR      r6,[r4,#0x30]         ;58
000098  bdf8              POP      {r3-r7,pc}
                  |L1.154|
00009a  21ff              MOVS     r1,#0xff              ;64
00009c  3191              ADDS     r1,r1,#0x91           ;64
00009e  f7fffffe          BL       __aeabi_uidivmod
0000a2  29c8              CMP      r1,#0xc8              ;65
0000a4  d2f7              BCS      |L1.150|
0000a6  e7f4              B        |L1.146|
;;;73     
                          ENDP

                  ERR_Manager PROC
;;;76     // to make sure then responding time will not burn the board
;;;77     void ERR_Manager(void) {
0000a8  b510              PUSH     {r4,lr}
;;;78     	static uint32_t unLastErrorChangeTime;
;;;79     	static ENUM_ERROR_LEVEL tLastErrorType = ERR_NULL;
;;;80     	ENUM_ERROR_LEVEL tErrorFetched;
;;;81     	tErrorFetched = getPrecedenceError();
0000aa  f7fffffe          BL       getPrecedenceError
;;;82     
;;;83     	if (tLastErrorType != tErrorFetched) {
0000ae  4a08              LDR      r2,|L1.208|
0000b0  7811              LDRB     r1,[r2,#0]  ; tLastErrorType
0000b2  4281              CMP      r1,r0
0000b4  d004              BEQ      |L1.192|
;;;84     		tLastErrorType = tErrorFetched;
;;;85     		// error type changed (maybe changed to no error)
;;;86     		unLastErrorChangeTime = unSystemTick;
0000b6  4905              LDR      r1,|L1.204|
0000b8  7010              STRB     r0,[r2,#0]            ;84
0000ba  6809              LDR      r1,[r1,#0]  ; unSystemTick
;;;87     		// No matter there is error or not, process!!
;;;88     		LEDBlinkHandler(tErrorFetched, unLastErrorChangeTime);
0000bc  6051              STR      r1,[r2,#4]  ; unLastErrorChangeTime
0000be  e002              B        |L1.198|
                  |L1.192|
;;;89     	} else {
;;;90     		// Still same error (maybe no error)
;;;91     		// Only process when there is some error
;;;92     		if (ERR_NULL != tErrorFetched) {
0000c0  2800              CMP      r0,#0
0000c2  d002              BEQ      |L1.202|
;;;93     			LEDBlinkHandler(tErrorFetched, unLastErrorChangeTime);
0000c4  6851              LDR      r1,[r2,#4]  ; unLastErrorChangeTime
                  |L1.198|
0000c6  f7fffffe          BL       LEDBlinkHandler
                  |L1.202|
;;;94     		}
;;;95     	}
;;;96     
;;;97     }
0000ca  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L1.204|
                          DCD      unSystemTick
                  |L1.208|
                          DCD      ||.data||
                  |L1.212|
                          DCD      0x50004280
                  |L1.216|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  unLED_BLINK_PATTERN_TABLE
                          DCD      0x00000190
                          DCD      0x00000190
                          DCD      0x00000320
                          DCD      0x00000320
                          DCD      0x00000320
                          DCD      0x00000320
                          DCD      0x000004b0
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  tLastErrorType
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  unLastErrorChangeTime
                          DCD      0x00000000
                  unErrorMaster
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "User\\Error.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_Error_c_2ab3098d____REV16|
#line 464 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_Error_c_2ab3098d____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_Error_c_2ab3098d____REVSH|
#line 479
|__asm___7_Error_c_2ab3098d____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
