; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\clk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\clk.crf D:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver\clk.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;28       */
;;;29     void CLK_DisableCKO(void)
000000  486d              LDR      r0,|L1.440|
;;;30     {
;;;31         /* Disable CKO clock source */
;;;32         CLK->APBCLK &= (~CLK_APBCLK_FDIV_EN_Msk);
000002  6881              LDR      r1,[r0,#8]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;33     }
00000a  4770              BX       lr
;;;34     
                          ENDP

                  CLK_EnableCKO PROC
;;;51       */
;;;52     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
00000c  0152              LSLS     r2,r2,#5
;;;53     {
;;;54         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;55         CLK->FRQDIV = CLK_FRQDIV_DIVIDER_EN_Msk | u32ClkDiv | u32ClkDivBy1En<<CLK_FRQDIV_DIVIDER1_Pos;
00000e  430a              ORRS     r2,r2,r1
000010  2110              MOVS     r1,#0x10
000012  430a              ORRS     r2,r2,r1
000014  4968              LDR      r1,|L1.440|
000016  624a              STR      r2,[r1,#0x24]
;;;56     
;;;57         /* Enable CKO clock source */
;;;58         CLK->APBCLK |= CLK_APBCLK_FDIV_EN_Msk;
000018  688a              LDR      r2,[r1,#8]
00001a  2340              MOVS     r3,#0x40
00001c  431a              ORRS     r2,r2,r3
00001e  608a              STR      r2,[r1,#8]
;;;59     
;;;60         /* Select CKO clock source */
;;;61         CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_FRQDIV_S_Msk)) | u32ClkSrc;
000020  69ca              LDR      r2,[r1,#0x1c]
000022  230c              MOVS     r3,#0xc
000024  439a              BICS     r2,r2,r3
000026  4302              ORRS     r2,r2,r0
000028  61ca              STR      r2,[r1,#0x1c]
;;;62     }
00002a  4770              BX       lr
;;;63     
                          ENDP

                  CLK_PowerDown PROC
;;;67       */
;;;68     void CLK_PowerDown(void)
00002c  4963              LDR      r1,|L1.444|
;;;69     {
;;;70         SCB->SCR = SCB_SCR_SLEEPDEEP_Msk;
00002e  2004              MOVS     r0,#4
000030  6108              STR      r0,[r1,#0x10]
;;;71         CLK->PWRCON |= (CLK_PWRCON_PWR_DOWN_EN_Msk | CLK_PWRCON_PD_WU_STS_Msk);
000032  4861              LDR      r0,|L1.440|
000034  6801              LDR      r1,[r0,#0]
000036  22c0              MOVS     r2,#0xc0
000038  4311              ORRS     r1,r1,r2
00003a  6001              STR      r1,[r0,#0]
;;;72         __WFI();
00003c  bf30              WFI      
;;;73     }
00003e  4770              BX       lr
;;;74     
                          ENDP

                  CLK_Idle PROC
;;;78       */
;;;79     void CLK_Idle(void)
000040  485d              LDR      r0,|L1.440|
;;;80     {
;;;81         CLK->PWRCON &= ~(CLK_PWRCON_PWR_DOWN_EN_Msk);
000042  6801              LDR      r1,[r0,#0]
000044  2280              MOVS     r2,#0x80
000046  4391              BICS     r1,r1,r2
000048  6001              STR      r1,[r0,#0]
;;;82         __WFI();
00004a  bf30              WFI      
;;;83     }
00004c  4770              BX       lr
;;;84     
                          ENDP

                  CLK_GetHXTFreq PROC
;;;88       */
;;;89     uint32_t CLK_GetHXTFreq(void)
00004e  485a              LDR      r0,|L1.440|
;;;90     {
;;;91         if(CLK->PWRCON & CLK_PWRCON_XTL12M )
000050  6800              LDR      r0,[r0,#0]
000052  07c0              LSLS     r0,r0,#31
000054  d000              BEQ      |L1.88|
;;;92             return __XTAL12M;
000056  485a              LDR      r0,|L1.448|
                  |L1.88|
;;;93         else
;;;94             return 0;
;;;95     }
000058  4770              BX       lr
;;;96     
                          ENDP

                  CLK_GetLXTFreq PROC
;;;100      */
;;;101    uint32_t CLK_GetLXTFreq(void)
00005a  4857              LDR      r0,|L1.440|
;;;102    {
;;;103        if(CLK->PWRCON & CLK_PWRCON_LXT )
00005c  6800              LDR      r0,[r0,#0]
00005e  0780              LSLS     r0,r0,#30
000060  d502              BPL      |L1.104|
;;;104            return __XTAL32K;
000062  2001              MOVS     r0,#1
000064  03c0              LSLS     r0,r0,#15
;;;105        else
;;;106            return 0;
;;;107    }
000066  4770              BX       lr
                  |L1.104|
000068  2000              MOVS     r0,#0                 ;106
00006a  4770              BX       lr
;;;108    
                          ENDP

                  CLK_GetHCLKFreq PROC
;;;112      */
;;;113    uint32_t CLK_GetHCLKFreq(void)
00006c  b510              PUSH     {r4,lr}
;;;114    {
;;;115        SystemCoreClockUpdate();
00006e  f7fffffe          BL       SystemCoreClockUpdate
;;;116        return SystemCoreClock;
000072  4854              LDR      r0,|L1.452|
000074  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;117    }
000076  bd10              POP      {r4,pc}
;;;118    
                          ENDP

                  CLK_GetCPUFreq PROC
;;;123      */
;;;124    uint32_t CLK_GetCPUFreq(void)
000078  b510              PUSH     {r4,lr}
;;;125    {
;;;126        SystemCoreClockUpdate();
00007a  f7fffffe          BL       SystemCoreClockUpdate
;;;127        return SystemCoreClock;
00007e  4851              LDR      r0,|L1.452|
000080  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;128    }
000082  bd10              POP      {r4,pc}
;;;129    
                          ENDP

                  CLK_SetHCLK PROC
;;;139      */
;;;140    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000084  4a4c              LDR      r2,|L1.440|
;;;141    {
;;;142        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_S_Msk) | u32ClkSrc;
000086  6913              LDR      r3,[r2,#0x10]
000088  08db              LSRS     r3,r3,#3
00008a  00db              LSLS     r3,r3,#3
00008c  4303              ORRS     r3,r3,r0
00008e  6113              STR      r3,[r2,#0x10]
;;;143        CLK->CLKDIV = (CLK->CLKDIV & ~CLK_CLKDIV_HCLK_N_Msk) | u32ClkDiv;
000090  6990              LDR      r0,[r2,#0x18]
000092  0900              LSRS     r0,r0,#4
000094  0100              LSLS     r0,r0,#4
000096  4308              ORRS     r0,r0,r1
000098  6190              STR      r0,[r2,#0x18]
;;;144    }
00009a  4770              BX       lr
;;;145    
                          ENDP

                  CLK_SetModuleClock PROC
;;;183    
;;;184    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
00009c  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186        uint32_t u32tmp=0,u32sel=0,u32div=0;
;;;187    
;;;188        if(MODULE_CLKSEL_Msk(u32ModuleIdx)!=MODULE_NoMsk) {
00009e  0e43              LSRS     r3,r0,#25
0000a0  071b              LSLS     r3,r3,#28
0000a2  d00e              BEQ      |L1.194|
;;;189            u32sel = (uint32_t)&CLK->CLKSEL0+((MODULE_CLKSEL(u32ModuleIdx))*4);
0000a4  0043              LSLS     r3,r0,#1
0000a6  4c44              LDR      r4,|L1.440|
0000a8  0f9b              LSRS     r3,r3,#30
0000aa  009b              LSLS     r3,r3,#2
0000ac  3410              ADDS     r4,r4,#0x10
0000ae  191b              ADDS     r3,r3,r4
;;;190            u32tmp = *(volatile uint32_t *)(u32sel);
0000b0  681c              LDR      r4,[r3,#0]
;;;191            u32tmp = ( u32tmp & ~(MODULE_CLKSEL_Msk(u32ModuleIdx)<<MODULE_CLKSEL_Pos(u32ModuleIdx)) ) | u32ClkSrc;
0000b2  00c5              LSLS     r5,r0,#3
0000b4  0f2d              LSRS     r5,r5,#28
0000b6  01c6              LSLS     r6,r0,#7
0000b8  0ef6              LSRS     r6,r6,#27
0000ba  40b5              LSLS     r5,r5,r6
0000bc  43ac              BICS     r4,r4,r5
0000be  430c              ORRS     r4,r4,r1
;;;192            *(volatile uint32_t *)(u32sel) = u32tmp;
0000c0  601c              STR      r4,[r3,#0]
                  |L1.194|
;;;193        }
;;;194    
;;;195        if(MODULE_CLKDIV_Msk(u32ModuleIdx)!=MODULE_NoMsk) {
0000c2  0a83              LSRS     r3,r0,#10
0000c4  0619              LSLS     r1,r3,#24
0000c6  0e09              LSRS     r1,r1,#24
0000c8  d00d              BEQ      |L1.230|
;;;196            u32div =(uint32_t)&CLK->CLKDIV+((MODULE_CLKDIV(u32ModuleIdx))*4);
0000ca  0301              LSLS     r1,r0,#12
0000cc  4c3a              LDR      r4,|L1.440|
0000ce  0f89              LSRS     r1,r1,#30
0000d0  0089              LSLS     r1,r1,#2
0000d2  3418              ADDS     r4,r4,#0x18
0000d4  1909              ADDS     r1,r1,r4
;;;197            u32tmp = *(volatile uint32_t *)(u32div);
0000d6  680c              LDR      r4,[r1,#0]
;;;198            u32tmp = ( u32tmp & ~(MODULE_CLKDIV_Msk(u32ModuleIdx)<<MODULE_CLKDIV_Pos(u32ModuleIdx)) ) | u32ClkDiv;
0000d8  0580              LSLS     r0,r0,#22
0000da  b2db              UXTB     r3,r3
0000dc  0ec0              LSRS     r0,r0,#27
0000de  4083              LSLS     r3,r3,r0
0000e0  439c              BICS     r4,r4,r3
0000e2  4314              ORRS     r4,r4,r2
;;;199            *(volatile uint32_t *)(u32div) = u32tmp;
0000e4  600c              STR      r4,[r1,#0]
                  |L1.230|
;;;200        }
;;;201    }
0000e6  bd70              POP      {r4-r6,pc}
;;;202    
                          ENDP

                  CLK_SetSysTickClockSrc PROC
;;;211      */
;;;212    void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
0000e8  4a33              LDR      r2,|L1.440|
;;;213    {
;;;214        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc;
0000ea  6911              LDR      r1,[r2,#0x10]
0000ec  2338              MOVS     r3,#0x38
0000ee  4399              BICS     r1,r1,r3
0000f0  4301              ORRS     r1,r1,r0
0000f2  6111              STR      r1,[r2,#0x10]
;;;215    }
0000f4  4770              BX       lr
;;;216    
                          ENDP

                  CLK_EnableSysTick PROC
;;;229      */
;;;230    void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count)
0000f6  b570              PUSH     {r4-r6,lr}
;;;231    {
;;;232        SysTick->CTRL=0;
0000f8  4a33              LDR      r2,|L1.456|
0000fa  2300              MOVS     r3,#0
0000fc  6113              STR      r3,[r2,#0x10]
;;;233        if( u32ClkSrc== CLK_CLKSEL0_STCLK_S_HCLK )    /* Set System Tick clock source */
;;;234            SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
0000fe  2404              MOVS     r4,#4
000100  2808              CMP      r0,#8                 ;233
000102  d00f              BEQ      |L1.292|
;;;235        else {
;;;236            SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
000104  6915              LDR      r5,[r2,#0x10]
000106  43a5              BICS     r5,r5,r4
000108  6115              STR      r5,[r2,#0x10]
;;;237            CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc;
00010a  4d2b              LDR      r5,|L1.440|
00010c  692c              LDR      r4,[r5,#0x10]
00010e  2638              MOVS     r6,#0x38
000110  43b4              BICS     r4,r4,r6
000112  4304              ORRS     r4,r4,r0
000114  612c              STR      r4,[r5,#0x10]
                  |L1.278|
;;;238        }
;;;239        SysTick->LOAD  = u32Count;                /* Set System Tick reload value */
000116  6151              STR      r1,[r2,#0x14]
;;;240        SysTick->VAL = 0;                         /* Clear System Tick current value and counter flag  */
000118  6193              STR      r3,[r2,#0x18]
;;;241        SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; /* Set System Tick counter enabled */
00011a  6910              LDR      r0,[r2,#0x10]
00011c  2101              MOVS     r1,#1
00011e  4308              ORRS     r0,r0,r1
000120  6110              STR      r0,[r2,#0x10]
;;;242    }
000122  bd70              POP      {r4-r6,pc}
                  |L1.292|
000124  6910              LDR      r0,[r2,#0x10]         ;234
000126  4320              ORRS     r0,r0,r4              ;234
000128  6110              STR      r0,[r2,#0x10]         ;234
00012a  e7f4              B        |L1.278|
;;;243    
                          ENDP

                  CLK_DisableSysTick PROC
;;;248      */
;;;249    void CLK_DisableSysTick(void)
00012c  4926              LDR      r1,|L1.456|
;;;250    {
;;;251        SysTick->CTRL = 0;    /* Set System Tick counter disabled */
00012e  2000              MOVS     r0,#0
000130  6108              STR      r0,[r1,#0x10]
;;;252    }
000132  4770              BX       lr
;;;253    
                          ENDP

                  CLK_EnableXtalRC PROC
;;;261      */
;;;262    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000134  4920              LDR      r1,|L1.440|
;;;263    {
;;;264        CLK->PWRCON |=u32ClkMask;
000136  680a              LDR      r2,[r1,#0]
000138  4302              ORRS     r2,r2,r0
00013a  600a              STR      r2,[r1,#0]
;;;265    }
00013c  4770              BX       lr
;;;266    
                          ENDP

                  CLK_DisableXtalRC PROC
;;;274      */
;;;275    void CLK_DisableXtalRC(uint32_t u32ClkMask)
00013e  491e              LDR      r1,|L1.440|
;;;276    {
;;;277        CLK->PWRCON &=~u32ClkMask;
000140  680a              LDR      r2,[r1,#0]
000142  4382              BICS     r2,r2,r0
000144  600a              STR      r2,[r1,#0]
;;;278    }
000146  4770              BX       lr
;;;279    
                          ENDP

                  CLK_EnableModuleClock PROC
;;;296      */
;;;297    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000148  0fc1              LSRS     r1,r0,#31
;;;298    {
;;;299        *(volatile uint32_t *)((uint32_t)&CLK->APBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  |= 1<<MODULE_IP_EN_Pos(u32ModuleIdx);
00014a  008a              LSLS     r2,r1,#2
00014c  491a              LDR      r1,|L1.440|
00014e  1851              ADDS     r1,r2,r1
000150  688a              LDR      r2,[r1,#8]
000152  06c3              LSLS     r3,r0,#27
000154  0edb              LSRS     r3,r3,#27
000156  2001              MOVS     r0,#1
000158  4098              LSLS     r0,r0,r3
00015a  4302              ORRS     r2,r2,r0
00015c  608a              STR      r2,[r1,#8]
;;;300    }
00015e  4770              BX       lr
;;;301    
                          ENDP

                  CLK_DisableModuleClock PROC
;;;318      */
;;;319    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000160  0fc1              LSRS     r1,r0,#31
;;;320    {
;;;321        *(volatile uint32_t *)((uint32_t)&CLK->APBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000162  008a              LSLS     r2,r1,#2
000164  4914              LDR      r1,|L1.440|
000166  1851              ADDS     r1,r2,r1
000168  688a              LDR      r2,[r1,#8]
00016a  06c3              LSLS     r3,r0,#27
00016c  0edb              LSRS     r3,r3,#27
00016e  2001              MOVS     r0,#1
000170  4098              LSLS     r0,r0,r3
000172  4382              BICS     r2,r2,r0
000174  608a              STR      r2,[r1,#8]
;;;322    }
000176  4770              BX       lr
;;;323    
                          ENDP

                  CLK_SysTickDelay PROC
;;;331      */
;;;332    void CLK_SysTickDelay(uint32_t us)
000178  4914              LDR      r1,|L1.460|
;;;333    {
;;;334        SysTick->LOAD = us * CyclesPerUs;
00017a  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
00017c  4348              MULS     r0,r1,r0
00017e  4912              LDR      r1,|L1.456|
000180  6148              STR      r0,[r1,#0x14]
;;;335        SysTick->VAL  =  (0x00);
000182  2200              MOVS     r2,#0
000184  618a              STR      r2,[r1,#0x18]
;;;336        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000186  2005              MOVS     r0,#5
000188  6108              STR      r0,[r1,#0x10]
                  |L1.394|
;;;337    
;;;338        /* Waiting for down-count to zero */
;;;339        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
00018a  6908              LDR      r0,[r1,#0x10]
00018c  03c0              LSLS     r0,r0,#15
00018e  d5fc              BPL      |L1.394|
;;;340        SysTick->CTRL = 0;
000190  610a              STR      r2,[r1,#0x10]
;;;341    }
000192  4770              BX       lr
;;;342    
                          ENDP

                  CLK_WaitClockReady PROC
;;;355      */
;;;356    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000194  b510              PUSH     {r4,lr}
;;;357    {
;;;358        int32_t i32TimeOutCnt;
;;;359    
;;;360        i32TimeOutCnt = __HSI / 200; /* About 5ms */
000196  211b              MOVS     r1,#0x1b
000198  4604              MOV      r4,r0                 ;357
00019a  0309              LSLS     r1,r1,#12
;;;361    
;;;362        while((CLK->CLKSTATUS & u32ClkMask) != u32ClkMask) {
00019c  4b06              LDR      r3,|L1.440|
00019e  e005              B        |L1.428|
                  |L1.416|
;;;363            if(i32TimeOutCnt-- <= 0)
0001a0  460a              MOV      r2,r1
0001a2  1e49              SUBS     r1,r1,#1
0001a4  2a00              CMP      r2,#0
0001a6  dc01              BGT      |L1.428|
;;;364                return 0;
0001a8  2000              MOVS     r0,#0
;;;365        }
;;;366        return 1;
;;;367    }
0001aa  bd10              POP      {r4,pc}
                  |L1.428|
0001ac  68da              LDR      r2,[r3,#0xc]          ;362
0001ae  4620              MOV      r0,r4                 ;362
0001b0  4390              BICS     r0,r0,r2              ;362
0001b2  d1f5              BNE      |L1.416|
0001b4  2001              MOVS     r0,#1                 ;366
0001b6  bd10              POP      {r4,pc}
;;;368    
                          ENDP

                  |L1.440|
                          DCD      0x50000200
                  |L1.444|
                          DCD      0xe000ed00
                  |L1.448|
                          DCD      0x00b71b00
                  |L1.452|
                          DCD      SystemCoreClock
                  |L1.456|
                          DCD      0xe000e000
                  |L1.460|
                          DCD      CyclesPerUs

;*** Start embedded assembler ***

#line 1 "D:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.1.0\\Device\\Mini51\\Driver\\clk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 464 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 479
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
