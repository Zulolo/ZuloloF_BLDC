; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\communication.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\communication.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -IG:\Geek\Projects\Zulolo_F\Force\Code\Zulolo_F_Force\RTE -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.7\Device\Mini51\Include -ID:\Keil_v5\ARM\CMSIS\Include -I\ -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\communication.crf User\Communication.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CRC16 PROC
;;;36     
;;;37     uint16_t CRC16(uint8_t* pData, uint16_t unLength)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
;;;39     	uint8_t unCRCHi = 0xFF;
;;;40     	uint8_t unCRCLo = 0xFF;
;;;41         int32_t nIndex;
;;;42     
;;;43         while(unLength--)
;;;44         {
;;;45         	nIndex = unCRCLo ^ (*pData);
;;;46             unCRCLo = (uint8_t)(unCRCHi ^ CRC_HIGH_FACTOR[nIndex]);
000002  4d52              LDR      r5,|L1.332|
000004  23ff              MOVS     r3,#0xff              ;39
;;;47             unCRCHi = CRC_LOW_FACTOR[nIndex];
000006  1dee              ADDS     r6,r5,#7
000008  461a              MOV      r2,r3                 ;40
00000a  36f9              ADDS     r6,r6,#0xf9
00000c  e004              B        |L1.24|
                  |L1.14|
00000e  7804              LDRB     r4,[r0,#0]            ;45
000010  4054              EORS     r4,r4,r2              ;45
000012  5d2a              LDRB     r2,[r5,r4]            ;46
000014  405a              EORS     r2,r2,r3              ;46
000016  5d33              LDRB     r3,[r6,r4]
                  |L1.24|
000018  460c              MOV      r4,r1                 ;43
00001a  1e49              SUBS     r1,r1,#1              ;43
00001c  b289              UXTH     r1,r1                 ;43
00001e  2c00              CMP      r4,#0                 ;43
000020  d1f5              BNE      |L1.14|
;;;48         }
;;;49         return (uint16_t)(unCRCHi << 8 | unCRCLo);
000022  0218              LSLS     r0,r3,#8
000024  4310              ORRS     r0,r0,r2
;;;50     }
000026  bd70              POP      {r4-r6,pc}
;;;51     
                          ENDP

                  nReadCommandHandler PROC
;;;52     int32_t nReadCommandHandler(uint16_t* pCOM_Buff)
000028  b510              PUSH     {r4,lr}
;;;53     {
;;;54     	if (COMM_GET_DATA(pCOM_Buff[0]) < COMM_READ_MAX)
00002a  8801              LDRH     r1,[r0,#0]
00002c  0449              LSLS     r1,r1,#17
00002e  0c49              LSRS     r1,r1,#17
000030  2912              CMP      r1,#0x12
000032  d20e              BCS      |L1.82|
;;;55     	{
;;;56     		SPI_WRITE_TX(SPI, tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])]);
000034  4a46              LDR      r2,|L1.336|
000036  0049              LSLS     r1,r1,#1
000038  5a51              LDRH     r1,[r2,r1]
00003a  4c46              LDR      r4,|L1.340|
00003c  6221              STR      r1,[r4,#0x20]
;;;57     		SPI_WRITE_TX(SPI, CRC16((uint8_t*)(&(tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])])), 1));
00003e  8800              LDRH     r0,[r0,#0]
000040  2101              MOVS     r1,#1
000042  0440              LSLS     r0,r0,#17
000044  0c00              LSRS     r0,r0,#16
000046  1880              ADDS     r0,r0,r2
000048  f7fffffe          BL       CRC16
00004c  6220              STR      r0,[r4,#0x20]
;;;58     		return 0;
00004e  2000              MOVS     r0,#0
;;;59     	}
;;;60     	else
;;;61     	{
;;;62     		return -1;
;;;63     	}
;;;64     }
000050  bd10              POP      {r4,pc}
                  |L1.82|
000052  2000              MOVS     r0,#0                 ;62
000054  43c0              MVNS     r0,r0                 ;62
000056  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  nWriteCommandHandler PROC
;;;66     int32_t nWriteCommandHandler(uint16_t* pCOM_Buff)
000058  b500              PUSH     {lr}
;;;67     {
;;;68     	switch(COMM_GET_DATA(pCOM_Buff[0]))
00005a  8801              LDRH     r1,[r0,#0]
00005c  044a              LSLS     r2,r1,#17
00005e  0c52              LSRS     r2,r2,#17
;;;69     	{
;;;70     	case COMM_WRITE_MOTOR_NEED_TO_RUN:
;;;71     	case COMM_WRITE_ROTATE_DIRECTION:
;;;72     		tMotor.structMotor.MCR.bMotorNeedToRun = pCOM_Buff[1];
000060  493b              LDR      r1,|L1.336|
000062  0013              MOVS     r3,r2                 ;68
000064  f7fffffe          BL       __ARM_common_switch8
000068  08210505          DCB      0x08,0x21,0x05,0x05
00006c  0e111417          DCB      0x0e,0x11,0x14,0x17
000070  1a21              DCB      0x1a,0x21
000072  880a              LDRH     r2,[r1,#0]  ; tMotor
000074  7880              LDRB     r0,[r0,#2]
000076  0852              LSRS     r2,r2,#1
000078  0052              LSLS     r2,r2,#1
00007a  07c0              LSLS     r0,r0,#31
00007c  0fc0              LSRS     r0,r0,#31
00007e  4302              ORRS     r2,r2,r0
000080  800a              STRH     r2,[r1,#0]
;;;73     		break;
000082  e010              B        |L1.166|
;;;74     	case COMM_WRITE_LOCATING_DUTY:
;;;75     		tMotor.structMotor.unLocatingDuty = pCOM_Buff[1];
000084  8840              LDRH     r0,[r0,#2]
000086  80c8              STRH     r0,[r1,#6]
;;;76     		break;
000088  e00d              B        |L1.166|
;;;77     	case COMM_WRITE_RAMP_UP_DUTY:
;;;78     		tMotor.structMotor.unRampUpDuty = pCOM_Buff[1];
00008a  8840              LDRH     r0,[r0,#2]
00008c  8108              STRH     r0,[r1,#8]
;;;79     		break;
00008e  e00a              B        |L1.166|
;;;80     	case COMM_WRITE_TARGET_DUTY:
;;;81     		tMotor.structMotor.unTargetDuty = pCOM_Buff[1];
000090  8840              LDRH     r0,[r0,#2]
000092  8148              STRH     r0,[r1,#0xa]
;;;82     		break;
000094  e007              B        |L1.166|
;;;83     	case COMM_WRITE_LOCATING_PERIOD:
;;;84     		tMotor.structMotor.unLocatingPeriod = pCOM_Buff[1];
000096  8840              LDRH     r0,[r0,#2]
000098  81c8              STRH     r0,[r1,#0xe]
;;;85     		break;
00009a  e004              B        |L1.166|
;;;86     	case COMM_WRITE_RAMP_UP_PERIOD:
;;;87     		tMotor.structMotor.unRampUpPeriod = pCOM_Buff[1] + pCOM_Buff[2] << 16;
00009c  8842              LDRH     r2,[r0,#2]
00009e  8880              LDRH     r0,[r0,#4]
0000a0  1810              ADDS     r0,r2,r0
0000a2  0400              LSLS     r0,r0,#16
0000a4  6148              STR      r0,[r1,#0x14]  ; tMotor
                  |L1.166|
;;;88     			break;
;;;89     	default:
;;;90     		return -1;
;;;91     	}
;;;92     	return 0;
0000a6  2000              MOVS     r0,#0
;;;93     }
0000a8  bd00              POP      {pc}
0000aa  2000              MOVS     r0,#0                 ;90
0000ac  43c0              MVNS     r0,r0                 ;90
0000ae  bd00              POP      {pc}
;;;94     
                          ENDP

                  COMM_Manager PROC
;;;95     // Communicating with mast via SPI
;;;96     void COMM_Manager(void)
0000b0  b570              PUSH     {r4-r6,lr}
;;;97     {
;;;98     	static uint16_t unCOM_Buff[COMM_FIFO_LENGTH];
;;;99     	static uint32_t unLastFrameCNT = 0;
;;;100    	static uint32_t unLastCheckTime = 0;
;;;101    	// All transactions are handled in interrupt
;;;102    	if (tMotor.structMotor.MSR.bNewComFrameReceived == TRUE)
0000b2  4927              LDR      r1,|L1.336|
0000b4  8848              LDRH     r0,[r1,#2]  ; tMotor
;;;103    	{
;;;104    		memcpy(unCOM_Buff, unCOM_SPI_ReadData, COMM_FIFO_LENGTH);
0000b6  4c28              LDR      r4,|L1.344|
0000b8  06c0              LSLS     r0,r0,#27             ;102
0000ba  d528              BPL      |L1.270|
0000bc  8b20              LDRH     r0,[r4,#0x18]  ; unCOM_SPI_ReadData
0000be  8220              STRH     r0,[r4,#0x10]
0000c0  8b62              LDRH     r2,[r4,#0x1a]  ; unCOM_SPI_ReadData
0000c2  8262              STRH     r2,[r4,#0x12]
;;;105    		tMotor.structMotor.MSR.bNewComFrameReceived = FALSE;
0000c4  884a              LDRH     r2,[r1,#2]  ; tMotor
0000c6  2310              MOVS     r3,#0x10
0000c8  439a              BICS     r2,r2,r3
0000ca  804a              STRH     r2,[r1,#2]
;;;106    		if (CRC16((uint8_t *)unCOM_Buff, (IS_COMM_RD_CMD(unCOM_Buff[0]) ? (COMM_RD_CMD_CNT - 1) : (COMM_WR_CMD_CNT - 1))) ==
0000cc  18e5              ADDS     r5,r4,r3
0000ce  0bc0              LSRS     r0,r0,#15
0000d0  d001              BEQ      |L1.214|
0000d2  2101              MOVS     r1,#1
0000d4  e000              B        |L1.216|
                  |L1.214|
0000d6  2103              MOVS     r1,#3
                  |L1.216|
0000d8  481f              LDR      r0,|L1.344|
0000da  3010              ADDS     r0,r0,#0x10
0000dc  f7fffffe          BL       CRC16
0000e0  8829              LDRH     r1,[r5,#0]  ; unCOM_Buff
0000e2  0bca              LSRS     r2,r1,#15
0000e4  d001              BEQ      |L1.234|
;;;107    				(IS_COMM_RD_CMD(unCOM_Buff[0]) ? unCOM_Buff[COMM_RD_CMD_CNT - 1] : unCOM_Buff[COMM_WR_CMD_CNT - 1]))
0000e6  886a              LDRH     r2,[r5,#2]  ; unCOM_Buff
0000e8  e000              B        |L1.236|
                  |L1.234|
0000ea  88ea              LDRH     r2,[r5,#6]  ; unCOM_Buff
                  |L1.236|
0000ec  4290              CMP      r0,r2
0000ee  d10b              BNE      |L1.264|
;;;108    		{
;;;109    			unValidFrameCNT++;
0000f0  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
0000f2  1c40              ADDS     r0,r0,#1
;;;110    			// safe zone
;;;111    			if (IS_COMM_RD_CMD(unCOM_Buff[0]))
0000f4  60a0              STR      r0,[r4,#8]  ; unValidFrameCNT
0000f6  0bc8              LSRS     r0,r1,#15
;;;112    			{
;;;113    				nReadCommandHandler(unCOM_Buff);
;;;114    			}
;;;115    			else
;;;116    			{
;;;117    				nWriteCommandHandler(unCOM_Buff);
0000f8  4818              LDR      r0,|L1.348|
0000fa  d002              BEQ      |L1.258|
0000fc  f7fffffe          BL       nReadCommandHandler
000100  e005              B        |L1.270|
                  |L1.258|
000102  f7fffffe          BL       nWriteCommandHandler
000106  e002              B        |L1.270|
                  |L1.264|
;;;118    			}
;;;119    		}
;;;120    		else
;;;121    		{
;;;122    			unCOM_SPI_TransErrCNT++;
000108  68e0              LDR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
00010a  1c40              ADDS     r0,r0,#1
00010c  60e0              STR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
                  |L1.270|
;;;123    		}
;;;124    	}
;;;125    
;;;126    	// Comm protection 1: If have received some frame in 500ms, error
;;;127    	if ((uint32_t)(unSystemTick - unLastCheckTime) > 500)
00010e  4814              LDR      r0,|L1.352|
000110  6801              LDR      r1,[r0,#0]  ; unSystemTick
000112  6862              LDR      r2,[r4,#4]  ; unLastCheckTime
000114  1a89              SUBS     r1,r1,r2
000116  22ff              MOVS     r2,#0xff
000118  32f5              ADDS     r2,r2,#0xf5
00011a  4291              CMP      r1,r2
00011c  d90c              BLS      |L1.312|
;;;128    	{
;;;129    		unLastCheckTime = unSystemTick;
00011e  6800              LDR      r0,[r0,#0]  ; unSystemTick
;;;130    		if ((uint32_t)(unValidFrameCNT - unLastFrameCNT) < 1)
000120  6060              STR      r0,[r4,#4]  ; unLastCheckTime
000122  6821              LDR      r1,[r4,#0]  ; unLastFrameCNT
000124  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
000126  4288              CMP      r0,r1
000128  d104              BNE      |L1.308|
;;;131    		{
;;;132    			BLDC_stopMotor();
00012a  f7fffffe          BL       BLDC_stopMotor
;;;133    			setError(ERR_COMMUNICATION_FAIL);
00012e  2002              MOVS     r0,#2
000130  f7fffffe          BL       setError
                  |L1.308|
;;;134    		}
;;;135    		unLastFrameCNT = unValidFrameCNT;
000134  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
000136  6020              STR      r0,[r4,#0]  ; unLastFrameCNT
                  |L1.312|
;;;136    	}
;;;137    	// Comm protection 2: If received error frame exceed some threshold, error
;;;138    	if (unCOM_SPI_TransErrCNT > COM_SPI_TRANS_ERR_THRESHOLD)
000138  68e0              LDR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
00013a  2806              CMP      r0,#6
00013c  d904              BLS      |L1.328|
;;;139    	{
;;;140    		BLDC_stopMotor();
00013e  f7fffffe          BL       BLDC_stopMotor
;;;141    		setError(ERR_COMMUNICATION_FAIL);
000142  2002              MOVS     r0,#2
000144  f7fffffe          BL       setError
                  |L1.328|
;;;142    	}
;;;143    }
000148  bd70              POP      {r4-r6,pc}
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      ||.constdata||
                  |L1.336|
                          DCD      tMotor
                  |L1.340|
                          DCD      0x40030000
                  |L1.344|
                          DCD      ||.data||
                  |L1.348|
                          DCD      ||.data||+0x10
                  |L1.352|
                          DCD      unSystemTick

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CRC_HIGH_FACTOR
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  CRC_LOW_FACTOR
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=2

                  unLastFrameCNT
                          DCD      0x00000000
                  unLastCheckTime
                          DCD      0x00000000
                  unValidFrameCNT
                          DCD      0x00000000
                  unCOM_SPI_TransErrCNT
                          DCD      0x00000000
                  unCOM_Buff
                          %        8
                  unCOM_SPI_ReadData
                          %        8

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  unCOM_SPI_TransCNT
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.data||
                  unRegisterValue
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  tRegister
000000  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.data||
                  FlagRegisterNeedWrite
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L21.16|
00000e  461d              MOV      r5,r3
                  |L21.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "User\\Communication.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_b3a855e6____REV16|
#line 118 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_Communication_c_b3a855e6____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_b3a855e6____REVSH|
#line 132
|__asm___15_Communication_c_b3a855e6____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
