; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\communication.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\communication.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -IG:\Geek\Projects\Zulolo_F\Force\Code\Zulolo_F_Force\RTE -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.7\Device\Mini51\Include -ID:\Keil_v5\ARM\CMSIS\Include -I\ -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\communication.crf User\Communication.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  reflect16Bit PROC
;;;36     
;;;37     uint16_t reflect16Bit(uint16_t unOrigin)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
;;;39     	register uint8_t unVenier = 0;
000002  2100              MOVS     r1,#0
000004  4604              MOV      r4,r0                 ;38
;;;40     	register uint16_t unResult = 0;
;;;41     	while(unVenier < 16)
;;;42     	{
;;;43     		if ((unOrigin & (BIT_MASK << unVenier)) != 0)
000006  2601              MOVS     r6,#1
000008  4608              MOV      r0,r1                 ;40
;;;44     		{
;;;45     			unResult |= (BIT_MASK << (15 - unVenier));
00000a  250f              MOVS     r5,#0xf
                  |L1.12|
00000c  4633              MOV      r3,r6                 ;43
00000e  408b              LSLS     r3,r3,r1              ;43
000010  4632              MOV      r2,r6                 ;43
000012  4223              TST      r3,r4                 ;43
000014  d003              BEQ      |L1.30|
000016  1a6b              SUBS     r3,r5,r1
000018  409a              LSLS     r2,r2,r3
00001a  4302              ORRS     r2,r2,r0
00001c  b290              UXTH     r0,r2
                  |L1.30|
00001e  1c49              ADDS     r1,r1,#1
;;;46     		}
;;;47     		unVenier++;
000020  b2c9              UXTB     r1,r1
000022  2910              CMP      r1,#0x10              ;41
000024  d3f2              BCC      |L1.12|
;;;48     	}
;;;49     	return unResult;
;;;50     }
000026  bd70              POP      {r4-r6,pc}
;;;51     
                          ENDP

                  CRC16 PROC
;;;52     uint16_t CRC16(uint8_t* pData, uint16_t unLength)
000028  b470              PUSH     {r4-r6}
;;;53     {
;;;54     	uint8_t unCRCHi = 0x00;
;;;55     	uint8_t unCRCLo = 0x00;
;;;56     	int32_t nIndex;
;;;57     
;;;58     	while(unLength--)
;;;59     	{
;;;60     		nIndex = unCRCLo ^ *(pData++);
;;;61     		unCRCLo = (uint8_t)(unCRCHi ^ CRC_HIGH_FACTOR[nIndex]);
00002a  4d53              LDR      r5,|L1.376|
00002c  2300              MOVS     r3,#0                 ;54
;;;62     		unCRCHi = CRC_LOW_FACTOR[nIndex];
00002e  1dee              ADDS     r6,r5,#7
000030  461a              MOV      r2,r3                 ;55
000032  36f9              ADDS     r6,r6,#0xf9
000034  e005              B        |L1.66|
                  |L1.54|
000036  7804              LDRB     r4,[r0,#0]            ;60
000038  4054              EORS     r4,r4,r2              ;60
00003a  5d2a              LDRB     r2,[r5,r4]            ;61
00003c  405a              EORS     r2,r2,r3              ;61
00003e  5d33              LDRB     r3,[r6,r4]
000040  1c40              ADDS     r0,r0,#1
                  |L1.66|
000042  460c              MOV      r4,r1                 ;58
000044  1e49              SUBS     r1,r1,#1              ;58
000046  b289              UXTH     r1,r1                 ;58
000048  2c00              CMP      r4,#0                 ;58
00004a  d1f4              BNE      |L1.54|
;;;63     	}
;;;64     	return reflect16Bit((uint16_t)(unCRCHi << 8 | unCRCLo));
00004c  bc70              POP      {r4-r6}
00004e  0218              LSLS     r0,r3,#8
000050  4310              ORRS     r0,r0,r2
000052  e7fe              B        reflect16Bit
;;;65     }
;;;66     
                          ENDP

                  nReadCommandHandler PROC
;;;67     int32_t nReadCommandHandler(uint16_t* pCOM_Buff)
000054  b510              PUSH     {r4,lr}
;;;68     {
;;;69     	if (COMM_GET_DATA(pCOM_Buff[0]) < COMM_READ_MAX)
000056  8801              LDRH     r1,[r0,#0]
000058  0449              LSLS     r1,r1,#17
00005a  0c49              LSRS     r1,r1,#17
00005c  2912              CMP      r1,#0x12
00005e  d20e              BCS      |L1.126|
;;;70     	{
;;;71     		SPI_WRITE_TX(SPI, tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])]);
000060  4a46              LDR      r2,|L1.380|
000062  0049              LSLS     r1,r1,#1
000064  5a51              LDRH     r1,[r2,r1]
000066  4c46              LDR      r4,|L1.384|
000068  6221              STR      r1,[r4,#0x20]
;;;72     		SPI_WRITE_TX(SPI, CRC16((uint8_t*)(&(tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])])), 1));
00006a  8800              LDRH     r0,[r0,#0]
00006c  2101              MOVS     r1,#1
00006e  0440              LSLS     r0,r0,#17
000070  0c00              LSRS     r0,r0,#16
000072  1880              ADDS     r0,r0,r2
000074  f7fffffe          BL       CRC16
000078  6220              STR      r0,[r4,#0x20]
;;;73     		return 0;
00007a  2000              MOVS     r0,#0
;;;74     	}
;;;75     	else
;;;76     	{
;;;77     		return -1;
;;;78     	}
;;;79     }
00007c  bd10              POP      {r4,pc}
                  |L1.126|
00007e  2000              MOVS     r0,#0                 ;77
000080  43c0              MVNS     r0,r0                 ;77
000082  bd10              POP      {r4,pc}
;;;80     
                          ENDP

                  nWriteCommandHandler PROC
;;;81     int32_t nWriteCommandHandler(uint16_t* pCOM_Buff)
000084  b500              PUSH     {lr}
;;;82     {
;;;83     	switch(COMM_GET_DATA(pCOM_Buff[0]))
000086  8801              LDRH     r1,[r0,#0]
000088  044a              LSLS     r2,r1,#17
00008a  0c52              LSRS     r2,r2,#17
;;;84     	{
;;;85     	case COMM_WRITE_MOTOR_NEED_TO_RUN:
;;;86     	case COMM_WRITE_ROTATE_DIRECTION:
;;;87     		tMotor.structMotor.MCR.bMotorNeedToRun = pCOM_Buff[1];
00008c  493b              LDR      r1,|L1.380|
00008e  0013              MOVS     r3,r2                 ;83
000090  f7fffffe          BL       __ARM_common_switch8
000094  08210505          DCB      0x08,0x21,0x05,0x05
000098  0e111417          DCB      0x0e,0x11,0x14,0x17
00009c  1a21              DCB      0x1a,0x21
00009e  880a              LDRH     r2,[r1,#0]  ; tMotor
0000a0  7880              LDRB     r0,[r0,#2]
0000a2  0852              LSRS     r2,r2,#1
0000a4  0052              LSLS     r2,r2,#1
0000a6  07c0              LSLS     r0,r0,#31
0000a8  0fc0              LSRS     r0,r0,#31
0000aa  4302              ORRS     r2,r2,r0
0000ac  800a              STRH     r2,[r1,#0]
;;;88     		break;
0000ae  e010              B        |L1.210|
;;;89     	case COMM_WRITE_LOCATING_DUTY:
;;;90     		tMotor.structMotor.unLocatingDuty = pCOM_Buff[1];
0000b0  8840              LDRH     r0,[r0,#2]
0000b2  80c8              STRH     r0,[r1,#6]
;;;91     		break;
0000b4  e00d              B        |L1.210|
;;;92     	case COMM_WRITE_RAMP_UP_DUTY:
;;;93     		tMotor.structMotor.unRampUpDuty = pCOM_Buff[1];
0000b6  8840              LDRH     r0,[r0,#2]
0000b8  8108              STRH     r0,[r1,#8]
;;;94     		break;
0000ba  e00a              B        |L1.210|
;;;95     	case COMM_WRITE_TARGET_DUTY:
;;;96     		tMotor.structMotor.unTargetDuty = pCOM_Buff[1];
0000bc  8840              LDRH     r0,[r0,#2]
0000be  8148              STRH     r0,[r1,#0xa]
;;;97     		break;
0000c0  e007              B        |L1.210|
;;;98     	case COMM_WRITE_LOCATING_PERIOD:
;;;99     		tMotor.structMotor.unLocatingPeriod = pCOM_Buff[1];
0000c2  8840              LDRH     r0,[r0,#2]
0000c4  81c8              STRH     r0,[r1,#0xe]
;;;100    		break;
0000c6  e004              B        |L1.210|
;;;101    	case COMM_WRITE_RAMP_UP_PERIOD:
;;;102    		tMotor.structMotor.unRampUpPeriod = pCOM_Buff[1] + pCOM_Buff[2] << 16;
0000c8  8842              LDRH     r2,[r0,#2]
0000ca  8880              LDRH     r0,[r0,#4]
0000cc  1810              ADDS     r0,r2,r0
0000ce  0400              LSLS     r0,r0,#16
0000d0  6148              STR      r0,[r1,#0x14]  ; tMotor
                  |L1.210|
;;;103    			break;
;;;104    	default:
;;;105    		return -1;
;;;106    	}
;;;107    	return 0;
0000d2  2000              MOVS     r0,#0
;;;108    }
0000d4  bd00              POP      {pc}
0000d6  2000              MOVS     r0,#0                 ;105
0000d8  43c0              MVNS     r0,r0                 ;105
0000da  bd00              POP      {pc}
;;;109    
                          ENDP

                  COMM_Manager PROC
;;;110    // Communicating with mast via SPI
;;;111    void COMM_Manager(void)
0000dc  b570              PUSH     {r4-r6,lr}
;;;112    {
;;;113    	static uint16_t unCOM_Buff[COMM_FIFO_LENGTH];
;;;114    	static uint32_t unLastFrameCNT = 0;
;;;115    	static uint32_t unLastCheckTime = 0;
;;;116    	// All transactions are handled in interrupt
;;;117    	if (tMotor.structMotor.MSR.bNewComFrameReceived == TRUE)
0000de  4927              LDR      r1,|L1.380|
0000e0  8848              LDRH     r0,[r1,#2]  ; tMotor
;;;118    	{
;;;119    		memcpy(unCOM_Buff, unCOM_SPI_ReadData, COMM_FIFO_LENGTH);
0000e2  4c28              LDR      r4,|L1.388|
0000e4  06c0              LSLS     r0,r0,#27             ;117
0000e6  d528              BPL      |L1.314|
0000e8  8b20              LDRH     r0,[r4,#0x18]  ; unCOM_SPI_ReadData
0000ea  8220              STRH     r0,[r4,#0x10]
0000ec  8b62              LDRH     r2,[r4,#0x1a]  ; unCOM_SPI_ReadData
0000ee  8262              STRH     r2,[r4,#0x12]
;;;120    		tMotor.structMotor.MSR.bNewComFrameReceived = FALSE;
0000f0  884a              LDRH     r2,[r1,#2]  ; tMotor
0000f2  2310              MOVS     r3,#0x10
0000f4  439a              BICS     r2,r2,r3
0000f6  804a              STRH     r2,[r1,#2]
;;;121    		if (CRC16((uint8_t *)unCOM_Buff, (IS_COMM_RD_CMD(unCOM_Buff[0]) ? ((COMM_RD_CMD_CNT - 1) << 1) : ((COMM_WR_CMD_CNT - 1) << 1))) ==
0000f8  18e5              ADDS     r5,r4,r3
0000fa  0bc0              LSRS     r0,r0,#15
0000fc  d001              BEQ      |L1.258|
0000fe  2102              MOVS     r1,#2
000100  e000              B        |L1.260|
                  |L1.258|
000102  2106              MOVS     r1,#6
                  |L1.260|
000104  481f              LDR      r0,|L1.388|
000106  3010              ADDS     r0,r0,#0x10
000108  f7fffffe          BL       CRC16
00010c  8829              LDRH     r1,[r5,#0]  ; unCOM_Buff
00010e  0bca              LSRS     r2,r1,#15
000110  d001              BEQ      |L1.278|
;;;122    				(IS_COMM_RD_CMD(unCOM_Buff[0]) ? unCOM_Buff[COMM_RD_CMD_CNT - 1] : unCOM_Buff[COMM_WR_CMD_CNT - 1]))
000112  886a              LDRH     r2,[r5,#2]  ; unCOM_Buff
000114  e000              B        |L1.280|
                  |L1.278|
000116  88ea              LDRH     r2,[r5,#6]  ; unCOM_Buff
                  |L1.280|
000118  4290              CMP      r0,r2
00011a  d10b              BNE      |L1.308|
;;;123    		{
;;;124    			unValidFrameCNT++;
00011c  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
00011e  1c40              ADDS     r0,r0,#1
;;;125    			// safe zone
;;;126    			if (IS_COMM_RD_CMD(unCOM_Buff[0]))
000120  60a0              STR      r0,[r4,#8]  ; unValidFrameCNT
000122  0bc8              LSRS     r0,r1,#15
;;;127    			{
;;;128    				nReadCommandHandler(unCOM_Buff);
;;;129    			}
;;;130    			else
;;;131    			{
;;;132    				nWriteCommandHandler(unCOM_Buff);
000124  4818              LDR      r0,|L1.392|
000126  d002              BEQ      |L1.302|
000128  f7fffffe          BL       nReadCommandHandler
00012c  e005              B        |L1.314|
                  |L1.302|
00012e  f7fffffe          BL       nWriteCommandHandler
000132  e002              B        |L1.314|
                  |L1.308|
;;;133    			}
;;;134    		}
;;;135    		else
;;;136    		{
;;;137    			unCOM_SPI_TransErrCNT++;
000134  68e0              LDR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
000136  1c40              ADDS     r0,r0,#1
000138  60e0              STR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
                  |L1.314|
;;;138    		}
;;;139    	}
;;;140    	
;;;141    	// Comm protection 1: If have NOT received any frame in 500ms, error
;;;142    	if ((uint32_t)(unSystemTick - unLastCheckTime) > 500)
00013a  4814              LDR      r0,|L1.396|
00013c  6801              LDR      r1,[r0,#0]  ; unSystemTick
00013e  6862              LDR      r2,[r4,#4]  ; unLastCheckTime
000140  1a89              SUBS     r1,r1,r2
000142  22ff              MOVS     r2,#0xff
000144  32f5              ADDS     r2,r2,#0xf5
000146  4291              CMP      r1,r2
000148  d90c              BLS      |L1.356|
;;;143    	{
;;;144    		unLastCheckTime = unSystemTick;
00014a  6800              LDR      r0,[r0,#0]  ; unSystemTick
;;;145    		if ((uint32_t)(unValidFrameCNT - unLastFrameCNT) < 1)
00014c  6060              STR      r0,[r4,#4]  ; unLastCheckTime
00014e  6821              LDR      r1,[r4,#0]  ; unLastFrameCNT
000150  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
000152  4288              CMP      r0,r1
000154  d104              BNE      |L1.352|
;;;146    		{
;;;147    			BLDC_stopMotor();
000156  f7fffffe          BL       BLDC_stopMotor
;;;148    			setError(ERR_COMMUNICATION_FAIL);
00015a  2002              MOVS     r0,#2
00015c  f7fffffe          BL       setError
                  |L1.352|
;;;149    		}
;;;150    		unLastFrameCNT = unValidFrameCNT;
000160  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
000162  6020              STR      r0,[r4,#0]  ; unLastFrameCNT
                  |L1.356|
;;;151    	}
;;;152    	// Comm protection 2: If received error frame exceed some threshold, error
;;;153    	if (unCOM_SPI_TransErrCNT > COM_SPI_TRANS_ERR_THRESHOLD)
000164  68e0              LDR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
000166  2806              CMP      r0,#6
000168  d904              BLS      |L1.372|
;;;154    	{
;;;155    		BLDC_stopMotor();
00016a  f7fffffe          BL       BLDC_stopMotor
;;;156    		setError(ERR_COMMUNICATION_FAIL);
00016e  2002              MOVS     r0,#2
000170  f7fffffe          BL       setError
                  |L1.372|
;;;157    	}
;;;158    }
000174  bd70              POP      {r4-r6,pc}
                          ENDP

000176  0000              DCW      0x0000
                  |L1.376|
                          DCD      ||.constdata||
                  |L1.380|
                          DCD      tMotor
                  |L1.384|
                          DCD      0x40030000
                  |L1.388|
                          DCD      ||.data||
                  |L1.392|
                          DCD      ||.data||+0x10
                  |L1.396|
                          DCD      unSystemTick

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CRC_HIGH_FACTOR
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  CRC_LOW_FACTOR
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=2

                  unLastFrameCNT
                          DCD      0x00000000
                  unLastCheckTime
                          DCD      0x00000000
                  unValidFrameCNT
                          DCD      0x00000000
                  unCOM_SPI_TransErrCNT
                          DCD      0x00000000
                  unCOM_Buff
                          %        8
                  unCOM_SPI_ReadData
                          %        8

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  unCOM_SPI_TransCNT
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.data||
                  unRegisterValue
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  tRegister
000000  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.data||
                  FlagRegisterNeedWrite
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L21.16|
00000e  461d              MOV      r5,r3
                  |L21.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "User\\Communication.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_b3a855e6____REV16|
#line 118 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_Communication_c_b3a855e6____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_b3a855e6____REVSH|
#line 132
|__asm___15_Communication_c_b3a855e6____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
