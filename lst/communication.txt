; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\communication.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\communication.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -IG:\Geek\Projects\Zulolo_F\Force\Code\Zulolo_F_Force\RTE -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.7\Device\Mini51\Include -ID:\Keil_v5\ARM\CMSIS\Include -I\ -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\communication.crf User\Communication.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  calCRC16 PROC
;;;36     
;;;37     uint16_t calCRC16(uint8_t* pBytes, uint32_t unLength)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
000002  4605              MOV      r5,r0
;;;39     	uint16_t crc = 0;
000004  2000              MOVS     r0,#0
;;;40     	uint32_t unIndex;
;;;41     	uint8_t unPosInTable;
;;;42     	
;;;43     	for (unIndex = 0; unIndex < unLength; unIndex++)
000006  4602              MOV      r2,r0
;;;44     	{
;;;45     		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
;;;46     		unPosInTable = (uint8_t)((crc >> 8) ^ (*(pBytes + REVS_BYTE_ORDER(unIndex)))); /* equal: ((crc ^ (b << 8)) >> 8) */
;;;47     		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
;;;48     		crc = (uint16_t)((crc << 8) ^ (uint16_t)(CRC_TABLE16[unPosInTable]));
000008  4e56              LDR      r6,|L1.356|
00000a  e00b              B        |L1.36|
                  |L1.12|
00000c  0a04              LSRS     r4,r0,#8              ;46
00000e  07d3              LSLS     r3,r2,#31             ;46
000010  d00b              BEQ      |L1.42|
000012  1e53              SUBS     r3,r2,#1              ;46
                  |L1.20|
000014  5ceb              LDRB     r3,[r5,r3]            ;46
000016  0200              LSLS     r0,r0,#8
000018  405c              EORS     r4,r4,r3              ;46
00001a  0063              LSLS     r3,r4,#1
00001c  5af3              LDRH     r3,[r6,r3]
00001e  4058              EORS     r0,r0,r3
000020  b280              UXTH     r0,r0
000022  1c52              ADDS     r2,r2,#1
                  |L1.36|
000024  428a              CMP      r2,r1                 ;43
000026  d3f1              BCC      |L1.12|
;;;49     	}
;;;50     
;;;51     	return crc;
;;;52     }
000028  bd70              POP      {r4-r6,pc}
                  |L1.42|
00002a  1c53              ADDS     r3,r2,#1              ;46
00002c  e7f2              B        |L1.20|
;;;53     
                          ENDP

                  nReadCommandHandler PROC
;;;54     uint32_t unSPI_TX_WR_CNT = 0;
;;;55     int32_t nReadCommandHandler(uint16_t* pCOM_Buff)
00002e  b530              PUSH     {r4,r5,lr}
;;;56     {
000030  4604              MOV      r4,r0
;;;57     	if (COMM_GET_DATA(pCOM_Buff[0]) < COMM_READ_MAX)
000032  8800              LDRH     r0,[r0,#0]
000034  0441              LSLS     r1,r0,#17
000036  0c49              LSRS     r1,r1,#17
000038  2912              CMP      r1,#0x12
00003a  d214              BCS      |L1.102|
;;;58     	{
;;;59     		SPI_WRITE_TX(SPI, (tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])] << 16) + 
00003c  0048              LSLS     r0,r1,#1
00003e  4d4a              LDR      r5,|L1.360|
000040  2102              MOVS     r1,#2
000042  1940              ADDS     r0,r0,r5
000044  f7fffffe          BL       calCRC16
000048  8821              LDRH     r1,[r4,#0]
00004a  0449              LSLS     r1,r1,#17
00004c  0c09              LSRS     r1,r1,#16
00004e  5a69              LDRH     r1,[r5,r1]
000050  0409              LSLS     r1,r1,#16
000052  1840              ADDS     r0,r0,r1
000054  4945              LDR      r1,|L1.364|
000056  6208              STR      r0,[r1,#0x20]
;;;60     			calCRC16((uint8_t*)(&(tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])])), 2) );
;;;61     		unSPI_TX_WR_CNT++;
000058  4842              LDR      r0,|L1.356|
00005a  3824              SUBS     r0,r0,#0x24
00005c  6801              LDR      r1,[r0,#0]  ; unSPI_TX_WR_CNT
00005e  1c49              ADDS     r1,r1,#1
;;;62     		return 0;
000060  6001              STR      r1,[r0,#0]  ; unSPI_TX_WR_CNT
000062  2000              MOVS     r0,#0
;;;63     	}
;;;64     	else
;;;65     	{
;;;66     		return -1;
;;;67     	}
;;;68     }
000064  bd30              POP      {r4,r5,pc}
                  |L1.102|
000066  2000              MOVS     r0,#0                 ;66
000068  43c0              MVNS     r0,r0                 ;66
00006a  bd30              POP      {r4,r5,pc}
;;;69     
                          ENDP

                  nWriteCommandHandler PROC
;;;70     int32_t nWriteCommandHandler(uint16_t* pCOM_Buff)
00006c  b500              PUSH     {lr}
;;;71     {
;;;72     	switch(COMM_GET_DATA(pCOM_Buff[0]))
00006e  8801              LDRH     r1,[r0,#0]
000070  044a              LSLS     r2,r1,#17
000072  0c52              LSRS     r2,r2,#17
;;;73     	{
;;;74     	case COMM_WRITE_MOTOR_NEED_TO_RUN:
;;;75     	case COMM_WRITE_ROTATE_DIRECTION:
;;;76     		tMotor.structMotor.MCR.bMotorNeedToRun = pCOM_Buff[1];
000074  493c              LDR      r1,|L1.360|
000076  0013              MOVS     r3,r2                 ;72
000078  f7fffffe          BL       __ARM_common_switch8
00007c  08210505          DCB      0x08,0x21,0x05,0x05
000080  0e111417          DCB      0x0e,0x11,0x14,0x17
000084  1a21              DCB      0x1a,0x21
000086  880a              LDRH     r2,[r1,#0]  ; tMotor
000088  7880              LDRB     r0,[r0,#2]
00008a  0852              LSRS     r2,r2,#1
00008c  0052              LSLS     r2,r2,#1
00008e  07c0              LSLS     r0,r0,#31
000090  0fc0              LSRS     r0,r0,#31
000092  4302              ORRS     r2,r2,r0
000094  800a              STRH     r2,[r1,#0]
;;;77     		break;
000096  e010              B        |L1.186|
;;;78     	case COMM_WRITE_LOCATING_DUTY:
;;;79     		tMotor.structMotor.unLocatingDuty = pCOM_Buff[1];
000098  8840              LDRH     r0,[r0,#2]
00009a  80c8              STRH     r0,[r1,#6]
;;;80     		break;
00009c  e00d              B        |L1.186|
;;;81     	case COMM_WRITE_RAMP_UP_DUTY:
;;;82     		tMotor.structMotor.unRampUpDuty = pCOM_Buff[1];
00009e  8840              LDRH     r0,[r0,#2]
0000a0  8108              STRH     r0,[r1,#8]
;;;83     		break;
0000a2  e00a              B        |L1.186|
;;;84     	case COMM_WRITE_TARGET_DUTY:
;;;85     		tMotor.structMotor.unTargetDuty = pCOM_Buff[1];
0000a4  8840              LDRH     r0,[r0,#2]
0000a6  8148              STRH     r0,[r1,#0xa]
;;;86     		break;
0000a8  e007              B        |L1.186|
;;;87     	case COMM_WRITE_LOCATING_PERIOD:
;;;88     		tMotor.structMotor.unLocatingPeriod = pCOM_Buff[1];
0000aa  8840              LDRH     r0,[r0,#2]
0000ac  81c8              STRH     r0,[r1,#0xe]
;;;89     		break;
0000ae  e004              B        |L1.186|
;;;90     	case COMM_WRITE_RAMP_UP_PERIOD:
;;;91     		tMotor.structMotor.unRampUpPeriod = pCOM_Buff[1] + (pCOM_Buff[2] << 16);
0000b0  8842              LDRH     r2,[r0,#2]
0000b2  8880              LDRH     r0,[r0,#4]
0000b4  0400              LSLS     r0,r0,#16
0000b6  1810              ADDS     r0,r2,r0
0000b8  6148              STR      r0,[r1,#0x14]  ; tMotor
                  |L1.186|
;;;92     			break;
;;;93     	default:
;;;94     		return -1;
;;;95     	}
;;;96     	return 0;
0000ba  2000              MOVS     r0,#0
;;;97     }
0000bc  bd00              POP      {pc}
0000be  2000              MOVS     r0,#0                 ;94
0000c0  43c0              MVNS     r0,r0                 ;94
0000c2  bd00              POP      {pc}
;;;98     
                          ENDP

                  COMM_Manager PROC
;;;99     // Communicating with mast via SPI
;;;100    void COMM_Manager(void)
0000c4  b570              PUSH     {r4-r6,lr}
;;;101    {
;;;102    	static uint16_t unCOM_Buff[COMM_FIFO_LENGTH];
;;;103    	static uint32_t unLastFrameCNT = 0;
;;;104    	static uint32_t unLastCheckTime = 0;
;;;105    	// All transactions are handled in interrupt
;;;106    	if (tMotor.structMotor.MSR.bNewComFrameReceived == TRUE)
0000c6  4a28              LDR      r2,|L1.360|
0000c8  8850              LDRH     r0,[r2,#2]  ; tMotor
;;;107    	{
;;;108    		memcpy(unCOM_Buff, unCOM_SPI_ReadData, COMM_FIFO_LENGTH);
0000ca  4c29              LDR      r4,|L1.368|
0000cc  06c0              LSLS     r0,r0,#27             ;106
0000ce  d52a              BPL      |L1.294|
0000d0  4621              MOV      r1,r4
0000d2  8b88              LDRH     r0,[r1,#0x1c]  ; unCOM_SPI_ReadData
0000d4  82a0              STRH     r0,[r4,#0x14]
0000d6  8bc9              LDRH     r1,[r1,#0x1e]  ; unCOM_SPI_ReadData
0000d8  82e1              STRH     r1,[r4,#0x16]
;;;109    		tMotor.structMotor.MSR.bNewComFrameReceived = FALSE;
0000da  8851              LDRH     r1,[r2,#2]  ; tMotor
0000dc  2310              MOVS     r3,#0x10
0000de  4399              BICS     r1,r1,r3
0000e0  8051              STRH     r1,[r2,#2]
;;;110    		if (calCRC16((uint8_t *)unCOM_Buff, (IS_COMM_RD_CMD(unCOM_Buff[0]) ? ((COMM_RD_CMD_CNT - 1) << 1) : ((COMM_WR_CMD_CNT - 1) << 1))) ==
0000e2  4625              MOV      r5,r4
0000e4  3514              ADDS     r5,r5,#0x14
0000e6  0bc0              LSRS     r0,r0,#15
0000e8  d001              BEQ      |L1.238|
0000ea  2102              MOVS     r1,#2
0000ec  e000              B        |L1.240|
                  |L1.238|
0000ee  2106              MOVS     r1,#6
                  |L1.240|
0000f0  481c              LDR      r0,|L1.356|
0000f2  3810              SUBS     r0,r0,#0x10
0000f4  f7fffffe          BL       calCRC16
0000f8  8829              LDRH     r1,[r5,#0]  ; unCOM_Buff
0000fa  0bca              LSRS     r2,r1,#15
0000fc  d001              BEQ      |L1.258|
;;;111    				(IS_COMM_RD_CMD(unCOM_Buff[0]) ? unCOM_Buff[COMM_RD_CMD_CNT - 1] : unCOM_Buff[COMM_WR_CMD_CNT - 1]))
0000fe  886a              LDRH     r2,[r5,#2]  ; unCOM_Buff
000100  e000              B        |L1.260|
                  |L1.258|
000102  88ea              LDRH     r2,[r5,#6]  ; unCOM_Buff
                  |L1.260|
000104  4290              CMP      r0,r2
000106  d10b              BNE      |L1.288|
;;;112    		{
;;;113    			unValidFrameCNT++;
000108  68e0              LDR      r0,[r4,#0xc]  ; unValidFrameCNT
00010a  1c40              ADDS     r0,r0,#1
;;;114    			// safe zone
;;;115    			if (IS_COMM_RD_CMD(unCOM_Buff[0]))
00010c  60e0              STR      r0,[r4,#0xc]  ; unValidFrameCNT
00010e  0bc8              LSRS     r0,r1,#15
;;;116    			{
;;;117    				nReadCommandHandler(unCOM_Buff);
;;;118    			}
;;;119    			else
;;;120    			{
;;;121    				nWriteCommandHandler(unCOM_Buff);
000110  4818              LDR      r0,|L1.372|
000112  d002              BEQ      |L1.282|
000114  f7fffffe          BL       nReadCommandHandler
000118  e005              B        |L1.294|
                  |L1.282|
00011a  f7fffffe          BL       nWriteCommandHandler
00011e  e002              B        |L1.294|
                  |L1.288|
;;;122    			}
;;;123    		}
;;;124    		else
;;;125    		{
;;;126    			unCOM_SPI_TransErrCNT++;
000120  6920              LDR      r0,[r4,#0x10]  ; unCOM_SPI_TransErrCNT
000122  1c40              ADDS     r0,r0,#1
000124  6120              STR      r0,[r4,#0x10]  ; unCOM_SPI_TransErrCNT
                  |L1.294|
;;;127    		}
;;;128    	}
;;;129    	
;;;130    	// Comm protection 1: If have NOT received any frame in 500ms, error
;;;131    	if ((uint32_t)(unSystemTick - unLastCheckTime) > 500)
000126  4814              LDR      r0,|L1.376|
000128  6801              LDR      r1,[r0,#0]  ; unSystemTick
00012a  68a2              LDR      r2,[r4,#8]  ; unLastCheckTime
00012c  1a89              SUBS     r1,r1,r2
00012e  22ff              MOVS     r2,#0xff
000130  32f5              ADDS     r2,r2,#0xf5
000132  4291              CMP      r1,r2
000134  d90c              BLS      |L1.336|
;;;132    	{
;;;133    		unLastCheckTime = unSystemTick;
000136  6800              LDR      r0,[r0,#0]  ; unSystemTick
;;;134    		if ((uint32_t)(unValidFrameCNT - unLastFrameCNT) < 1)
000138  60a0              STR      r0,[r4,#8]  ; unLastCheckTime
00013a  6861              LDR      r1,[r4,#4]  ; unLastFrameCNT
00013c  68e0              LDR      r0,[r4,#0xc]  ; unValidFrameCNT
00013e  4288              CMP      r0,r1
000140  d104              BNE      |L1.332|
;;;135    		{
;;;136    			BLDC_stopMotor();
000142  f7fffffe          BL       BLDC_stopMotor
;;;137    			setError(ERR_COMMUNICATION_FAIL);
000146  2002              MOVS     r0,#2
000148  f7fffffe          BL       setError
                  |L1.332|
;;;138    		}
;;;139    		unLastFrameCNT = unValidFrameCNT;
00014c  68e0              LDR      r0,[r4,#0xc]  ; unValidFrameCNT
00014e  6060              STR      r0,[r4,#4]  ; unLastFrameCNT
                  |L1.336|
;;;140    	}
;;;141    	// Comm protection 2: If received error frame exceed some threshold, error
;;;142    	if (unCOM_SPI_TransErrCNT > COM_SPI_TRANS_ERR_THRESHOLD)
000150  6920              LDR      r0,[r4,#0x10]  ; unCOM_SPI_TransErrCNT
000152  2806              CMP      r0,#6
000154  d904              BLS      |L1.352|
;;;143    	{
;;;144    		BLDC_stopMotor();
000156  f7fffffe          BL       BLDC_stopMotor
;;;145    		setError(ERR_COMMUNICATION_FAIL);
00015a  2002              MOVS     r0,#2
00015c  f7fffffe          BL       setError
                  |L1.352|
;;;146    	}
;;;147    }
000160  bd70              POP      {r4-r6,pc}
                          ENDP

000162  0000              DCW      0x0000
                  |L1.356|
                          DCD      ||.data||+0x24
                  |L1.360|
                          DCD      tMotor
                  |L1.364|
                          DCD      0x40030000
                  |L1.368|
                          DCD      ||.data||
                  |L1.372|
                          DCD      ||.data||+0x14
                  |L1.376|
                          DCD      unSystemTick

                          AREA ||.data||, DATA, ALIGN=2

                  unSPI_TX_WR_CNT
                          DCD      0x00000000
                  unLastFrameCNT
                          DCD      0x00000000
                  unLastCheckTime
                          DCD      0x00000000
                  unValidFrameCNT
                          DCD      0x00000000
                  unCOM_SPI_TransErrCNT
                          DCD      0x00000000
                  unCOM_Buff
                          %        8
                  unCOM_SPI_ReadData
                          %        8
                  CRC_TABLE16
000024  00008005          DCW      0x0000,0x8005
000028  800f000a          DCW      0x800f,0x000a
00002c  801b001e          DCW      0x801b,0x001e
000030  00148011          DCW      0x0014,0x8011
000034  80330036          DCW      0x8033,0x0036
000038  003c8039          DCW      0x003c,0x8039
00003c  0028802d          DCW      0x0028,0x802d
000040  80270022          DCW      0x8027,0x0022
000044  80630066          DCW      0x8063,0x0066
000048  006c8069          DCW      0x006c,0x8069
00004c  0078807d          DCW      0x0078,0x807d
000050  80770072          DCW      0x8077,0x0072
000054  00508055          DCW      0x0050,0x8055
000058  805f005a          DCW      0x805f,0x005a
00005c  804b004e          DCW      0x804b,0x004e
000060  00448041          DCW      0x0044,0x8041
000064  80c300c6          DCW      0x80c3,0x00c6
000068  00cc80c9          DCW      0x00cc,0x80c9
00006c  00d880dd          DCW      0x00d8,0x80dd
000070  80d700d2          DCW      0x80d7,0x00d2
000074  00f080f5          DCW      0x00f0,0x80f5
000078  80ff00fa          DCW      0x80ff,0x00fa
00007c  80eb00ee          DCW      0x80eb,0x00ee
000080  00e480e1          DCW      0x00e4,0x80e1
000084  00a080a5          DCW      0x00a0,0x80a5
000088  80af00aa          DCW      0x80af,0x00aa
00008c  80bb00be          DCW      0x80bb,0x00be
000090  00b480b1          DCW      0x00b4,0x80b1
000094  80930096          DCW      0x8093,0x0096
000098  009c8099          DCW      0x009c,0x8099
00009c  0088808d          DCW      0x0088,0x808d
0000a0  80870082          DCW      0x8087,0x0082
0000a4  81830186          DCW      0x8183,0x0186
0000a8  018c8189          DCW      0x018c,0x8189
0000ac  0198819d          DCW      0x0198,0x819d
0000b0  81970192          DCW      0x8197,0x0192
0000b4  01b081b5          DCW      0x01b0,0x81b5
0000b8  81bf01ba          DCW      0x81bf,0x01ba
0000bc  81ab01ae          DCW      0x81ab,0x01ae
0000c0  01a481a1          DCW      0x01a4,0x81a1
0000c4  01e081e5          DCW      0x01e0,0x81e5
0000c8  81ef01ea          DCW      0x81ef,0x01ea
0000cc  81fb01fe          DCW      0x81fb,0x01fe
0000d0  01f481f1          DCW      0x01f4,0x81f1
0000d4  81d301d6          DCW      0x81d3,0x01d6
0000d8  01dc81d9          DCW      0x01dc,0x81d9
0000dc  01c881cd          DCW      0x01c8,0x81cd
0000e0  81c701c2          DCW      0x81c7,0x01c2
0000e4  01408145          DCW      0x0140,0x8145
0000e8  814f014a          DCW      0x814f,0x014a
0000ec  815b015e          DCW      0x815b,0x015e
0000f0  01548151          DCW      0x0154,0x8151
0000f4  81730176          DCW      0x8173,0x0176
0000f8  017c8179          DCW      0x017c,0x8179
0000fc  0168816d          DCW      0x0168,0x816d
000100  81670162          DCW      0x8167,0x0162
000104  81230126          DCW      0x8123,0x0126
000108  012c8129          DCW      0x012c,0x8129
00010c  0138813d          DCW      0x0138,0x813d
000110  81370132          DCW      0x8137,0x0132
000114  01108115          DCW      0x0110,0x8115
000118  811f011a          DCW      0x811f,0x011a
00011c  810b010e          DCW      0x810b,0x010e
000120  01048101          DCW      0x0104,0x8101
000124  83030306          DCW      0x8303,0x0306
000128  030c8309          DCW      0x030c,0x8309
00012c  0318831d          DCW      0x0318,0x831d
000130  83170312          DCW      0x8317,0x0312
000134  03308335          DCW      0x0330,0x8335
000138  833f033a          DCW      0x833f,0x033a
00013c  832b032e          DCW      0x832b,0x032e
000140  03248321          DCW      0x0324,0x8321
000144  03608365          DCW      0x0360,0x8365
000148  836f036a          DCW      0x836f,0x036a
00014c  837b037e          DCW      0x837b,0x037e
000150  03748371          DCW      0x0374,0x8371
000154  83530356          DCW      0x8353,0x0356
000158  035c8359          DCW      0x035c,0x8359
00015c  0348834d          DCW      0x0348,0x834d
000160  83470342          DCW      0x8347,0x0342
000164  03c083c5          DCW      0x03c0,0x83c5
000168  83cf03ca          DCW      0x83cf,0x03ca
00016c  83db03de          DCW      0x83db,0x03de
000170  03d483d1          DCW      0x03d4,0x83d1
000174  83f303f6          DCW      0x83f3,0x03f6
000178  03fc83f9          DCW      0x03fc,0x83f9
00017c  03e883ed          DCW      0x03e8,0x83ed
000180  83e703e2          DCW      0x83e7,0x03e2
000184  83a303a6          DCW      0x83a3,0x03a6
000188  03ac83a9          DCW      0x03ac,0x83a9
00018c  03b883bd          DCW      0x03b8,0x83bd
000190  83b703b2          DCW      0x83b7,0x03b2
000194  03908395          DCW      0x0390,0x8395
000198  839f039a          DCW      0x839f,0x039a
00019c  838b038e          DCW      0x838b,0x038e
0001a0  03848381          DCW      0x0384,0x8381
0001a4  02808285          DCW      0x0280,0x8285
0001a8  828f028a          DCW      0x828f,0x028a
0001ac  829b029e          DCW      0x829b,0x029e
0001b0  02948291          DCW      0x0294,0x8291
0001b4  82b302b6          DCW      0x82b3,0x02b6
0001b8  02bc82b9          DCW      0x02bc,0x82b9
0001bc  02a882ad          DCW      0x02a8,0x82ad
0001c0  82a702a2          DCW      0x82a7,0x02a2
0001c4  82e302e6          DCW      0x82e3,0x02e6
0001c8  02ec82e9          DCW      0x02ec,0x82e9
0001cc  02f882fd          DCW      0x02f8,0x82fd
0001d0  82f702f2          DCW      0x82f7,0x02f2
0001d4  02d082d5          DCW      0x02d0,0x82d5
0001d8  82df02da          DCW      0x82df,0x02da
0001dc  82cb02ce          DCW      0x82cb,0x02ce
0001e0  02c482c1          DCW      0x02c4,0x82c1
0001e4  82430246          DCW      0x8243,0x0246
0001e8  024c8249          DCW      0x024c,0x8249
0001ec  0258825d          DCW      0x0258,0x825d
0001f0  82570252          DCW      0x8257,0x0252
0001f4  02708275          DCW      0x0270,0x8275
0001f8  827f027a          DCW      0x827f,0x027a
0001fc  826b026e          DCW      0x826b,0x026e
000200  02648261          DCW      0x0264,0x8261
000204  02208225          DCW      0x0220,0x8225
000208  822f022a          DCW      0x822f,0x022a
00020c  823b023e          DCW      0x823b,0x023e
000210  02348231          DCW      0x0234,0x8231
000214  82130216          DCW      0x8213,0x0216
000218  021c8219          DCW      0x021c,0x8219
00021c  0208820d          DCW      0x0208,0x820d
000220  82070202          DCW      0x8207,0x0202

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  unCOM_SPI_TransCNT
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.data||
                  unRegisterValue
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  tRegister
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  FlagRegisterNeedWrite
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L20.16|
00000e  461d              MOV      r5,r3
                  |L20.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "User\\Communication.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_6d0c631e____REV16|
#line 118 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_Communication_c_6d0c631e____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_6d0c631e____REVSH|
#line 132
|__asm___15_Communication_c_6d0c631e____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
