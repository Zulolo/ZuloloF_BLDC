; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\communication.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\communication.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -IG:\Geek\Projects\Zulolo_F\Force\Code\Zulolo_F_Force\RTE -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.7\Device\Mini51\Include -ID:\Keil_v5\ARM\CMSIS\Include -I\ -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\communication.crf User\Communication.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  calCRC16 PROC
;;;36     
;;;37     uint16_t calCRC16(uint8_t* pBytes, uint32_t unLength)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
000002  4605              MOV      r5,r0
;;;39     	uint16_t crc = 0;
000004  2000              MOVS     r0,#0
;;;40     	uint32_t unIndex;
;;;41     	uint8_t unPosInTable;
;;;42     	
;;;43     	for (unIndex = 0; unIndex < unLength; unIndex++)
000006  4602              MOV      r2,r0
;;;44     	{
;;;45     		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
;;;46     		unPosInTable = (uint8_t)((crc >> 8) ^ (*(pBytes + REVS_BYTE_ORDER(unIndex)))); /* equal: ((crc ^ (b << 8)) >> 8) */
;;;47     		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
;;;48     		crc = (uint16_t)((crc << 8) ^ (uint16_t)(CRC_TABLE16[unPosInTable]));
000008  4e52              LDR      r6,|L1.340|
00000a  e00b              B        |L1.36|
                  |L1.12|
00000c  0a04              LSRS     r4,r0,#8              ;46
00000e  07d3              LSLS     r3,r2,#31             ;46
000010  d00b              BEQ      |L1.42|
000012  1e53              SUBS     r3,r2,#1              ;46
                  |L1.20|
000014  5ceb              LDRB     r3,[r5,r3]            ;46
000016  0200              LSLS     r0,r0,#8
000018  405c              EORS     r4,r4,r3              ;46
00001a  0063              LSLS     r3,r4,#1
00001c  5af3              LDRH     r3,[r6,r3]
00001e  4058              EORS     r0,r0,r3
000020  b280              UXTH     r0,r0
000022  1c52              ADDS     r2,r2,#1
                  |L1.36|
000024  428a              CMP      r2,r1                 ;43
000026  d3f1              BCC      |L1.12|
;;;49     	}
;;;50     
;;;51     	return crc;
;;;52     }
000028  bd70              POP      {r4-r6,pc}
                  |L1.42|
00002a  1c53              ADDS     r3,r2,#1              ;46
00002c  e7f2              B        |L1.20|
;;;53     
                          ENDP

                  nReadCommandHandler PROC
;;;54     int32_t nReadCommandHandler(uint16_t* pCOM_Buff)
00002e  b530              PUSH     {r4,r5,lr}
;;;55     {
000030  4604              MOV      r4,r0
;;;56     	if (COMM_GET_DATA(pCOM_Buff[0]) < COMM_READ_MAX)
000032  8800              LDRH     r0,[r0,#0]
000034  0441              LSLS     r1,r0,#17
000036  0c49              LSRS     r1,r1,#17
000038  2912              CMP      r1,#0x12
00003a  d20f              BCS      |L1.92|
;;;57     	{
;;;58     		SPI_WRITE_TX(SPI, tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])] + (calCRC16((uint8_t*)(&(tMotor.unValue[COMM_GET_DATA(pCOM_Buff[0])])), 2) << 16));
00003c  0048              LSLS     r0,r1,#1
00003e  4d46              LDR      r5,|L1.344|
000040  2102              MOVS     r1,#2
000042  1940              ADDS     r0,r0,r5
000044  f7fffffe          BL       calCRC16
000048  8821              LDRH     r1,[r4,#0]
00004a  0400              LSLS     r0,r0,#16
00004c  0449              LSLS     r1,r1,#17
00004e  0c09              LSRS     r1,r1,#16
000050  5a69              LDRH     r1,[r5,r1]
000052  1840              ADDS     r0,r0,r1
000054  4941              LDR      r1,|L1.348|
000056  6208              STR      r0,[r1,#0x20]
;;;59     		return 0;
000058  2000              MOVS     r0,#0
;;;60     	}
;;;61     	else
;;;62     	{
;;;63     		return -1;
;;;64     	}
;;;65     }
00005a  bd30              POP      {r4,r5,pc}
                  |L1.92|
00005c  2000              MOVS     r0,#0                 ;63
00005e  43c0              MVNS     r0,r0                 ;63
000060  bd30              POP      {r4,r5,pc}
;;;66     
                          ENDP

                  nWriteCommandHandler PROC
;;;67     int32_t nWriteCommandHandler(uint16_t* pCOM_Buff)
000062  b500              PUSH     {lr}
;;;68     {
;;;69     	switch(COMM_GET_DATA(pCOM_Buff[0]))
000064  8801              LDRH     r1,[r0,#0]
000066  044a              LSLS     r2,r1,#17
000068  0c52              LSRS     r2,r2,#17
;;;70     	{
;;;71     	case COMM_WRITE_MOTOR_NEED_TO_RUN:
;;;72     	case COMM_WRITE_ROTATE_DIRECTION:
;;;73     		tMotor.structMotor.MCR.bMotorNeedToRun = pCOM_Buff[1];
00006a  493b              LDR      r1,|L1.344|
00006c  0013              MOVS     r3,r2                 ;69
00006e  f7fffffe          BL       __ARM_common_switch8
000072  0821              DCB      0x08,0x21
000074  05050e11          DCB      0x05,0x05,0x0e,0x11
000078  14171a21          DCB      0x14,0x17,0x1a,0x21
00007c  880a              LDRH     r2,[r1,#0]  ; tMotor
00007e  7880              LDRB     r0,[r0,#2]
000080  0852              LSRS     r2,r2,#1
000082  0052              LSLS     r2,r2,#1
000084  07c0              LSLS     r0,r0,#31
000086  0fc0              LSRS     r0,r0,#31
000088  4302              ORRS     r2,r2,r0
00008a  800a              STRH     r2,[r1,#0]
;;;74     		break;
00008c  e010              B        |L1.176|
;;;75     	case COMM_WRITE_LOCATING_DUTY:
;;;76     		tMotor.structMotor.unLocatingDuty = pCOM_Buff[1];
00008e  8840              LDRH     r0,[r0,#2]
000090  80c8              STRH     r0,[r1,#6]
;;;77     		break;
000092  e00d              B        |L1.176|
;;;78     	case COMM_WRITE_RAMP_UP_DUTY:
;;;79     		tMotor.structMotor.unRampUpDuty = pCOM_Buff[1];
000094  8840              LDRH     r0,[r0,#2]
000096  8108              STRH     r0,[r1,#8]
;;;80     		break;
000098  e00a              B        |L1.176|
;;;81     	case COMM_WRITE_TARGET_DUTY:
;;;82     		tMotor.structMotor.unTargetDuty = pCOM_Buff[1];
00009a  8840              LDRH     r0,[r0,#2]
00009c  8148              STRH     r0,[r1,#0xa]
;;;83     		break;
00009e  e007              B        |L1.176|
;;;84     	case COMM_WRITE_LOCATING_PERIOD:
;;;85     		tMotor.structMotor.unLocatingPeriod = pCOM_Buff[1];
0000a0  8840              LDRH     r0,[r0,#2]
0000a2  81c8              STRH     r0,[r1,#0xe]
;;;86     		break;
0000a4  e004              B        |L1.176|
;;;87     	case COMM_WRITE_RAMP_UP_PERIOD:
;;;88     		tMotor.structMotor.unRampUpPeriod = pCOM_Buff[1] + (pCOM_Buff[2] << 16);
0000a6  8842              LDRH     r2,[r0,#2]
0000a8  8880              LDRH     r0,[r0,#4]
0000aa  0400              LSLS     r0,r0,#16
0000ac  1810              ADDS     r0,r2,r0
0000ae  6148              STR      r0,[r1,#0x14]  ; tMotor
                  |L1.176|
;;;89     			break;
;;;90     	default:
;;;91     		return -1;
;;;92     	}
;;;93     	return 0;
0000b0  2000              MOVS     r0,#0
;;;94     }
0000b2  bd00              POP      {pc}
0000b4  2000              MOVS     r0,#0                 ;91
0000b6  43c0              MVNS     r0,r0                 ;91
0000b8  bd00              POP      {pc}
;;;95     
                          ENDP

                  COMM_Manager PROC
;;;96     // Communicating with mast via SPI
;;;97     void COMM_Manager(void)
0000ba  b570              PUSH     {r4-r6,lr}
;;;98     {
;;;99     	static uint16_t unCOM_Buff[COMM_FIFO_LENGTH];
;;;100    	static uint32_t unLastFrameCNT = 0;
;;;101    	static uint32_t unLastCheckTime = 0;
;;;102    	// All transactions are handled in interrupt
;;;103    	if (tMotor.structMotor.MSR.bNewComFrameReceived == TRUE)
0000bc  4926              LDR      r1,|L1.344|
0000be  8848              LDRH     r0,[r1,#2]  ; tMotor
;;;104    	{
;;;105    		memcpy(unCOM_Buff, unCOM_SPI_ReadData, COMM_FIFO_LENGTH);
0000c0  4c27              LDR      r4,|L1.352|
0000c2  06c0              LSLS     r0,r0,#27             ;103
0000c4  d528              BPL      |L1.280|
0000c6  8b20              LDRH     r0,[r4,#0x18]  ; unCOM_SPI_ReadData
0000c8  8220              STRH     r0,[r4,#0x10]
0000ca  8b62              LDRH     r2,[r4,#0x1a]  ; unCOM_SPI_ReadData
0000cc  8262              STRH     r2,[r4,#0x12]
;;;106    		tMotor.structMotor.MSR.bNewComFrameReceived = FALSE;
0000ce  884a              LDRH     r2,[r1,#2]  ; tMotor
0000d0  2310              MOVS     r3,#0x10
0000d2  439a              BICS     r2,r2,r3
0000d4  804a              STRH     r2,[r1,#2]
;;;107    		if (calCRC16((uint8_t *)unCOM_Buff, (IS_COMM_RD_CMD(unCOM_Buff[0]) ? ((COMM_RD_CMD_CNT - 1) << 1) : ((COMM_WR_CMD_CNT - 1) << 1))) ==
0000d6  18e5              ADDS     r5,r4,r3
0000d8  0bc0              LSRS     r0,r0,#15
0000da  d001              BEQ      |L1.224|
0000dc  2102              MOVS     r1,#2
0000de  e000              B        |L1.226|
                  |L1.224|
0000e0  2106              MOVS     r1,#6
                  |L1.226|
0000e2  481c              LDR      r0,|L1.340|
0000e4  3810              SUBS     r0,r0,#0x10
0000e6  f7fffffe          BL       calCRC16
0000ea  8829              LDRH     r1,[r5,#0]  ; unCOM_Buff
0000ec  0bca              LSRS     r2,r1,#15
0000ee  d001              BEQ      |L1.244|
;;;108    				(IS_COMM_RD_CMD(unCOM_Buff[0]) ? unCOM_Buff[COMM_RD_CMD_CNT - 1] : unCOM_Buff[COMM_WR_CMD_CNT - 1]))
0000f0  886a              LDRH     r2,[r5,#2]  ; unCOM_Buff
0000f2  e000              B        |L1.246|
                  |L1.244|
0000f4  88ea              LDRH     r2,[r5,#6]  ; unCOM_Buff
                  |L1.246|
0000f6  4290              CMP      r0,r2
0000f8  d10b              BNE      |L1.274|
;;;109    		{
;;;110    			unValidFrameCNT++;
0000fa  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
0000fc  1c40              ADDS     r0,r0,#1
;;;111    			// safe zone
;;;112    			if (IS_COMM_RD_CMD(unCOM_Buff[0]))
0000fe  60a0              STR      r0,[r4,#8]  ; unValidFrameCNT
000100  0bc8              LSRS     r0,r1,#15
;;;113    			{
;;;114    				nReadCommandHandler(unCOM_Buff);
;;;115    			}
;;;116    			else
;;;117    			{
;;;118    				nWriteCommandHandler(unCOM_Buff);
000102  4818              LDR      r0,|L1.356|
000104  d002              BEQ      |L1.268|
000106  f7fffffe          BL       nReadCommandHandler
00010a  e005              B        |L1.280|
                  |L1.268|
00010c  f7fffffe          BL       nWriteCommandHandler
000110  e002              B        |L1.280|
                  |L1.274|
;;;119    			}
;;;120    		}
;;;121    		else
;;;122    		{
;;;123    			unCOM_SPI_TransErrCNT++;
000112  68e0              LDR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
000114  1c40              ADDS     r0,r0,#1
000116  60e0              STR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
                  |L1.280|
;;;124    		}
;;;125    	}
;;;126    	
;;;127    	// Comm protection 1: If have NOT received any frame in 500ms, error
;;;128    	if ((uint32_t)(unSystemTick - unLastCheckTime) > 500)
000118  4813              LDR      r0,|L1.360|
00011a  6801              LDR      r1,[r0,#0]  ; unSystemTick
00011c  6862              LDR      r2,[r4,#4]  ; unLastCheckTime
00011e  1a89              SUBS     r1,r1,r2
000120  22ff              MOVS     r2,#0xff
000122  32f5              ADDS     r2,r2,#0xf5
000124  4291              CMP      r1,r2
000126  d90c              BLS      |L1.322|
;;;129    	{
;;;130    		unLastCheckTime = unSystemTick;
000128  6800              LDR      r0,[r0,#0]  ; unSystemTick
;;;131    		if ((uint32_t)(unValidFrameCNT - unLastFrameCNT) < 1)
00012a  6060              STR      r0,[r4,#4]  ; unLastCheckTime
00012c  6821              LDR      r1,[r4,#0]  ; unLastFrameCNT
00012e  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
000130  4288              CMP      r0,r1
000132  d104              BNE      |L1.318|
;;;132    		{
;;;133    			BLDC_stopMotor();
000134  f7fffffe          BL       BLDC_stopMotor
;;;134    			setError(ERR_COMMUNICATION_FAIL);
000138  2002              MOVS     r0,#2
00013a  f7fffffe          BL       setError
                  |L1.318|
;;;135    		}
;;;136    		unLastFrameCNT = unValidFrameCNT;
00013e  68a0              LDR      r0,[r4,#8]  ; unValidFrameCNT
000140  6020              STR      r0,[r4,#0]  ; unLastFrameCNT
                  |L1.322|
;;;137    	}
;;;138    	// Comm protection 2: If received error frame exceed some threshold, error
;;;139    	if (unCOM_SPI_TransErrCNT > COM_SPI_TRANS_ERR_THRESHOLD)
000142  68e0              LDR      r0,[r4,#0xc]  ; unCOM_SPI_TransErrCNT
000144  2806              CMP      r0,#6
000146  d904              BLS      |L1.338|
;;;140    	{
;;;141    		BLDC_stopMotor();
000148  f7fffffe          BL       BLDC_stopMotor
;;;142    		setError(ERR_COMMUNICATION_FAIL);
00014c  2002              MOVS     r0,#2
00014e  f7fffffe          BL       setError
                  |L1.338|
;;;143    	}
;;;144    }
000152  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.340|
                          DCD      ||.data||+0x20
                  |L1.344|
                          DCD      tMotor
                  |L1.348|
                          DCD      0x40030000
                  |L1.352|
                          DCD      ||.data||
                  |L1.356|
                          DCD      ||.data||+0x10
                  |L1.360|
                          DCD      unSystemTick

                          AREA ||.data||, DATA, ALIGN=2

                  unLastFrameCNT
                          DCD      0x00000000
                  unLastCheckTime
                          DCD      0x00000000
                  unValidFrameCNT
                          DCD      0x00000000
                  unCOM_SPI_TransErrCNT
                          DCD      0x00000000
                  unCOM_Buff
                          %        8
                  unCOM_SPI_ReadData
                          %        8
                  CRC_TABLE16
000020  00008005          DCW      0x0000,0x8005
000024  800f000a          DCW      0x800f,0x000a
000028  801b001e          DCW      0x801b,0x001e
00002c  00148011          DCW      0x0014,0x8011
000030  80330036          DCW      0x8033,0x0036
000034  003c8039          DCW      0x003c,0x8039
000038  0028802d          DCW      0x0028,0x802d
00003c  80270022          DCW      0x8027,0x0022
000040  80630066          DCW      0x8063,0x0066
000044  006c8069          DCW      0x006c,0x8069
000048  0078807d          DCW      0x0078,0x807d
00004c  80770072          DCW      0x8077,0x0072
000050  00508055          DCW      0x0050,0x8055
000054  805f005a          DCW      0x805f,0x005a
000058  804b004e          DCW      0x804b,0x004e
00005c  00448041          DCW      0x0044,0x8041
000060  80c300c6          DCW      0x80c3,0x00c6
000064  00cc80c9          DCW      0x00cc,0x80c9
000068  00d880dd          DCW      0x00d8,0x80dd
00006c  80d700d2          DCW      0x80d7,0x00d2
000070  00f080f5          DCW      0x00f0,0x80f5
000074  80ff00fa          DCW      0x80ff,0x00fa
000078  80eb00ee          DCW      0x80eb,0x00ee
00007c  00e480e1          DCW      0x00e4,0x80e1
000080  00a080a5          DCW      0x00a0,0x80a5
000084  80af00aa          DCW      0x80af,0x00aa
000088  80bb00be          DCW      0x80bb,0x00be
00008c  00b480b1          DCW      0x00b4,0x80b1
000090  80930096          DCW      0x8093,0x0096
000094  009c8099          DCW      0x009c,0x8099
000098  0088808d          DCW      0x0088,0x808d
00009c  80870082          DCW      0x8087,0x0082
0000a0  81830186          DCW      0x8183,0x0186
0000a4  018c8189          DCW      0x018c,0x8189
0000a8  0198819d          DCW      0x0198,0x819d
0000ac  81970192          DCW      0x8197,0x0192
0000b0  01b081b5          DCW      0x01b0,0x81b5
0000b4  81bf01ba          DCW      0x81bf,0x01ba
0000b8  81ab01ae          DCW      0x81ab,0x01ae
0000bc  01a481a1          DCW      0x01a4,0x81a1
0000c0  01e081e5          DCW      0x01e0,0x81e5
0000c4  81ef01ea          DCW      0x81ef,0x01ea
0000c8  81fb01fe          DCW      0x81fb,0x01fe
0000cc  01f481f1          DCW      0x01f4,0x81f1
0000d0  81d301d6          DCW      0x81d3,0x01d6
0000d4  01dc81d9          DCW      0x01dc,0x81d9
0000d8  01c881cd          DCW      0x01c8,0x81cd
0000dc  81c701c2          DCW      0x81c7,0x01c2
0000e0  01408145          DCW      0x0140,0x8145
0000e4  814f014a          DCW      0x814f,0x014a
0000e8  815b015e          DCW      0x815b,0x015e
0000ec  01548151          DCW      0x0154,0x8151
0000f0  81730176          DCW      0x8173,0x0176
0000f4  017c8179          DCW      0x017c,0x8179
0000f8  0168816d          DCW      0x0168,0x816d
0000fc  81670162          DCW      0x8167,0x0162
000100  81230126          DCW      0x8123,0x0126
000104  012c8129          DCW      0x012c,0x8129
000108  0138813d          DCW      0x0138,0x813d
00010c  81370132          DCW      0x8137,0x0132
000110  01108115          DCW      0x0110,0x8115
000114  811f011a          DCW      0x811f,0x011a
000118  810b010e          DCW      0x810b,0x010e
00011c  01048101          DCW      0x0104,0x8101
000120  83030306          DCW      0x8303,0x0306
000124  030c8309          DCW      0x030c,0x8309
000128  0318831d          DCW      0x0318,0x831d
00012c  83170312          DCW      0x8317,0x0312
000130  03308335          DCW      0x0330,0x8335
000134  833f033a          DCW      0x833f,0x033a
000138  832b032e          DCW      0x832b,0x032e
00013c  03248321          DCW      0x0324,0x8321
000140  03608365          DCW      0x0360,0x8365
000144  836f036a          DCW      0x836f,0x036a
000148  837b037e          DCW      0x837b,0x037e
00014c  03748371          DCW      0x0374,0x8371
000150  83530356          DCW      0x8353,0x0356
000154  035c8359          DCW      0x035c,0x8359
000158  0348834d          DCW      0x0348,0x834d
00015c  83470342          DCW      0x8347,0x0342
000160  03c083c5          DCW      0x03c0,0x83c5
000164  83cf03ca          DCW      0x83cf,0x03ca
000168  83db03de          DCW      0x83db,0x03de
00016c  03d483d1          DCW      0x03d4,0x83d1
000170  83f303f6          DCW      0x83f3,0x03f6
000174  03fc83f9          DCW      0x03fc,0x83f9
000178  03e883ed          DCW      0x03e8,0x83ed
00017c  83e703e2          DCW      0x83e7,0x03e2
000180  83a303a6          DCW      0x83a3,0x03a6
000184  03ac83a9          DCW      0x03ac,0x83a9
000188  03b883bd          DCW      0x03b8,0x83bd
00018c  83b703b2          DCW      0x83b7,0x03b2
000190  03908395          DCW      0x0390,0x8395
000194  839f039a          DCW      0x839f,0x039a
000198  838b038e          DCW      0x838b,0x038e
00019c  03848381          DCW      0x0384,0x8381
0001a0  02808285          DCW      0x0280,0x8285
0001a4  828f028a          DCW      0x828f,0x028a
0001a8  829b029e          DCW      0x829b,0x029e
0001ac  02948291          DCW      0x0294,0x8291
0001b0  82b302b6          DCW      0x82b3,0x02b6
0001b4  02bc82b9          DCW      0x02bc,0x82b9
0001b8  02a882ad          DCW      0x02a8,0x82ad
0001bc  82a702a2          DCW      0x82a7,0x02a2
0001c0  82e302e6          DCW      0x82e3,0x02e6
0001c4  02ec82e9          DCW      0x02ec,0x82e9
0001c8  02f882fd          DCW      0x02f8,0x82fd
0001cc  82f702f2          DCW      0x82f7,0x02f2
0001d0  02d082d5          DCW      0x02d0,0x82d5
0001d4  82df02da          DCW      0x82df,0x02da
0001d8  82cb02ce          DCW      0x82cb,0x02ce
0001dc  02c482c1          DCW      0x02c4,0x82c1
0001e0  82430246          DCW      0x8243,0x0246
0001e4  024c8249          DCW      0x024c,0x8249
0001e8  0258825d          DCW      0x0258,0x825d
0001ec  82570252          DCW      0x8257,0x0252
0001f0  02708275          DCW      0x0270,0x8275
0001f4  827f027a          DCW      0x827f,0x027a
0001f8  826b026e          DCW      0x826b,0x026e
0001fc  02648261          DCW      0x0264,0x8261
000200  02208225          DCW      0x0220,0x8225
000204  822f022a          DCW      0x822f,0x022a
000208  823b023e          DCW      0x823b,0x023e
00020c  02348231          DCW      0x0234,0x8231
000210  82130216          DCW      0x8213,0x0216
000214  021c8219          DCW      0x021c,0x8219
000218  0208820d          DCW      0x0208,0x820d
00021c  82070202          DCW      0x8207,0x0202

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  unCOM_SPI_TransCNT
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.data||
                  unRegisterValue
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  tRegister
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  FlagRegisterNeedWrite
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L20.16|
00000e  461d              MOV      r5,r3
                  |L20.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "User\\Communication.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_6d0c631e____REV16|
#line 118 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_Communication_c_6d0c631e____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_Communication_c_6d0c631e____REVSH|
#line 132
|__asm___15_Communication_c_6d0c631e____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
