; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\adc.crf C:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver\adc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;36       */
;;;37     void ADC_Open(ADC_T *adc,
000000  4831              LDR      r0,|L1.200|
;;;38                   uint32_t u32InputMode,
;;;39                   uint32_t u32OpMode,
;;;40                   uint32_t u32ChMask)
;;;41     {
;;;42     
;;;43         ADC->ADCR = 0;  // A clean start.
000002  2100              MOVS     r1,#0
000004  6201              STR      r1,[r0,#0x20]
;;;44         ADC->ADCHER  = (ADC->ADCHER & ~ADC_ADCHER_CHEN_Msk) | u32ChMask;
000006  6a41              LDR      r1,[r0,#0x24]
000008  0a09              LSRS     r1,r1,#8
00000a  0209              LSLS     r1,r1,#8
00000c  4319              ORRS     r1,r1,r3
00000e  6241              STR      r1,[r0,#0x24]
;;;45         return;
;;;46     }
000010  4770              BX       lr
;;;47     
                          ENDP

                  ADC_Close PROC
;;;52       */
;;;53     void ADC_Close(ADC_T *adc)
000012  2005              MOVS     r0,#5
;;;54     {
;;;55         SYS->IPRSTC2 |= SYS_IPRSTC2_ADC_RST_Msk;
000014  0700              LSLS     r0,r0,#28
000016  68c2              LDR      r2,[r0,#0xc]
000018  2101              MOVS     r1,#1
00001a  0709              LSLS     r1,r1,#28
00001c  430a              ORRS     r2,r2,r1
00001e  60c2              STR      r2,[r0,#0xc]
;;;56         SYS->IPRSTC2 &= ~SYS_IPRSTC2_ADC_RST_Msk;
000020  68c2              LDR      r2,[r0,#0xc]
000022  438a              BICS     r2,r2,r1
000024  60c2              STR      r2,[r0,#0xc]
;;;57         return;
;;;58     
;;;59     }
000026  4770              BX       lr
;;;60     
                          ENDP

                  ADC_EnableHWTrigger PROC
;;;74       */
;;;75     void ADC_EnableHWTrigger(ADC_T *adc,
000028  b530              PUSH     {r4,r5,lr}
;;;76                              uint32_t u32Source,
;;;77                              uint32_t u32Param)
;;;78     {
;;;79         ADC->ADCR &= ~(ADC_TRIGGER_BY_PWM | ADC_RISING_EDGE_TRIGGER | ADC_ADCR_TRGEN_Msk);
00002a  4827              LDR      r0,|L1.200|
00002c  6a03              LDR      r3,[r0,#0x20]
00002e  24ff              MOVS     r4,#0xff
000030  3471              ADDS     r4,r4,#0x71
000032  43a3              BICS     r3,r3,r4
000034  6203              STR      r3,[r0,#0x20]
;;;80         if(u32Source == ADC_TRIGGER_BY_EXT_PIN) {
;;;81             ADC->ADCR |= u32Source | u32Param | ADC_ADCR_TRGEN_Msk;
000036  1583              ASRS     r3,r0,#22
000038  2900              CMP      r1,#0                 ;80
00003a  d00b              BEQ      |L1.84|
;;;82         } else {
;;;83             ADC->ADTDCR = (ADC->ADTDCR & ~ADC_ADTDCR_PTDT_Msk) | u32Param;
00003c  4c22              LDR      r4,|L1.200|
00003e  3440              ADDS     r4,r4,#0x40
000040  6865              LDR      r5,[r4,#4]
000042  0a2d              LSRS     r5,r5,#8
000044  022d              LSLS     r5,r5,#8
000046  4315              ORRS     r5,r5,r2
000048  6065              STR      r5,[r4,#4]
;;;84             ADC->ADCR |= u32Source | ADC_ADCR_TRGEN_Msk;
00004a  6a02              LDR      r2,[r0,#0x20]
00004c  4319              ORRS     r1,r1,r3
00004e  430a              ORRS     r2,r2,r1
000050  6202              STR      r2,[r0,#0x20]
;;;85         }
;;;86         return;
;;;87     }
000052  bd30              POP      {r4,r5,pc}
                  |L1.84|
000054  6a01              LDR      r1,[r0,#0x20]         ;81
000056  431a              ORRS     r2,r2,r3              ;81
000058  4311              ORRS     r1,r1,r2              ;81
00005a  6201              STR      r1,[r0,#0x20]         ;81
00005c  bd30              POP      {r4,r5,pc}
;;;88     
                          ENDP

                  ADC_DisableHWTrigger PROC
;;;93       */
;;;94     void ADC_DisableHWTrigger(ADC_T *adc)
00005e  481a              LDR      r0,|L1.200|
;;;95     {
;;;96         ADC->ADCR &= ~(ADC_TRIGGER_BY_PWM | ADC_RISING_EDGE_TRIGGER | ADC_ADCR_TRGEN_Msk);
000060  6a01              LDR      r1,[r0,#0x20]
000062  22ff              MOVS     r2,#0xff
000064  3271              ADDS     r2,r2,#0x71
000066  4391              BICS     r1,r1,r2
000068  6201              STR      r1,[r0,#0x20]
;;;97         return;
;;;98     }
00006a  4770              BX       lr
;;;99     
                          ENDP

                  ADC_SetExtraSampleTime PROC
;;;118      */
;;;119    void ADC_SetExtraSampleTime(ADC_T *adc,
00006c  4816              LDR      r0,|L1.200|
;;;120                                uint32_t u32ChNum,
;;;121                                uint32_t u32SampleTime)
;;;122    {
;;;123        ADC->ADSAMP = (ADC->ADSAMP & ~ADC_ADSAMP_SAMPCNT_Msk) | u32SampleTime;
00006e  3040              ADDS     r0,r0,#0x40
000070  6881              LDR      r1,[r0,#8]
000072  0909              LSRS     r1,r1,#4
000074  0109              LSLS     r1,r1,#4
000076  4311              ORRS     r1,r1,r2
000078  6081              STR      r1,[r0,#8]
;;;124    }
00007a  4770              BX       lr
;;;125    
                          ENDP

                  ADC_EnableInt PROC
;;;136      */
;;;137    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
00007c  07cb              LSLS     r3,r1,#31
;;;138    {
;;;139        if(u32Mask & ADC_ADF_INT)
;;;140            ADC->ADCR |= ADC_ADCR_ADIE_Msk;
00007e  4812              LDR      r0,|L1.200|
000080  2202              MOVS     r2,#2
000082  2b00              CMP      r3,#0                 ;139
000084  d002              BEQ      |L1.140|
000086  6a03              LDR      r3,[r0,#0x20]
000088  4313              ORRS     r3,r3,r2
00008a  6203              STR      r3,[r0,#0x20]
                  |L1.140|
;;;141        if(u32Mask & ADC_CMP0_INT)
00008c  078b              LSLS     r3,r1,#30
00008e  d502              BPL      |L1.150|
;;;142            ADC->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000090  6a83              LDR      r3,[r0,#0x28]
000092  4313              ORRS     r3,r3,r2
000094  6283              STR      r3,[r0,#0x28]
                  |L1.150|
;;;143        if(u32Mask & ADC_CMP1_INT)
000096  0749              LSLS     r1,r1,#29
000098  d502              BPL      |L1.160|
;;;144            ADC->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00009a  6ac1              LDR      r1,[r0,#0x2c]
00009c  4311              ORRS     r1,r1,r2
00009e  62c1              STR      r1,[r0,#0x2c]
                  |L1.160|
;;;145    
;;;146        return;
;;;147    }
0000a0  4770              BX       lr
;;;148    
                          ENDP

                  ADC_DisableInt PROC
;;;159      */
;;;160    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
0000a2  07cb              LSLS     r3,r1,#31
;;;161    {
;;;162        if(u32Mask & ADC_ADF_INT)
;;;163            ADC->ADCR &= ~ADC_ADCR_ADIE_Msk;
0000a4  4808              LDR      r0,|L1.200|
0000a6  2202              MOVS     r2,#2
0000a8  2b00              CMP      r3,#0                 ;162
0000aa  d002              BEQ      |L1.178|
0000ac  6a03              LDR      r3,[r0,#0x20]
0000ae  4393              BICS     r3,r3,r2
0000b0  6203              STR      r3,[r0,#0x20]
                  |L1.178|
;;;164        if(u32Mask & ADC_CMP0_INT)
0000b2  078b              LSLS     r3,r1,#30
0000b4  d502              BPL      |L1.188|
;;;165            ADC->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
0000b6  6a83              LDR      r3,[r0,#0x28]
0000b8  4393              BICS     r3,r3,r2
0000ba  6283              STR      r3,[r0,#0x28]
                  |L1.188|
;;;166        if(u32Mask & ADC_CMP1_INT)
0000bc  0749              LSLS     r1,r1,#29
0000be  d502              BPL      |L1.198|
;;;167            ADC->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
0000c0  6ac1              LDR      r1,[r0,#0x2c]
0000c2  4391              BICS     r1,r1,r2
0000c4  62c1              STR      r1,[r0,#0x2c]
                  |L1.198|
;;;168    
;;;169        return;
;;;170    }
0000c6  4770              BX       lr
;;;171    
                          ENDP

                  |L1.200|
                          DCD      0x400e0000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.1.0\\Device\\Mini51\\Driver\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 464 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 479
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
