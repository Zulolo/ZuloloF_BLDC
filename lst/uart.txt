; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\uart.crf D:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;35      */
;;;36     void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;37     {
000002  d507              BPL      |L1.20|
;;;38     
;;;39         if(u32InterruptFlag & UART_ISR_RLS_INT_Msk) { /* clear Receive Line Status Interrupt */
;;;40             uart->FSR |= UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_FEF_Msk;
000004  6982              LDR      r2,[r0,#0x18]
000006  2360              MOVS     r3,#0x60
000008  431a              ORRS     r2,r2,r3
00000a  6182              STR      r2,[r0,#0x18]
;;;41             uart->FSR |= UART_FSR_RS485_ADD_DETF_Msk;
00000c  6982              LDR      r2,[r0,#0x18]
00000e  2308              MOVS     r3,#8
000010  431a              ORRS     r2,r2,r3
000012  6182              STR      r2,[r0,#0x18]
                  |L1.20|
;;;42         }
;;;43     
;;;44         if(u32InterruptFlag & UART_ISR_MODEM_INT_Msk)  /* clear Modem Interrupt */
000014  050a              LSLS     r2,r1,#20
000016  d503              BPL      |L1.32|
;;;45             uart->MSR |= UART_MSR_DCTSF_Msk;
000018  6942              LDR      r2,[r0,#0x14]
00001a  2301              MOVS     r3,#1
00001c  431a              ORRS     r2,r2,r3
00001e  6142              STR      r2,[r0,#0x14]
                  |L1.32|
;;;46     
;;;47         if(u32InterruptFlag & UART_ISR_BUF_ERR_INT_Msk) { /* clear Buffer Error Interrupt */
000020  048a              LSLS     r2,r1,#18
000022  d503              BPL      |L1.44|
;;;48             uart->FSR |= UART_FSR_RX_OVER_IF_Msk | UART_FSR_TX_OVER_IF_Msk;
000024  6982              LDR      r2,[r0,#0x18]
000026  4b8b              LDR      r3,|L1.596|
000028  431a              ORRS     r2,r2,r3
00002a  6182              STR      r2,[r0,#0x18]
                  |L1.44|
;;;49         }
;;;50     
;;;51         if(u32InterruptFlag & UART_ISR_TOUT_INT_Msk)  /* clear Modem Interrupt */
00002c  04c9              LSLS     r1,r1,#19
00002e  d503              BPL      |L1.56|
;;;52             uart->ISR |= UART_ISR_TOUT_IF_Msk;
000030  69c1              LDR      r1,[r0,#0x1c]
000032  2210              MOVS     r2,#0x10
000034  4311              ORRS     r1,r1,r2
000036  61c1              STR      r1,[r0,#0x1c]
                  |L1.56|
;;;53     
;;;54     }
000038  4770              BX       lr
;;;55     
                          ENDP

                  UART_Close PROC
;;;63      */
;;;64     void UART_Close(UART_T* uart)
00003a  2100              MOVS     r1,#0
;;;65     {
;;;66         uart->IER = 0;
00003c  6041              STR      r1,[r0,#4]
;;;67     }
00003e  4770              BX       lr
;;;68     
                          ENDP

                  UART_DisableFlowCtrl PROC
;;;76      */
;;;77     void UART_DisableFlowCtrl(UART_T* uart)
000040  6841              LDR      r1,[r0,#4]
;;;78     {
;;;79         uart->IER &= ~(UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk);
000042  2203              MOVS     r2,#3
000044  0312              LSLS     r2,r2,#12
000046  4391              BICS     r1,r1,r2
000048  6041              STR      r1,[r0,#4]
;;;80     }
00004a  4770              BX       lr
;;;81     
                          ENDP

                  UART_DisableInt PROC
;;;98      */
;;;99     void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag )
00004c  6842              LDR      r2,[r0,#4]
;;;100    {
;;;101        uart->IER &= ~ u32InterruptFlag;
00004e  438a              BICS     r2,r2,r1
000050  6042              STR      r2,[r0,#4]
;;;102    }
000052  4770              BX       lr
;;;103    
                          ENDP

                  UART_EnableFlowCtrl PROC
;;;112     */
;;;113    void UART_EnableFlowCtrl(UART_T* uart )
000054  6901              LDR      r1,[r0,#0x10]
;;;114    {
;;;115        uart->MCR |= UART_MCR_LEV_RTS_Msk;
000056  2201              MOVS     r2,#1
000058  0252              LSLS     r2,r2,#9
00005a  4311              ORRS     r1,r1,r2
00005c  6101              STR      r1,[r0,#0x10]
;;;116        uart->MCR &= ~UART_MCR_RTS_Msk;
00005e  6901              LDR      r1,[r0,#0x10]
000060  2202              MOVS     r2,#2
000062  4391              BICS     r1,r1,r2
000064  6101              STR      r1,[r0,#0x10]
;;;117        uart->MSR |= UART_MSR_LEV_CTS_Msk;
000066  6941              LDR      r1,[r0,#0x14]
000068  01d2              LSLS     r2,r2,#7
00006a  4311              ORRS     r1,r1,r2
00006c  6141              STR      r1,[r0,#0x14]
;;;118        uart->IER |= UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk;
00006e  6841              LDR      r1,[r0,#4]
000070  2203              MOVS     r2,#3
000072  0312              LSLS     r2,r2,#12
000074  4311              ORRS     r1,r1,r2
000076  6041              STR      r1,[r0,#4]
;;;119    }
000078  4770              BX       lr
;;;120    
                          ENDP

                  UART_EnableInt PROC
;;;137     */
;;;138    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag )
00007a  6842              LDR      r2,[r0,#4]
;;;139    {
;;;140        uart->IER |= u32InterruptFlag;
00007c  430a              ORRS     r2,r2,r1
00007e  6042              STR      r2,[r0,#4]
;;;141    }
000080  4770              BX       lr
;;;142    
                          ENDP

                  UART_Open PROC
;;;151     */
;;;152    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000082  b57f              PUSH     {r0-r6,lr}
;;;153    {
000084  4604              MOV      r4,r0
;;;154        uint8_t u8UartClkSrcSel;
;;;155        uint32_t u32ClkDiv = 0;
;;;156        uint32_t u32Clk = 0;
;;;157        uint32_t u32ClkTbl[4] = {__XTAL, 0, __IRC22M, __IRC22M};
000086  4874              LDR      r0,|L1.600|
000088  460d              MOV      r5,r1                 ;153
00008a  c80f              LDM      r0,{r0-r3}
00008c  466e              MOV      r6,sp
00008e  c60f              STM      r6!,{r0-r3}
;;;158        uint32_t u32Baud_Div;
;;;159        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000090  4972              LDR      r1,|L1.604|
000092  6948              LDR      r0,[r1,#0x14]
;;;160    
;;;161        u32ClkDiv = ( (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos );
;;;162    
;;;163        uart->FUN_SEL = UART_FUNC_SEL_UART;
;;;164        uart->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;165        uart->FCR = UART_FCR_RFITL_1BYTE | UART_FCR_RTS_TRI_LEV_1BYTE;
;;;166    
;;;167        u32Clk = u32ClkTbl[u8UartClkSrcSel]/(u32ClkDiv + 1);
;;;168    
;;;169        if(u32baudrate != 0) {
;;;170            u32Baud_Div = UART_BAUD_MODE2_DIVIDER(u32Clk, u32baudrate);
;;;171    
;;;172            if(u32Baud_Div > 0xFFFF)
;;;173                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(u32Clk, u32baudrate));
;;;174            else
;;;175                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;176        }
;;;177    
;;;178    }
000094  2203              MOVS     r2,#3
000096  0180              LSLS     r0,r0,#6
000098  6989              LDR      r1,[r1,#0x18]         ;161
00009a  0f80              LSRS     r0,r0,#30
00009c  0509              LSLS     r1,r1,#20
00009e  0f09              LSRS     r1,r1,#28
0000a0  2300              MOVS     r3,#0                 ;163
0000a2  6323              STR      r3,[r4,#0x30]         ;163
0000a4  60e2              STR      r2,[r4,#0xc]          ;164
0000a6  60a3              STR      r3,[r4,#8]            ;165
0000a8  0080              LSLS     r0,r0,#2              ;167
0000aa  466a              MOV      r2,sp                 ;167
0000ac  5810              LDR      r0,[r2,r0]            ;167
0000ae  1c49              ADDS     r1,r1,#1              ;167
0000b0  f7fffffe          BL       __aeabi_uidivmod
0000b4  4606              MOV      r6,r0                 ;167
0000b6  2d00              CMP      r5,#0                 ;169
0000b8  d014              BEQ      |L1.228|
0000ba  0868              LSRS     r0,r5,#1              ;170
0000bc  1980              ADDS     r0,r0,r6              ;170
0000be  4629              MOV      r1,r5                 ;170
0000c0  f7fffffe          BL       __aeabi_uidivmod
0000c4  4966              LDR      r1,|L1.608|
0000c6  1e80              SUBS     r0,r0,#2              ;172
0000c8  4288              CMP      r0,r1                 ;172
0000ca  d907              BLS      |L1.220|
0000cc  00e8              LSLS     r0,r5,#3              ;173
0000ce  1980              ADDS     r0,r0,r6              ;173
0000d0  4629              MOV      r1,r5                 ;173
0000d2  f7fffffe          BL       __aeabi_uidivmod
0000d6  0900              LSRS     r0,r0,#4              ;173
0000d8  1e80              SUBS     r0,r0,#2              ;173
0000da  e002              B        |L1.226|
                  |L1.220|
0000dc  2103              MOVS     r1,#3                 ;175
0000de  0709              LSLS     r1,r1,#28             ;175
0000e0  4308              ORRS     r0,r0,r1              ;175
                  |L1.226|
0000e2  6260              STR      r0,[r4,#0x24]         ;175
                  |L1.228|
0000e4  bd7f              POP      {r0-r6,pc}
;;;179    
                          ENDP

                  UART_Read PROC
;;;190     */
;;;191    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
0000e6  b570              PUSH     {r4-r6,lr}
;;;192    {
0000e8  4604              MOV      r4,r0
;;;193        uint32_t  u32Count, u32delayno;
;;;194    
;;;195        for(u32Count=0; u32Count < u32ReadBytes; u32Count++) {
0000ea  2000              MOVS     r0,#0
;;;196            u32delayno = 0;
;;;197    
;;;198            while(uart->FSR & UART_FSR_RX_EMPTY_Msk) { /* Check RX empty => failed */
;;;199                u32delayno++;
;;;200                if( u32delayno >= 0x40000000 )
0000ec  2501              MOVS     r5,#1
0000ee  07ad              LSLS     r5,r5,#30
0000f0  e00c              B        |L1.268|
                  |L1.242|
0000f2  2300              MOVS     r3,#0                 ;196
0000f4  e004              B        |L1.256|
                  |L1.246|
0000f6  1c5b              ADDS     r3,r3,#1              ;198
0000f8  42ab              CMP      r3,r5
0000fa  d301              BCC      |L1.256|
;;;201                    return FALSE;
0000fc  2000              MOVS     r0,#0
;;;202            }
;;;203            pu8RxBuf[u32Count] = uart->RBR;    /* Get Data from UART RX  */
;;;204        }
;;;205    
;;;206        return u32Count;
;;;207    
;;;208    }
0000fe  bd70              POP      {r4-r6,pc}
                  |L1.256|
000100  69a6              LDR      r6,[r4,#0x18]         ;198
000102  0476              LSLS     r6,r6,#17             ;198
000104  d4f7              BMI      |L1.246|
000106  6823              LDR      r3,[r4,#0]            ;203
000108  540b              STRB     r3,[r1,r0]            ;203
00010a  1c40              ADDS     r0,r0,#1              ;203
                  |L1.268|
00010c  4290              CMP      r0,r2                 ;195
00010e  d3f0              BCC      |L1.242|
000110  bd70              POP      {r4-r6,pc}
;;;209    
                          ENDP

                  UART_SetLine_Config PROC
;;;222     */
;;;223    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000112  b5ff              PUSH     {r0-r7,lr}
;;;224    {
;;;225        uint8_t u8UartClkSrcSel;
;;;226        uint32_t u32ClkDiv = 0;
;;;227        uint32_t u32Clk = 0;
;;;228        uint32_t u32ClkTbl[4] = {__XTAL, 0, __IRC22M, __IRC22M};
000114  4b50              LDR      r3,|L1.600|
000116  4616              MOV      r6,r2                 ;224
000118  460c              MOV      r4,r1                 ;224
00011a  4605              MOV      r5,r0                 ;224
00011c  3310              ADDS     r3,r3,#0x10
00011e  cb0f              LDM      r3,{r0-r3}
000120  b085              SUB      sp,sp,#0x14           ;224
000122  466f              MOV      r7,sp
000124  c70f              STM      r7!,{r0-r3}
;;;229        uint32_t u32Baud_Div = 0;
;;;230        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000126  494d              LDR      r1,|L1.604|
000128  6948              LDR      r0,[r1,#0x14]
;;;231    
;;;232        u32ClkDiv = ( (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos );
00012a  6989              LDR      r1,[r1,#0x18]
;;;233    
;;;234        u32Clk = u32ClkTbl[u8UartClkSrcSel]/(u32ClkDiv + 1);
;;;235    
;;;236        if(u32baudrate != 0) {
;;;237            u32Baud_Div = UART_BAUD_MODE2_DIVIDER(u32Clk, u32baudrate);
;;;238    
;;;239            if(u32Baud_Div > 0xFFFF)
;;;240                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(u32Clk, u32baudrate));
;;;241            else
;;;242                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;243        }
;;;244    
;;;245        uart->LCR = u32data_width | u32parity | u32stop_bits;
;;;246    }
00012c  0180              LSLS     r0,r0,#6
00012e  0f80              LSRS     r0,r0,#30
000130  0509              LSLS     r1,r1,#20
000132  0f09              LSRS     r1,r1,#28
000134  0080              LSLS     r0,r0,#2              ;234
000136  466a              MOV      r2,sp                 ;234
000138  5810              LDR      r0,[r2,r0]            ;234
00013a  1c49              ADDS     r1,r1,#1              ;234
00013c  f7fffffe          BL       __aeabi_uidivmod
000140  4607              MOV      r7,r0                 ;234
000142  2c00              CMP      r4,#0                 ;236
000144  d014              BEQ      |L1.368|
000146  0860              LSRS     r0,r4,#1              ;237
000148  19c0              ADDS     r0,r0,r7              ;237
00014a  4621              MOV      r1,r4                 ;237
00014c  f7fffffe          BL       __aeabi_uidivmod
000150  4943              LDR      r1,|L1.608|
000152  1e80              SUBS     r0,r0,#2              ;239
000154  4288              CMP      r0,r1                 ;239
000156  d907              BLS      |L1.360|
000158  00e0              LSLS     r0,r4,#3              ;240
00015a  19c0              ADDS     r0,r0,r7              ;240
00015c  4621              MOV      r1,r4                 ;240
00015e  f7fffffe          BL       __aeabi_uidivmod
000162  0900              LSRS     r0,r0,#4              ;240
000164  1e80              SUBS     r0,r0,#2              ;240
000166  e002              B        |L1.366|
                  |L1.360|
000168  2103              MOVS     r1,#3                 ;242
00016a  0709              LSLS     r1,r1,#28             ;242
00016c  4308              ORRS     r0,r0,r1              ;242
                  |L1.366|
00016e  6268              STR      r0,[r5,#0x24]         ;240
                  |L1.368|
000170  9808              LDR      r0,[sp,#0x20]         ;245
000172  4306              ORRS     r6,r6,r0              ;245
000174  980e              LDR      r0,[sp,#0x38]         ;245
000176  4306              ORRS     r6,r6,r0              ;245
000178  60ee              STR      r6,[r5,#0xc]          ;245
00017a  b009              ADD      sp,sp,#0x24
00017c  bdf0              POP      {r4-r7,pc}
;;;247    
                          ENDP

                  UART_SetTimeoutCnt PROC
;;;256     */
;;;257    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
00017e  6a02              LDR      r2,[r0,#0x20]
;;;258    {
;;;259        uart->TOR = (uart->TOR & ~UART_TOR_TOIC_Msk)| (u32TOC);
000180  0a12              LSRS     r2,r2,#8
000182  0212              LSLS     r2,r2,#8
000184  430a              ORRS     r2,r2,r1
000186  6202              STR      r2,[r0,#0x20]
;;;260        uart->IER |= UART_IER_TIME_OUT_EN_Msk;
000188  6841              LDR      r1,[r0,#4]
00018a  2201              MOVS     r2,#1
00018c  02d2              LSLS     r2,r2,#11
00018e  4311              ORRS     r1,r1,r2
000190  6041              STR      r1,[r0,#4]
;;;261    }
000192  4770              BX       lr
;;;262    
                          ENDP

                  UART_SelectIrDAMode PROC
;;;272     */
;;;273    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000194  b5f8              PUSH     {r3-r7,lr}
;;;274    {
000196  4616              MOV      r6,r2
;;;275        uint8_t u8UartClkSrcSel = 0;
;;;276        uint32_t u32ClkDiv = 0;
;;;277        uint32_t u32Clk = 0;
;;;278        uint32_t u32Baud_Div = 0;
;;;279    
;;;280        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000198  4a30              LDR      r2,|L1.604|
00019a  460d              MOV      r5,r1                 ;274
00019c  4604              MOV      r4,r0                 ;274
00019e  6951              LDR      r1,[r2,#0x14]
0001a0  2000              MOVS     r0,#0                 ;277
;;;281    
;;;282        u32ClkDiv = ( (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos );
;;;283    
;;;284        if(u8UartClkSrcSel == 0)
;;;285            u32Clk = __XTAL;
;;;286        else if(u8UartClkSrcSel >= 2)
;;;287            u32Clk = __IRC22M;
;;;288    
;;;289        u32Clk = u32Clk/(u32ClkDiv + 1);
;;;290    
;;;291        if(u32Buadrate != 0) {
;;;292            u32Baud_Div = UART_BAUD_MODE2_DIVIDER(u32Clk, u32Buadrate);
;;;293    
;;;294            if(u32Baud_Div > 0xFFFF)
;;;295                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(u32Clk, u32Buadrate));
;;;296            else
;;;297                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;298        }
;;;299    
;;;300        uart->IRCR    &=  ~UART_IRCR_INV_TX_Msk;
;;;301        uart->IRCR |=     UART_IRCR_INV_RX_Msk;
;;;302        uart->IRCR    = u32Direction ? uart->IRCR | UART_IRCR_TX_SELECT_Msk : uart->IRCR &~ UART_IRCR_TX_SELECT_Msk;
;;;303        uart->FUN_SEL = (0x2 << UART_FUN_SEL_FUN_SEL_Pos);
;;;304    }
0001a2  0189              LSLS     r1,r1,#6
0001a4  6992              LDR      r2,[r2,#0x18]         ;282
0001a6  0f89              LSRS     r1,r1,#30
0001a8  0512              LSLS     r2,r2,#20
0001aa  0f12              LSRS     r2,r2,#28
0001ac  2900              CMP      r1,#0                 ;284
0001ae  d019              BEQ      |L1.484|
0001b0  2902              CMP      r1,#2                 ;286
0001b2  d300              BCC      |L1.438|
0001b4  482b              LDR      r0,|L1.612|
                  |L1.438|
0001b6  1c51              ADDS     r1,r2,#1              ;289
0001b8  f7fffffe          BL       __aeabi_uidivmod
0001bc  4607              MOV      r7,r0                 ;289
0001be  2d00              CMP      r5,#0                 ;291
0001c0  d016              BEQ      |L1.496|
0001c2  0868              LSRS     r0,r5,#1              ;292
0001c4  19c0              ADDS     r0,r0,r7              ;292
0001c6  4629              MOV      r1,r5                 ;292
0001c8  f7fffffe          BL       __aeabi_uidivmod
0001cc  4924              LDR      r1,|L1.608|
0001ce  1e80              SUBS     r0,r0,#2              ;294
0001d0  4288              CMP      r0,r1                 ;294
0001d2  d909              BLS      |L1.488|
0001d4  00e8              LSLS     r0,r5,#3              ;295
0001d6  19c0              ADDS     r0,r0,r7              ;295
0001d8  4629              MOV      r1,r5                 ;295
0001da  f7fffffe          BL       __aeabi_uidivmod
0001de  0900              LSRS     r0,r0,#4              ;295
0001e0  1e80              SUBS     r0,r0,#2              ;295
0001e2  e004              B        |L1.494|
                  |L1.484|
0001e4  4820              LDR      r0,|L1.616|
0001e6  e7e6              B        |L1.438|
                  |L1.488|
0001e8  2103              MOVS     r1,#3                 ;297
0001ea  0709              LSLS     r1,r1,#28             ;297
0001ec  4308              ORRS     r0,r0,r1              ;297
                  |L1.494|
0001ee  6260              STR      r0,[r4,#0x24]         ;295
                  |L1.496|
0001f0  6aa0              LDR      r0,[r4,#0x28]         ;300
0001f2  2120              MOVS     r1,#0x20              ;300
0001f4  4388              BICS     r0,r0,r1              ;300
0001f6  62a0              STR      r0,[r4,#0x28]         ;300
0001f8  6aa0              LDR      r0,[r4,#0x28]         ;301
0001fa  2140              MOVS     r1,#0x40              ;301
0001fc  4308              ORRS     r0,r0,r1              ;301
0001fe  62a0              STR      r0,[r4,#0x28]         ;301
000200  2102              MOVS     r1,#2                 ;302
000202  6aa0              LDR      r0,[r4,#0x28]         ;302
000204  2e00              CMP      r6,#0                 ;302
000206  d001              BEQ      |L1.524|
000208  4308              ORRS     r0,r0,r1              ;302
00020a  e000              B        |L1.526|
                  |L1.524|
00020c  4388              BICS     r0,r0,r1              ;302
                  |L1.526|
00020e  62a0              STR      r0,[r4,#0x28]         ;302
000210  6321              STR      r1,[r4,#0x30]         ;303
000212  bdf8              POP      {r3-r7,pc}
;;;305    
                          ENDP

                  UART_SelectRS485Mode PROC
;;;315     */
;;;316    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
000214  2303              MOVS     r3,#3
;;;317    {
;;;318        uart->FUN_SEL = UART_FUNC_SEL_RS485;
000216  6303              STR      r3,[r0,#0x30]
;;;319        uart->ALT_CSR = 0;
000218  2300              MOVS     r3,#0
00021a  62c3              STR      r3,[r0,#0x2c]
;;;320        uart->ALT_CSR |= u32Mode | (u32Addr << UART_ALT_CSR_ADDR_MATCH_Pos);
00021c  6ac3              LDR      r3,[r0,#0x2c]
00021e  0612              LSLS     r2,r2,#24
000220  430a              ORRS     r2,r2,r1
000222  4313              ORRS     r3,r3,r2
000224  62c3              STR      r3,[r0,#0x2c]
;;;321    }
000226  4770              BX       lr
;;;322    
                          ENDP

                  UART_Write PROC
;;;332     */
;;;333    uint32_t UART_Write(UART_T* uart,uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000228  b570              PUSH     {r4-r6,lr}
;;;334    {
00022a  4604              MOV      r4,r0
;;;335        uint32_t  u32Count, u32delayno;
;;;336    
;;;337        for(u32Count=0; u32Count != u32WriteBytes; u32Count++) {
00022c  2000              MOVS     r0,#0
;;;338            u32delayno = 0;
;;;339            while((uart->FSR & UART_FSR_TE_FLAG_Msk) == 0) { /* Wait Tx empty and Time-out manner */
;;;340                u32delayno++;
;;;341                if( u32delayno >= 0x40000000 )
00022e  2501              MOVS     r5,#1
000230  07ad              LSLS     r5,r5,#30
000232  e00c              B        |L1.590|
                  |L1.564|
000234  2300              MOVS     r3,#0                 ;338
000236  e004              B        |L1.578|
                  |L1.568|
000238  1c5b              ADDS     r3,r3,#1              ;339
00023a  42ab              CMP      r3,r5
00023c  d301              BCC      |L1.578|
;;;342                    return FALSE;
00023e  2000              MOVS     r0,#0
;;;343            }
;;;344            uart->THR = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;345        }
;;;346    
;;;347        return u32Count;
;;;348    
;;;349    }
000240  bd70              POP      {r4-r6,pc}
                  |L1.578|
000242  69a6              LDR      r6,[r4,#0x18]         ;339
000244  00f6              LSLS     r6,r6,#3              ;339
000246  d5f7              BPL      |L1.568|
000248  5c0b              LDRB     r3,[r1,r0]            ;344
00024a  6023              STR      r3,[r4,#0]            ;344
00024c  1c40              ADDS     r0,r0,#1              ;344
                  |L1.590|
00024e  4290              CMP      r0,r2                 ;337
000250  d1f0              BNE      |L1.564|
000252  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

                  |L1.596|
                          DCD      0x01000001
                  |L1.600|
                          DCD      ||.constdata||
                  |L1.604|
                          DCD      0x50000200
                  |L1.608|
                          DCD      0x0000ffff
                  |L1.612|
                          DCD      0x01518000
                  |L1.616|
                          DCD      0x00b71b00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "D:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.1.0\\Device\\Mini51\\Driver\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 464 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 479
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
