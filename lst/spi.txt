; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\spi.crf C:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver\spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_Open PROC
;;;37       */
;;;38     uint32_t SPI_Open(SPI_T *spi,
000000  b5f8              PUSH     {r3-r7,lr}
;;;39                       uint32_t u32MasterSlave,
;;;40                       uint32_t u32SPIMode,
;;;41                       uint32_t u32DataWidth,
;;;42                       uint32_t u32BusClock)
;;;43     {
;;;44         uint32_t u32Pclk, u32Div;
;;;45     
;;;46         if(u32DataWidth == 32)
000002  9f06              LDR      r7,[sp,#0x18]
000004  4604              MOV      r4,r0                 ;43
000006  2b20              CMP      r3,#0x20
000008  d100              BNE      |L1.12|
;;;47             u32DataWidth = 0;
00000a  2300              MOVS     r3,#0
                  |L1.12|
;;;48     
;;;49         spi->CNTRL = u32MasterSlave | (u32DataWidth << SPI_CNTRL_TX_BIT_LEN_Pos) | (u32SPIMode);
00000c  00d8              LSLS     r0,r3,#3
00000e  4308              ORRS     r0,r0,r1
000010  4310              ORRS     r0,r0,r2
000012  6020              STR      r0,[r4,#0]
;;;50     
;;;51         u32Pclk = CLK_GetHCLKFreq();
000014  f7fffffe          BL       CLK_GetHCLKFreq
;;;52     
;;;53         u32Div = 0xffff;
000018  4d6b              LDR      r5,|L1.456|
00001a  4606              MOV      r6,r0                 ;51
;;;54         spi->SSR |= SPI_SSR_SS_LTRIG_Msk;
00001c  68a1              LDR      r1,[r4,#8]
00001e  4628              MOV      r0,r5                 ;53
000020  2210              MOVS     r2,#0x10
000022  4311              ORRS     r1,r1,r2
000024  60a1              STR      r1,[r4,#8]
;;;55     
;;;56         if(u32BusClock !=0 ) {
000026  2f00              CMP      r7,#0
000028  d014              BEQ      |L1.84|
;;;57             u32Div = (((u32Pclk / u32BusClock) + 1) >> 1) - 1;
00002a  4639              MOV      r1,r7
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  1c40              ADDS     r0,r0,#1
000034  0840              LSRS     r0,r0,#1
000036  1e40              SUBS     r0,r0,#1
;;;58             if(u32Div > 0xFFFF)
000038  42a8              CMP      r0,r5
00003a  d900              BLS      |L1.62|
;;;59                 u32Div = 0xFFFF;
00003c  4628              MOV      r0,r5
                  |L1.62|
;;;60             spi->DIVIDER = (spi->DIVIDER & ~0xffff) | u32Div;
00003e  6861              LDR      r1,[r4,#4]
000040  0c09              LSRS     r1,r1,#16
000042  0409              LSLS     r1,r1,#16
000044  4301              ORRS     r1,r1,r0
                  |L1.70|
;;;61         } else
;;;62             spi->DIVIDER = 0;
000046  6061              STR      r1,[r4,#4]
;;;63     
;;;64         return ( u32Pclk / ((u32Div+1)*2) );
000048  0041              LSLS     r1,r0,#1
00004a  4630              MOV      r0,r6
00004c  1c89              ADDS     r1,r1,#2
00004e  f7fffffe          BL       __aeabi_uidivmod
;;;65     }
000052  bdf8              POP      {r3-r7,pc}
                  |L1.84|
000054  2100              MOVS     r1,#0                 ;62
000056  e7f6              B        |L1.70|
;;;66     
                          ENDP

                  SPI_Close PROC
;;;71       */
;;;72     void SPI_Close(SPI_T *spi)
000058  2005              MOVS     r0,#5
;;;73     {
;;;74         /* Reset SPI */
;;;75         SYS->IPRSTC2 |= SYS_IPRSTC2_SPI_RST_Msk;
00005a  0700              LSLS     r0,r0,#28
00005c  68c2              LDR      r2,[r0,#0xc]
00005e  2101              MOVS     r1,#1
000060  0309              LSLS     r1,r1,#12
000062  430a              ORRS     r2,r2,r1
000064  60c2              STR      r2,[r0,#0xc]
;;;76         SYS->IPRSTC2 &= ~SYS_IPRSTC2_SPI_RST_Msk;
000066  68c2              LDR      r2,[r0,#0xc]
000068  438a              BICS     r2,r2,r1
00006a  60c2              STR      r2,[r0,#0xc]
;;;77     }
00006c  4770              BX       lr
;;;78     
                          ENDP

                  SPI_ClearRxFIFO PROC
;;;83       */
;;;84     void SPI_ClearRxFIFO(SPI_T *spi)
00006e  6c01              LDR      r1,[r0,#0x40]
;;;85     {
;;;86         spi->FIFO_CTL |= SPI_FIFO_CTL_RX_CLR_Msk;
000070  2201              MOVS     r2,#1
000072  4311              ORRS     r1,r1,r2
000074  6401              STR      r1,[r0,#0x40]
;;;87     }
000076  4770              BX       lr
;;;88     
                          ENDP

                  SPI_ClearTxFIFO PROC
;;;93       */
;;;94     void SPI_ClearTxFIFO(SPI_T *spi)
000078  6c01              LDR      r1,[r0,#0x40]
;;;95     {
;;;96         spi->FIFO_CTL |= SPI_FIFO_CTL_TX_CLR_Msk;
00007a  2202              MOVS     r2,#2
00007c  4311              ORRS     r1,r1,r2
00007e  6401              STR      r1,[r0,#0x40]
;;;97     }
000080  4770              BX       lr
;;;98     
                          ENDP

                  SPI_DisableAutoSS PROC
;;;103      */
;;;104    void SPI_DisableAutoSS(SPI_T *spi)
000082  6881              LDR      r1,[r0,#8]
;;;105    {
;;;106        spi->SSR &= ~SPI_SSR_AUTOSS_Msk;
000084  2208              MOVS     r2,#8
000086  4391              BICS     r1,r1,r2
000088  6081              STR      r1,[r0,#8]
;;;107    }
00008a  4770              BX       lr
;;;108    
                          ENDP

                  SPI_EnableAutoSS PROC
;;;115      */
;;;116    void SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel)
00008c  b510              PUSH     {r4,lr}
;;;117    {
;;;118        spi->SSR = (spi->SSR & ~(SPI_SSR_SS_LVL_Msk | SPI_SSR_SSR_Msk)) | (u32SSPinMask | u32ActiveLevel) | SPI_SSR_AUTOSS_Msk;
00008e  6883              LDR      r3,[r0,#8]
000090  2405              MOVS     r4,#5
000092  43a3              BICS     r3,r3,r4
000094  4311              ORRS     r1,r1,r2
000096  430b              ORRS     r3,r3,r1
000098  2108              MOVS     r1,#8
00009a  430b              ORRS     r3,r3,r1
00009c  6083              STR      r3,[r0,#8]
;;;119    }
00009e  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  SPI_SetBusClock PROC
;;;126      */
;;;127    uint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock)
0000a0  b570              PUSH     {r4-r6,lr}
;;;128    {
0000a2  460d              MOV      r5,r1
0000a4  4606              MOV      r6,r0
;;;129        uint32_t u32ClkSrc = CLK_GetHCLKFreq();
0000a6  f7fffffe          BL       CLK_GetHCLKFreq
0000aa  4604              MOV      r4,r0
;;;130        uint32_t u32Div;
;;;131    
;;;132        if(u32BusClock > u32ClkSrc)
0000ac  42a5              CMP      r5,r4
0000ae  d900              BLS      |L1.178|
;;;133            u32BusClock = u32ClkSrc;
0000b0  4605              MOV      r5,r0
                  |L1.178|
;;;134    
;;;135        if(u32BusClock != 0 ) {
0000b2  2d00              CMP      r5,#0
0000b4  d014              BEQ      |L1.224|
;;;136            u32Div = (((u32ClkSrc / u32BusClock) + 1) >> 1) - 1;
0000b6  4629              MOV      r1,r5
0000b8  4620              MOV      r0,r4
0000ba  f7fffffe          BL       __aeabi_uidivmod
0000be  1c40              ADDS     r0,r0,#1
0000c0  0842              LSRS     r2,r0,#1
0000c2  1e52              SUBS     r2,r2,#1
;;;137            if(u32Div > SPI_DIVIDER_DIVIDER_Msk)
0000c4  2aff              CMP      r2,#0xff
0000c6  d900              BLS      |L1.202|
;;;138                u32Div = SPI_DIVIDER_DIVIDER_Msk;
0000c8  22ff              MOVS     r2,#0xff
                  |L1.202|
;;;139        } else
;;;140            return 0;
;;;141    
;;;142        spi->DIVIDER = (spi->DIVIDER & ~SPI_DIVIDER_DIVIDER_Msk) | u32Div;
0000ca  6870              LDR      r0,[r6,#4]
0000cc  0a00              LSRS     r0,r0,#8
0000ce  0200              LSLS     r0,r0,#8
0000d0  4310              ORRS     r0,r0,r2
0000d2  6070              STR      r0,[r6,#4]
;;;143        return ( u32ClkSrc / ((u32Div+1)*2) );
0000d4  0051              LSLS     r1,r2,#1
0000d6  4620              MOV      r0,r4
0000d8  1c89              ADDS     r1,r1,#2
0000da  f7fffffe          BL       __aeabi_uidivmod
;;;144    }
0000de  bd70              POP      {r4-r6,pc}
                  |L1.224|
0000e0  2000              MOVS     r0,#0                 ;140
0000e2  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP

                  SPI_EnableFIFO PROC
;;;152      */
;;;153    void SPI_EnableFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold)
0000e4  b510              PUSH     {r4,lr}
;;;154    {
;;;155        spi->FIFO_CTL = (spi->FIFO_CTL & ~(SPI_FIFO_CTL_TX_THRESHOLD_Msk | SPI_FIFO_CTL_RX_THRESHOLD_Msk) |
0000e6  6c03              LDR      r3,[r0,#0x40]
0000e8  2433              MOVS     r4,#0x33
0000ea  0624              LSLS     r4,r4,#24
0000ec  43a3              BICS     r3,r3,r4
0000ee  0709              LSLS     r1,r1,#28
0000f0  430b              ORRS     r3,r3,r1
0000f2  0611              LSLS     r1,r2,#24
0000f4  430b              ORRS     r3,r3,r1
0000f6  6403              STR      r3,[r0,#0x40]
;;;156                         (u32TxThreshold << SPI_FIFO_CTL_TX_THRESHOLD_Pos) |
;;;157                         (u32RxThreshold << SPI_FIFO_CTL_RX_THRESHOLD_Pos));
;;;158    
;;;159        spi->CNTRL |= SPI_CNTRL_FIFO_Msk;
0000f8  6801              LDR      r1,[r0,#0]
0000fa  2201              MOVS     r2,#1
0000fc  0552              LSLS     r2,r2,#21
0000fe  4311              ORRS     r1,r1,r2
000100  6001              STR      r1,[r0,#0]
;;;160    }
000102  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  SPI_DisableFIFO PROC
;;;166      */
;;;167    void SPI_DisableFIFO(SPI_T *spi)
000104  6801              LDR      r1,[r0,#0]
;;;168    {
;;;169        spi->CNTRL &= ~SPI_CNTRL_FIFO_Msk;
000106  2201              MOVS     r2,#1
000108  0552              LSLS     r2,r2,#21
00010a  4391              BICS     r1,r1,r2
00010c  6001              STR      r1,[r0,#0]
;;;170    }
00010e  4770              BX       lr
;;;171    
                          ENDP

                  SPI_GetBusClock PROC
;;;176      */
;;;177    uint32_t SPI_GetBusClock(SPI_T *spi)
000110  b510              PUSH     {r4,lr}
;;;178    {
000112  4604              MOV      r4,r0
;;;179        uint32_t u32Div;
;;;180        uint32_t u32ApbClock;
;;;181    
;;;182        u32ApbClock = CLK_GetHCLKFreq();
000114  f7fffffe          BL       CLK_GetHCLKFreq
;;;183        u32Div = spi->DIVIDER & 0xff;
000118  6861              LDR      r1,[r4,#4]
;;;184        return ((u32ApbClock >> 1) / (u32Div + 1));
00011a  0840              LSRS     r0,r0,#1
00011c  b2c9              UXTB     r1,r1                 ;183
00011e  1c49              ADDS     r1,r1,#1
000120  f7fffffe          BL       __aeabi_uidivmod
;;;185    }
000124  bd10              POP      {r4,pc}
;;;186    
                          ENDP

                  SPI_EnableInt PROC
;;;196      */
;;;197    void SPI_EnableInt(SPI_T *spi, uint32_t u32Mask)
000126  07ca              LSLS     r2,r1,#31
;;;198    {
000128  d004              BEQ      |L1.308|
;;;199        if((u32Mask & SPI_IE_MASK) == SPI_IE_MASK)
;;;200            spi->CNTRL |= SPI_CNTRL_IE_Msk;
00012a  6802              LDR      r2,[r0,#0]
00012c  2301              MOVS     r3,#1
00012e  045b              LSLS     r3,r3,#17
000130  431a              ORRS     r2,r2,r3
000132  6002              STR      r2,[r0,#0]
                  |L1.308|
;;;201    
;;;202        if((u32Mask & SPI_SSTA_INTEN_MASK) == SPI_SSTA_INTEN_MASK)
000134  074a              LSLS     r2,r1,#29
000136  d504              BPL      |L1.322|
;;;203            spi->CNTRL2 |= SPI_CNTRL2_SSTA_INTEN_Msk;
000138  6bc2              LDR      r2,[r0,#0x3c]
00013a  2301              MOVS     r3,#1
00013c  029b              LSLS     r3,r3,#10
00013e  431a              ORRS     r2,r2,r3
000140  63c2              STR      r2,[r0,#0x3c]
                  |L1.322|
;;;204    
;;;205        if((u32Mask & SPI_FIFO_TX_INTEN_MASK) == SPI_FIFO_TX_INTEN_MASK)
000142  070a              LSLS     r2,r1,#28
000144  d503              BPL      |L1.334|
;;;206            spi->FIFO_CTL |= SPI_FIFO_CTL_TX_INTEN_Msk;
000146  6c02              LDR      r2,[r0,#0x40]
000148  2308              MOVS     r3,#8
00014a  431a              ORRS     r2,r2,r3
00014c  6402              STR      r2,[r0,#0x40]
                  |L1.334|
;;;207    
;;;208        if((u32Mask & SPI_FIFO_RX_INTEN_MASK) == SPI_FIFO_RX_INTEN_MASK)
00014e  06ca              LSLS     r2,r1,#27
000150  d503              BPL      |L1.346|
;;;209            spi->FIFO_CTL |= SPI_FIFO_CTL_RX_INTEN_Msk;
000152  6c02              LDR      r2,[r0,#0x40]
000154  2304              MOVS     r3,#4
000156  431a              ORRS     r2,r2,r3
000158  6402              STR      r2,[r0,#0x40]
                  |L1.346|
;;;210    
;;;211        if((u32Mask & SPI_FIFO_RXOV_INTEN_MASK) == SPI_FIFO_RXOV_INTEN_MASK)
00015a  068a              LSLS     r2,r1,#26
00015c  d503              BPL      |L1.358|
;;;212            spi->FIFO_CTL |= SPI_FIFO_CTL_RXOV_INTEN_Msk;
00015e  6c02              LDR      r2,[r0,#0x40]
000160  2340              MOVS     r3,#0x40
000162  431a              ORRS     r2,r2,r3
000164  6402              STR      r2,[r0,#0x40]
                  |L1.358|
;;;213    
;;;214        if((u32Mask & SPI_FIFO_TIMEOUT_INTEN_MASK) == SPI_FIFO_TIMEOUT_INTEN_MASK)
000166  0649              LSLS     r1,r1,#25
000168  d504              BPL      |L1.372|
;;;215            spi->FIFO_CTL |= SPI_FIFO_CTL_TIMEOUT_INTEN_Msk;
00016a  6c01              LDR      r1,[r0,#0x40]
00016c  2201              MOVS     r2,#1
00016e  0552              LSLS     r2,r2,#21
000170  4311              ORRS     r1,r1,r2
000172  6401              STR      r1,[r0,#0x40]
                  |L1.372|
;;;216    }
000174  4770              BX       lr
;;;217    
                          ENDP

                  SPI_DisableInt PROC
;;;227      */
;;;228    void SPI_DisableInt(SPI_T *spi, uint32_t u32Mask)
000176  07ca              LSLS     r2,r1,#31
;;;229    {
000178  d004              BEQ      |L1.388|
;;;230        if((u32Mask & SPI_IE_MASK) == SPI_IE_MASK)
;;;231            spi->CNTRL &= ~SPI_CNTRL_IE_Msk;
00017a  6802              LDR      r2,[r0,#0]
00017c  2301              MOVS     r3,#1
00017e  045b              LSLS     r3,r3,#17
000180  439a              BICS     r2,r2,r3
000182  6002              STR      r2,[r0,#0]
                  |L1.388|
;;;232    
;;;233        if((u32Mask & SPI_SSTA_INTEN_MASK) == SPI_SSTA_INTEN_MASK)
000184  074a              LSLS     r2,r1,#29
000186  d504              BPL      |L1.402|
;;;234            spi->CNTRL2 &= ~SPI_CNTRL2_SSTA_INTEN_Msk;
000188  6bc2              LDR      r2,[r0,#0x3c]
00018a  2301              MOVS     r3,#1
00018c  029b              LSLS     r3,r3,#10
00018e  439a              BICS     r2,r2,r3
000190  63c2              STR      r2,[r0,#0x3c]
                  |L1.402|
;;;235    
;;;236        if((u32Mask & SPI_FIFO_TX_INTEN_MASK) == SPI_FIFO_TX_INTEN_MASK)
000192  070a              LSLS     r2,r1,#28
000194  d503              BPL      |L1.414|
;;;237            spi->FIFO_CTL &= ~SPI_FIFO_CTL_TX_INTEN_Msk;
000196  6c02              LDR      r2,[r0,#0x40]
000198  2308              MOVS     r3,#8
00019a  439a              BICS     r2,r2,r3
00019c  6402              STR      r2,[r0,#0x40]
                  |L1.414|
;;;238    
;;;239        if((u32Mask & SPI_FIFO_RX_INTEN_MASK) == SPI_FIFO_RX_INTEN_MASK)
00019e  06ca              LSLS     r2,r1,#27
0001a0  d503              BPL      |L1.426|
;;;240            spi->FIFO_CTL &= ~SPI_FIFO_CTL_RX_INTEN_Msk;
0001a2  6c02              LDR      r2,[r0,#0x40]
0001a4  2304              MOVS     r3,#4
0001a6  439a              BICS     r2,r2,r3
0001a8  6402              STR      r2,[r0,#0x40]
                  |L1.426|
;;;241    
;;;242        if((u32Mask & SPI_FIFO_RXOV_INTEN_MASK) == SPI_FIFO_RXOV_INTEN_MASK)
0001aa  068a              LSLS     r2,r1,#26
0001ac  d503              BPL      |L1.438|
;;;243            spi->FIFO_CTL &= ~SPI_FIFO_CTL_RXOV_INTEN_Msk;
0001ae  6c02              LDR      r2,[r0,#0x40]
0001b0  2340              MOVS     r3,#0x40
0001b2  439a              BICS     r2,r2,r3
0001b4  6402              STR      r2,[r0,#0x40]
                  |L1.438|
;;;244    
;;;245        if((u32Mask & SPI_FIFO_TIMEOUT_INTEN_MASK) == SPI_FIFO_TIMEOUT_INTEN_MASK)
0001b6  0649              LSLS     r1,r1,#25
0001b8  d504              BPL      |L1.452|
;;;246            spi->FIFO_CTL &= ~SPI_FIFO_CTL_TIMEOUT_INTEN_Msk;
0001ba  6c01              LDR      r1,[r0,#0x40]
0001bc  2201              MOVS     r2,#1
0001be  0552              LSLS     r2,r2,#21
0001c0  4391              BICS     r1,r1,r2
0001c2  6401              STR      r1,[r0,#0x40]
                  |L1.452|
;;;247    }
0001c4  4770              BX       lr
;;;248    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L1.456|
                          DCD      0x0000ffff

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.1.0\\Device\\Mini51\\Driver\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Open____REV16|
#line 464 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_spi_c_SPI_Open____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Open____REVSH|
#line 479
|__asm___5_spi_c_SPI_Open____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
