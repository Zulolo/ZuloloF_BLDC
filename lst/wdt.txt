; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\wdt.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\wdt.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\wdt.crf D:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver\wdt.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WDT_Open PROC
;;;41      */
;;;42     void  WDT_Open(uint32_t u32TimeoutInterval,
000000  0051              LSLS     r1,r2,#1
;;;43                    uint32_t u32ResetDelay,
;;;44                    uint32_t u32EnableReset,
;;;45                    uint32_t u32EnableWakeup)
;;;46     {
;;;47     
;;;48         WDT->WTCR = u32TimeoutInterval | WDT_WTCR_WTE_Msk |
000002  4301              ORRS     r1,r1,r0
000004  0118              LSLS     r0,r3,#4
000006  4301              ORRS     r1,r1,r0
000008  2080              MOVS     r0,#0x80
00000a  4301              ORRS     r1,r1,r0
00000c  480a              LDR      r0,|L1.56|
00000e  6001              STR      r1,[r0,#0]
;;;49                     (u32EnableReset << WDT_WTCR_WTRE_Pos) |
;;;50                     (u32EnableWakeup << WDT_WTCR_WTWKE_Pos);
;;;51         return;
;;;52     }
000010  4770              BX       lr
;;;53     
                          ENDP

                  WDT_Close PROC
;;;58      */
;;;59     void WDT_Close(void)
000012  4909              LDR      r1,|L1.56|
;;;60     {
;;;61         WDT->WTCR = 0;
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;62         return;
;;;63     }
000018  4770              BX       lr
;;;64     
                          ENDP

                  WDT_EnableInt PROC
;;;69      */
;;;70     void WDT_EnableInt(void)
00001a  4907              LDR      r1,|L1.56|
;;;71     {
;;;72         WDT->WTCR = (WDT->WTCR & ~(WDT_WTCR_WTIF_Msk | WDT_WTCR_WTWKF_Msk | WDT_WTCR_WTRF_Msk)) | WDT_WTCR_WTIE_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  222c              MOVS     r2,#0x2c
000020  4390              BICS     r0,r0,r2
000022  2240              MOVS     r2,#0x40
000024  4310              ORRS     r0,r0,r2
000026  6008              STR      r0,[r1,#0]
;;;73         return;
;;;74     }
000028  4770              BX       lr
;;;75     
                          ENDP

                  WDT_DisableInt PROC
;;;80      */
;;;81     void WDT_DisableInt(void)
00002a  4803              LDR      r0,|L1.56|
;;;82     {
;;;83         WDT->WTCR &= ~(WDT_WTCR_WTIF_Msk | WDT_WTCR_WTWKF_Msk | WDT_WTCR_WTRF_Msk | WDT_WTCR_WTIE_Msk);
00002c  6801              LDR      r1,[r0,#0]
00002e  226c              MOVS     r2,#0x6c
000030  4391              BICS     r1,r1,r2
000032  6001              STR      r1,[r0,#0]
;;;84         return;
;;;85     }
000034  4770              BX       lr
;;;86     
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      0x40004000

;*** Start embedded assembler ***

#line 1 "D:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.1.0\\Device\\Mini51\\Driver\\wdt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_wdt_c_WDT_Open____REV16|
#line 464 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_wdt_c_WDT_Open____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_wdt_c_WDT_Open____REVSH|
#line 479
|__asm___5_wdt_c_WDT_Open____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
