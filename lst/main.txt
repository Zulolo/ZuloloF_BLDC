; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -IG:\Geek\Projects\Zulolo_F\Force\Code\ZuloloF_BLDC\RTE -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.7\Device\Mini51\Include -ID:\Keil_v5\ARM\CMSIS\Include -I\ -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\main.crf User\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;570     */
;;;571    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;572    {
;;;573      if(IRQn < 0) {
;;;574        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;573
000010  da0b              BGE      |L1.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  48ff              LDR      r0,|L1.1048|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;575            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;576      else {
;;;577        NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
;;;578            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;579    }
000028  4770              BX       lr
                  |L1.42|
00002a  0883              LSRS     r3,r0,#2              ;577
00002c  48fb              LDR      r0,|L1.1052|
00002e  009b              LSLS     r3,r3,#2              ;577
000030  1818              ADDS     r0,r3,r0              ;577
000032  6803              LDR      r3,[r0,#0]            ;577
000034  4393              BICS     r3,r3,r2              ;577
000036  430b              ORRS     r3,r3,r1              ;577
000038  6003              STR      r3,[r0,#0]            ;577
00003a  4770              BX       lr
;;;580    
                          ENDP

                  initClk PROC
;;;15     
;;;16     void initClk()
00003c  b5f8              PUSH     {r3-r7,lr}
;;;17     {
;;;18     	/* Enable internal 22.1184MHz */
;;;19     	CLK->PWRCON |= CLK_PWRCON_IRC22M_EN_Msk;
00003e  4cf8              LDR      r4,|L1.1056|
000040  6820              LDR      r0,[r4,#0]
000042  2104              MOVS     r1,#4
000044  4308              ORRS     r0,r0,r1
000046  6020              STR      r0,[r4,#0]
;;;20     
;;;21     	/* Waiting for clock ready */
;;;22     	CLK_WaitClockReady(CLK_CLKSTATUS_IRC22M_STB_Msk);
000048  2010              MOVS     r0,#0x10
00004a  f7fffffe          BL       CLK_WaitClockReady
;;;23     
;;;24     	// Configure HCLK to use 22.1184MHz HIRC and div by 1
;;;25     	CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_IRC22M, CLK_CLKDIV_HCLK(1));
00004e  2100              MOVS     r1,#0
000050  2007              MOVS     r0,#7
000052  f7fffffe          BL       CLK_SetHCLK
;;;26     	//	CLK_DisableXtalRC(CLK_PWRCON_XTLCLK_EN_Msk);
;;;27     
;;;28     	// Configure SysTick to use HIRC
;;;29     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLK_S_IRC22M_DIV2);
000056  2038              MOVS     r0,#0x38
000058  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;30     
;;;31     	//    CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLK_S_HCLK_DIV2);
;;;32     	CLK_SetModuleClock(WDT_MODULE, CLK_CLKSEL1_WDT_S_HCLK_DIV2048, WHAT_EVER_DO_NOT_CARE);
00005c  4df1              LDR      r5,|L1.1060|
00005e  2201              MOVS     r2,#1
000060  2102              MOVS     r1,#2
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       CLK_SetModuleClock
;;;33     	CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADC_S_IRC22M, CLK_CLKDIV_ADC(ADC_CLK_DIVIDER));
000068  4eef              LDR      r6,|L1.1064|
00006a  2237              MOVS     r2,#0x37
00006c  0492              LSLS     r2,r2,#18
00006e  210c              MOVS     r1,#0xc
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       CLK_SetModuleClock
;;;34     	CLK_SetModuleClock(PWM01_MODULE, CLK_CLKSEL1_PWM01_S_HCLK, WHAT_EVER_DO_NOT_CARE);
000076  4fed              LDR      r7,|L1.1068|
000078  2201              MOVS     r2,#1
00007a  0751              LSLS     r1,r2,#29
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       CLK_SetModuleClock
;;;35     	CLK_SetModuleClock(PWM23_MODULE, CLK_CLKSEL1_PWM23_S_HCLK, WHAT_EVER_DO_NOT_CARE);
000082  2201              MOVS     r2,#1
000084  07d1              LSLS     r1,r2,#31
000086  48ea              LDR      r0,|L1.1072|
000088  f7fffffe          BL       CLK_SetModuleClock
;;;36     	CLK_SetModuleClock(PWM45_MODULE, CLK_CLKSEL2_PWM45_S_HCLK, WHAT_EVER_DO_NOT_CARE);
00008c  2201              MOVS     r2,#1
00008e  2120              MOVS     r1,#0x20
000090  48e8              LDR      r0,|L1.1076|
000092  f7fffffe          BL       CLK_SetModuleClock
;;;37     	CLK_SetModuleClock(UART_MODULE, CLK_CLKSEL1_UART_S_IRC22M, CLK_CLKDIV_UART(UART_CLK_DIVIDER));
000096  2200              MOVS     r2,#0
000098  0421              LSLS     r1,r4,#16
00009a  48e7              LDR      r0,|L1.1080|
00009c  f7fffffe          BL       CLK_SetModuleClock
;;;38     	CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0_S_HCLK , WHAT_EVER_DO_NOT_CARE);
0000a0  2201              MOVS     r2,#1
0000a2  0251              LSLS     r1,r2,#9
0000a4  48e5              LDR      r0,|L1.1084|
0000a6  f7fffffe          BL       CLK_SetModuleClock
;;;39     	CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1_S_HCLK , WHAT_EVER_DO_NOT_CARE);
0000aa  2201              MOVS     r2,#1
0000ac  0351              LSLS     r1,r2,#13
0000ae  48e4              LDR      r0,|L1.1088|
0000b0  f7fffffe          BL       CLK_SetModuleClock
;;;40     //	CLK_SetModuleClock(SPI_MODULE, CLK_CLKSEL1_SPI_S_HCLK  , WHAT_EVER_DO_NOT_CARE);
;;;41     	CLK->CLKSEL1 |= (0x01 << 4);
0000b4  6960              LDR      r0,[r4,#0x14]
0000b6  2110              MOVS     r1,#0x10
0000b8  4308              ORRS     r0,r0,r1
0000ba  6160              STR      r0,[r4,#0x14]
;;;42     
;;;43     	// Nai nai de seems can not use | | | to put all peripheral enable into one invoke
;;;44     	CLK_EnableModuleClock(WDT_MODULE);
0000bc  4628              MOV      r0,r5
0000be  f7fffffe          BL       CLK_EnableModuleClock
;;;45     	CLK_EnableModuleClock(TMR0_MODULE);
0000c2  48de              LDR      r0,|L1.1084|
0000c4  f7fffffe          BL       CLK_EnableModuleClock
;;;46     	CLK_EnableModuleClock(TMR1_MODULE);
0000c8  48dd              LDR      r0,|L1.1088|
0000ca  f7fffffe          BL       CLK_EnableModuleClock
;;;47     	CLK_EnableModuleClock(SPI_MODULE);
0000ce  48dd              LDR      r0,|L1.1092|
0000d0  f7fffffe          BL       CLK_EnableModuleClock
;;;48     	CLK_EnableModuleClock(UART_MODULE);
0000d4  48d8              LDR      r0,|L1.1080|
0000d6  f7fffffe          BL       CLK_EnableModuleClock
;;;49     	CLK_EnableModuleClock(PWM01_MODULE);
0000da  4638              MOV      r0,r7
0000dc  f7fffffe          BL       CLK_EnableModuleClock
;;;50     	CLK_EnableModuleClock(PWM23_MODULE);
0000e0  48d3              LDR      r0,|L1.1072|
0000e2  f7fffffe          BL       CLK_EnableModuleClock
;;;51     	CLK_EnableModuleClock(PWM45_MODULE);
0000e6  48d3              LDR      r0,|L1.1076|
0000e8  f7fffffe          BL       CLK_EnableModuleClock
;;;52     	CLK_EnableModuleClock(ADC_MODULE);
0000ec  4630              MOV      r0,r6
0000ee  f7fffffe          BL       CLK_EnableModuleClock
;;;53     	CLK_EnableModuleClock(ACMP_MODULE);
0000f2  48d5              LDR      r0,|L1.1096|
0000f4  f7fffffe          BL       CLK_EnableModuleClock
;;;54     //	CLK->APBCLK |= (0x01 << 12);
;;;55     }
0000f8  bdf8              POP      {r3-r7,pc}
;;;56     
                          ENDP

                  initIRQ PROC
;;;57     void initIRQ()
0000fa  b510              PUSH     {r4,lr}
;;;58     {
;;;59     	NVIC_EnableIRQ(TMR0_IRQn);
0000fc  2008              MOVS     r0,#8
0000fe  f7fffffe          BL       NVIC_EnableIRQ
;;;60     	NVIC_EnableIRQ(TMR1_IRQn);
000102  2009              MOVS     r0,#9
000104  f7fffffe          BL       NVIC_EnableIRQ
;;;61     	NVIC_EnableIRQ(SPI_IRQn);
000108  200e              MOVS     r0,#0xe
00010a  f7fffffe          BL       NVIC_EnableIRQ
;;;62     	NVIC_EnableIRQ(ACMP_IRQn);
00010e  2019              MOVS     r0,#0x19
000110  f7fffffe          BL       NVIC_EnableIRQ
;;;63     	NVIC_EnableIRQ(EINT0_IRQn);
000114  2002              MOVS     r0,#2
000116  f7fffffe          BL       NVIC_EnableIRQ
;;;64     	NVIC_EnableIRQ(ADC_IRQn);
00011a  201d              MOVS     r0,#0x1d
00011c  f7fffffe          BL       NVIC_EnableIRQ
;;;65     	//    NVIC_EnableIRQ(PWM_IRQn);
;;;66     
;;;67     	NVIC_SetPriority(TMR0_IRQn, 1);
000120  2101              MOVS     r1,#1
000122  2008              MOVS     r0,#8
000124  f7fffffe          BL       NVIC_SetPriority
;;;68     	NVIC_SetPriority(TMR1_IRQn, 1);
000128  2101              MOVS     r1,#1
00012a  2009              MOVS     r0,#9
00012c  f7fffffe          BL       NVIC_SetPriority
;;;69     	NVIC_SetPriority(SPI_IRQn, 3);
000130  2103              MOVS     r1,#3
000132  200e              MOVS     r0,#0xe
000134  f7fffffe          BL       NVIC_SetPriority
;;;70     	NVIC_SetPriority(ACMP_IRQn, 2);
000138  2102              MOVS     r1,#2
00013a  2019              MOVS     r0,#0x19
00013c  f7fffffe          BL       NVIC_SetPriority
;;;71     	NVIC_SetPriority(EINT0_IRQn, 0);
000140  2100              MOVS     r1,#0
000142  2002              MOVS     r0,#2
000144  f7fffffe          BL       NVIC_SetPriority
;;;72     	NVIC_SetPriority(ADC_IRQn, 3);
000148  2103              MOVS     r1,#3
00014a  201d              MOVS     r0,#0x1d
00014c  f7fffffe          BL       NVIC_SetPriority
;;;73     	//    NVIC_SetPriority(PWM_IRQn, 2);
;;;74     
;;;75     	GPIO_EnableEINT0(BRG_FAULT_PORT, BRG_FAULT_PIN, GPIO_INT_FALLING);
000150  2201              MOVS     r2,#1
000152  2104              MOVS     r1,#4
000154  48bd              LDR      r0,|L1.1100|
000156  f7fffffe          BL       GPIO_EnableInt
;;;76     }
00015a  bd10              POP      {r4,pc}
;;;77     
                          ENDP

                  initGPIO PROC
;;;78     void initGPIO()
00015c  b5f8              PUSH     {r3-r7,lr}
;;;79     {
;;;80     /*---------------------------------------------------------------------------------------------------------*/
;;;81     /* GPIO configuration                                                                                 	   */
;;;82     /*---------------------------------------------------------------------------------------------------------*/
;;;83         // LED Pin
;;;84         GPIO_SetMode(LED_PORT, LED_PIN, GPIO_PMD_OUTPUT);
00015e  4cbb              LDR      r4,|L1.1100|
000160  2201              MOVS     r2,#1
000162  3480              ADDS     r4,r4,#0x80
000164  2110              MOVS     r1,#0x10
000166  4620              MOV      r0,r4
000168  f7fffffe          BL       GPIO_SetMode
;;;85     
;;;86         // Bridge Enable Pin
;;;87         GPIO_SetMode(BRG_EN_PORT, BRG_EN_PIN, GPIO_PMD_OUTPUT);
00016c  4db7              LDR      r5,|L1.1100|
00016e  2201              MOVS     r2,#1
000170  4611              MOV      r1,r2
000172  4628              MOV      r0,r5
000174  f7fffffe          BL       GPIO_SetMode
;;;88         BRG_DISABLE;
000178  48b5              LDR      r0,|L1.1104|
00017a  2700              MOVS     r7,#0
00017c  6207              STR      r7,[r0,#0x20]
;;;89     
;;;90         // Bridge Fault Pin
;;;91         GPIO_SetMode(BRG_FAULT_PORT, BRG_FAULT_PIN, GPIO_PMD_INPUT);
00017e  463a              MOV      r2,r7
000180  2104              MOVS     r1,#4
000182  4628              MOV      r0,r5
000184  f7fffffe          BL       GPIO_SetMode
;;;92     
;;;93         // PWM Pin
;;;94         GPIO_SetMode(MOSFET_DRV_0_4_PORT, MOSFET_DRV_0_PIN | MOSFET_DRV_1_PIN | MOSFET_DRV_2_PIN | 
000188  48b0              LDR      r0,|L1.1100|
00018a  2201              MOVS     r2,#1
00018c  217c              MOVS     r1,#0x7c
00018e  3840              SUBS     r0,r0,#0x40
000190  f7fffffe          BL       GPIO_SetMode
;;;95     			     MOSFET_DRV_3_PIN | MOSFET_DRV_4_PIN, GPIO_PMD_OUTPUT);
;;;96         GPIO_SetMode(MOSFET_DRV_5_PORT, MOSFET_DRV_5_PIN, GPIO_PMD_OUTPUT);
000194  4ead              LDR      r6,|L1.1100|
000196  2201              MOVS     r2,#1
000198  3ec0              SUBS     r6,r6,#0xc0
00019a  2110              MOVS     r1,#0x10
00019c  4630              MOV      r0,r6
00019e  f7fffffe          BL       GPIO_SetMode
;;;97     
;;;98         // SPI, I am slave
;;;99         GPIO_SetMode(COMM_PORT, COMM_CLK_PIN | COMM_CS_PIN | COMM_RX_PIN, GPIO_PMD_INPUT);
0001a2  2200              MOVS     r2,#0
0001a4  21a2              MOVS     r1,#0xa2
0001a6  4630              MOV      r0,r6
0001a8  f7fffffe          BL       GPIO_SetMode
;;;100        GPIO_SetMode(COMM_PORT, COMM_TX_PIN, GPIO_PMD_OUTPUT);
0001ac  2201              MOVS     r2,#1
0001ae  2140              MOVS     r1,#0x40
0001b0  4630              MOV      r0,r6
0001b2  f7fffffe          BL       GPIO_SetMode
;;;101    
;;;102        // UART Pin
;;;103        GPIO_SetMode(DEBUG_TX_PORT, DEBUG_TX_PIN, GPIO_PMD_OUTPUT);
0001b6  2201              MOVS     r2,#1
0001b8  4611              MOV      r1,r2
0001ba  4630              MOV      r0,r6
0001bc  f7fffffe          BL       GPIO_SetMode
;;;104        GPIO_SetMode(DEBUG_RX_PORT, DEBUG_RX_PIN, GPIO_PMD_INPUT);
0001c0  4ea2              LDR      r6,|L1.1100|
0001c2  2200              MOVS     r2,#0
0001c4  3e80              SUBS     r6,r6,#0x80
0001c6  2104              MOVS     r1,#4
0001c8  4630              MOV      r0,r6
0001ca  f7fffffe          BL       GPIO_SetMode
;;;105    
;;;106        // DEBUG for ACMP Output Pin
;;;107        GPIO_SetMode(DEBUG_ACMP_OUT_PORT, DEBUG_ACMP_OUT_PIN, GPIO_PMD_OUTPUT);
0001ce  2201              MOVS     r2,#1
0001d0  2140              MOVS     r1,#0x40
0001d2  4628              MOV      r0,r5
0001d4  f7fffffe          BL       GPIO_SetMode
;;;108    		GPIO_SetMode(DEBUG_GPIO_PORT, DEBUG_GPIO_PIN, GPIO_PMD_OUTPUT);
0001d8  2201              MOVS     r2,#1
0001da  4611              MOV      r1,r2
0001dc  4620              MOV      r0,r4
0001de  f7fffffe          BL       GPIO_SetMode
;;;109    		P50 = 0;
0001e2  489b              LDR      r0,|L1.1104|
0001e4  3040              ADDS     r0,r0,#0x40
0001e6  6207              STR      r7,[r0,#0x20]
;;;110    
;;;111        // ADC for current Pin
;;;112        GPIO_DISABLE_DIGITAL_PATH(CURRENT_PORT, CURRENT_PIN << GPIO_OFFD_OFF_SET);
0001e8  6860              LDR      r0,[r4,#4]
0001ea  2101              MOVS     r1,#1
0001ec  04c9              LSLS     r1,r1,#19
0001ee  4308              ORRS     r0,r0,r1
0001f0  6060              STR      r0,[r4,#4]
;;;113        GPIO_SetMode(CURRENT_PORT, CURRENT_PIN, GPIO_PMD_INPUT);
0001f2  2200              MOVS     r2,#0
0001f4  2108              MOVS     r1,#8
0001f6  4620              MOV      r0,r4
0001f8  f7fffffe          BL       GPIO_SetMode
;;;114        // ADC for battery Pin
;;;115        GPIO_DISABLE_DIGITAL_PATH(BATTERY_V_PORT, BATTERY_V_PIN << GPIO_OFFD_OFF_SET);
0001fc  6868              LDR      r0,[r5,#4]
0001fe  2101              MOVS     r1,#1
000200  0449              LSLS     r1,r1,#17
000202  4308              ORRS     r0,r0,r1
000204  6068              STR      r0,[r5,#4]
;;;116        GPIO_SetMode(BATTERY_V_PORT, BATTERY_V_PIN, GPIO_PMD_INPUT);
000206  2200              MOVS     r2,#0
000208  2102              MOVS     r1,#2
00020a  4628              MOV      r0,r5
00020c  f7fffffe          BL       GPIO_SetMode
;;;117    	    
;;;118        // ACMP Pin
;;;119        GPIO_DISABLE_DIGITAL_PATH(ZERO_DETECT_PORT, (ZERO_DETECT_A_PIN | ZERO_DETECT_B_PIN |
000210  6870              LDR      r0,[r6,#4]
000212  2139              MOVS     r1,#0x39
000214  0409              LSLS     r1,r1,#16
000216  4308              ORRS     r0,r0,r1
000218  6070              STR      r0,[r6,#4]
;;;120    			      ZERO_DETECT_C_PIN | ZERO_DETECT_M_PIN) << GPIO_OFFD_OFF_SET);
;;;121        GPIO_SetMode(ZERO_DETECT_PORT, ZERO_DETECT_A_PIN | ZERO_DETECT_B_PIN |
00021a  2200              MOVS     r2,#0
00021c  2139              MOVS     r1,#0x39
00021e  4630              MOV      r0,r6
000220  f7fffffe          BL       GPIO_SetMode
;;;122    		 ZERO_DETECT_C_PIN | ZERO_DETECT_M_PIN, GPIO_PMD_INPUT);
;;;123    /*---------------------------------------------------------------------------------------------------------*/
;;;124    /* Init I/O Multi-function                                                                                 */
;;;125    /*---------------------------------------------------------------------------------------------------------*/
;;;126        /* Set multi-function pins for UART RXD and TXD */
;;;127        SYS->P0_MFP &= ~SYS_MFP_P00_Msk;
000224  05a0              LSLS     r0,r4,#22
000226  6b01              LDR      r1,[r0,#0x30]
000228  4a8a              LDR      r2,|L1.1108|
00022a  4011              ANDS     r1,r1,r2
00022c  6301              STR      r1,[r0,#0x30]
;;;128        SYS->P0_MFP |= SYS_MFP_P00_TXD;  
00022e  6b01              LDR      r1,[r0,#0x30]
000230  22ff              MOVS     r2,#0xff
000232  3202              ADDS     r2,#2
000234  4311              ORRS     r1,r1,r2
000236  6301              STR      r1,[r0,#0x30]
;;;129        SYS->P1_MFP &= ~SYS_MFP_P12_Msk;
000238  6b41              LDR      r1,[r0,#0x34]
00023a  4c87              LDR      r4,|L1.1112|
00023c  4021              ANDS     r1,r1,r4
00023e  6341              STR      r1,[r0,#0x34]
;;;130        SYS->P1_MFP |= SYS_MFP_P12_RXD; 
000240  6b41              LDR      r1,[r0,#0x34]
000242  2301              MOVS     r3,#1
000244  029b              LSLS     r3,r3,#10
000246  4319              ORRS     r1,r1,r3
000248  6341              STR      r1,[r0,#0x34]
;;;131    	 
;;;132    	/* Set multi-function pins for SPI */
;;;133    //    SYS->P0_MFP &= ~(SYS_MFP_P01_Msk | SYS_MFP_P05_Msk | SYS_MFP_P06_Msk | SYS_MFP_P07_Msk);
;;;134        SYS->P0_MFP |= (SYS_MFP_P01_SPISS | SYS_MFP_P05_MOSI | SYS_MFP_P06_MISO | SYS_MFP_P07_SPICLK); 
00024a  6b01              LDR      r1,[r0,#0x30]
00024c  4b83              LDR      r3,|L1.1116|
00024e  4319              ORRS     r1,r1,r3
000250  6301              STR      r1,[r0,#0x30]
;;;135    
;;;136    	/* Set multi-function pins for ADC for current */
;;;137        SYS->P5_MFP &= ~SYS_MFP_P53_Msk;
000252  4983              LDR      r1,|L1.1120|
000254  684b              LDR      r3,[r1,#4]
000256  4d83              LDR      r5,|L1.1124|
000258  402b              ANDS     r3,r3,r5
00025a  604b              STR      r3,[r1,#4]
;;;138        SYS->P5_MFP |= SYS_MFP_P53_AIN0;  
00025c  684b              LDR      r3,[r1,#4]
00025e  2508              MOVS     r5,#8
000260  432b              ORRS     r3,r3,r5
000262  604b              STR      r3,[r1,#4]
;;;139    
;;;140    	/* Set multi-function pins for ADC for battery */
;;;141        SYS->P3_MFP &= ~SYS_MFP_P31_Msk;
000264  6bc3              LDR      r3,[r0,#0x3c]
000266  1065              ASRS     r5,r4,#1
000268  402b              ANDS     r3,r3,r5
00026a  63c3              STR      r3,[r0,#0x3c]
;;;142        SYS->P3_MFP |= SYS_MFP_P31_AIN7;  
00026c  6bc3              LDR      r3,[r0,#0x3c]
00026e  0055              LSLS     r5,r2,#1
000270  432b              ORRS     r3,r3,r5
000272  63c3              STR      r3,[r0,#0x3c]
;;;143    
;;;144    	/* Set multi-function pins for ACMP output for debug */
;;;145        SYS->P3_MFP &= ~SYS_MFP_P36_Msk;
000274  6bc3              LDR      r3,[r0,#0x3c]
000276  4d7c              LDR      r5,|L1.1128|
000278  402b              ANDS     r3,r3,r5
00027a  63c3              STR      r3,[r0,#0x3c]
;;;146        SYS->P3_MFP |= SYS_MFP_P36_CPO0;
00027c  6bc3              LDR      r3,[r0,#0x3c]
00027e  0195              LSLS     r5,r2,#6
000280  432b              ORRS     r3,r3,r5
000282  63c3              STR      r3,[r0,#0x3c]
;;;147        SYS->P5_MFP &= ~SYS_MFP_P50_Msk;
000284  684b              LDR      r3,[r1,#4]
000286  4393              BICS     r3,r3,r2
000288  604b              STR      r3,[r1,#4]
;;;148        SYS->P5_MFP |= SYS_MFP_P50_GPIO;
00028a  684a              LDR      r2,[r1,#4]
00028c  604a              STR      r2,[r1,#4]
;;;149    
;;;150    	/* Set multi-function pins for ACMP */
;;;151        SYS->P1_MFP &= ~SYS_MFP_P14_Msk;
00028e  6b41              LDR      r1,[r0,#0x34]
000290  4b76              LDR      r3,|L1.1132|
000292  4019              ANDS     r1,r1,r3
000294  6341              STR      r1,[r0,#0x34]
;;;152        SYS->P1_MFP |= SYS_MFP_P14_CPN0;  
000296  6b42              LDR      r2,[r0,#0x34]
000298  10a9              ASRS     r1,r5,#2
00029a  430a              ORRS     r2,r2,r1
00029c  6342              STR      r2,[r0,#0x34]
;;;153    	// pp will changed in the 
;;;154    //    SYS->P1_MFP &= ~(SYS_MFP_P10_Msk | SYS_MFP_P13_Msk | SYS_MFP_P14_Msk | SYS_MFP_P15_Msk);
;;;155    //    SYS->P1_MFP |= (SYS_MFP_P10_CPP0 | SYS_MFP_P13_CPP0 | SYS_MFP_P14_CPN0 | SYS_MFP_P15_CPP0); 
;;;156    // 	          
;;;157        /* Set multi-function pins for PWM */
;;;158        SYS->P2_MFP &= ~(SYS_MFP_P22_Msk | SYS_MFP_P23_Msk | SYS_MFP_P24_Msk | SYS_MFP_P25_Msk | SYS_MFP_P26_Msk);
00029e  6b82              LDR      r2,[r0,#0x38]
0002a0  4d73              LDR      r5,|L1.1136|
0002a2  402a              ANDS     r2,r2,r5
0002a4  6382              STR      r2,[r0,#0x38]
;;;159        SYS->P2_MFP = SYS_MFP_P22_PWM0 | SYS_MFP_P23_PWM1 | SYS_MFP_P24_PWM2 | SYS_MFP_P25_PWM3 |SYS_MFP_P26_PWM4;
0002a6  221f              MOVS     r2,#0x1f
0002a8  0292              LSLS     r2,r2,#10
0002aa  6382              STR      r2,[r0,#0x38]
;;;160        SYS->P0_MFP &= ~SYS_MFP_P04_Msk;
0002ac  6b02              LDR      r2,[r0,#0x30]
0002ae  401a              ANDS     r2,r2,r3
0002b0  6302              STR      r2,[r0,#0x30]
;;;161        SYS->P0_MFP |= SYS_MFP_P04_PWM5;  
0002b2  6b02              LDR      r2,[r0,#0x30]
0002b4  430a              ORRS     r2,r2,r1
0002b6  6302              STR      r2,[r0,#0x30]
;;;162    
;;;163    	/* Set multi-function pins for EINT0 */
;;;164        SYS->P3_MFP &= ~SYS_MFP_P32_Msk;
0002b8  6bc1              LDR      r1,[r0,#0x3c]
0002ba  4021              ANDS     r1,r1,r4
0002bc  63c1              STR      r1,[r0,#0x3c]
;;;165        SYS->P3_MFP |= SYS_MFP_P32_INT0;  
0002be  6bc1              LDR      r1,[r0,#0x3c]
0002c0  2204              MOVS     r2,#4
0002c2  4311              ORRS     r1,r1,r2
0002c4  63c1              STR      r1,[r0,#0x3c]
;;;166    	
;;;167    }
0002c6  bdf8              POP      {r3-r7,pc}
;;;168    
                          ENDP

                  configTIM PROC
;;;169    void configTIM(void)
0002c8  486b              LDR      r0,|L1.1144|
;;;170    {
;;;171    	// T0 used to change phase automatically
;;;172    	// T1 used to filter ZX
;;;173        TIMER0->TCSR  =  TIMER_TCSR_CRST_Msk | TIMER_PERIODIC_MODE | TIMER_TCSR_PERIODIC_SEL_Msk | TIMER_TCSR_TDR_EN_Msk + TIMER0_PRESCALE;   
0002ca  496a              LDR      r1,|L1.1140|
0002cc  6001              STR      r1,[r0,#0]
;;;174        TIMER1->TCSR  =  TIMER_TCSR_CRST_Msk | TIMER_CONTINUOUS_MODE | TIMER_TCSR_TDR_EN_Msk + TIMER1_PRESCALE; 
0002ce  496b              LDR      r1,|L1.1148|
0002d0  6201              STR      r1,[r0,#0x20]
;;;175        // TIMER1->TCSR |=  TIMER_TCSR_CEN_Msk ;    
;;;176    	//TIMER_EnableInt(TIMER0);                         
;;;177        //TIMER_EnableInt(TIMER1);
;;;178    }
0002d2  4770              BX       lr
;;;179    
                          ENDP

                  configADC PROC
;;;180    void configADC(void)
0002d4  b510              PUSH     {r4,lr}
;;;181    {
;;;182    
;;;183    	ADC_SetExtraSampleTime(ADC, 0 , ADC_SAMPLE_CLOCK_16);
0002d6  4c6a              LDR      r4,|L1.1152|
0002d8  2205              MOVS     r2,#5
0002da  2100              MOVS     r1,#0
0002dc  4620              MOV      r0,r4
0002de  f7fffffe          BL       ADC_SetExtraSampleTime
;;;184    
;;;185    	// Enable channel 0 and 7 (Current and Battery)
;;;186    //    ADC_Open(ADC, 0, 0, ADC_BATTERY_CHN_MSK);	//ADC_CURRENT_CHN_MSK | ADC_BATTERY_CHN_MSK);	
;;;187    // Do NOT use this, it will clear all bit in ADCR
;;;188    
;;;189    
;;;190    	// Power on ADC
;;;191    	ADC_POWER_ON(ADC);
0002e2  6a20              LDR      r0,[r4,#0x20]
0002e4  2101              MOVS     r1,#1
0002e6  4308              ORRS     r0,r0,r1
0002e8  6220              STR      r0,[r4,#0x20]
;;;192    
;;;193    	// ADC start triggered by TIM and take turn between current and battery
;;;194    	// Use two ADC comparator to hardware trace the big cuurent or battery low
;;;195    
;;;196    	// Configure and enable Comperator 0 to monitor channel 0(current) input greater or euqal to 93
;;;197    	ADC_ENABLE_CMP0(ADC, ADC_CURRENT_CHN_IDX, ADC_CMP_GREATER_OR_EQUAL_TO, ADC_CURRENT_HIGH_THRS, ADC_CURRENT_HIGH_CNT);
0002ea  4866              LDR      r0,|L1.1156|
0002ec  62a0              STR      r0,[r4,#0x28]
;;;198    	// Configure and enable Comperator 1 to monitor channel 7(battery) input less than 0x200	
;;;199    	ADC_ENABLE_CMP1(ADC, ADC_BATTERY_CHN_IDX, ADC_CMP_LESS_THAN, ADC_BAT_LOW_THRS, ADC_BAT_LOW_CNT);    
0002ee  4866              LDR      r0,|L1.1160|
0002f0  62e0              STR      r0,[r4,#0x2c]
;;;200    
;;;201    	// Enable ADC comparator 0 and 1 interrupt
;;;202    	ADC_EnableInt(ADC, ADC_ADF_INT);
0002f2  4620              MOV      r0,r4
0002f4  f7fffffe          BL       ADC_EnableInt
;;;203    	ADC_EnableInt(ADC, ADC_CMP0_INT);
0002f8  2102              MOVS     r1,#2
0002fa  4620              MOV      r0,r4
0002fc  f7fffffe          BL       ADC_EnableInt
;;;204    	ADC_EnableInt(ADC, ADC_CMP1_INT);
000300  2104              MOVS     r1,#4
000302  4620              MOV      r0,r4
000304  f7fffffe          BL       ADC_EnableInt
;;;205    
;;;206    	ADC_SET_INPUT_CHANNEL(ADC, ADC_BATTERY_CHN_MSK);
000308  6a60              LDR      r0,[r4,#0x24]
00030a  0a00              LSRS     r0,r0,#8
00030c  0200              LSLS     r0,r0,#8
00030e  3080              ADDS     r0,r0,#0x80
000310  6260              STR      r0,[r4,#0x24]
;;;207    	ADC_START_CONV(ADC);
000312  6a20              LDR      r0,[r4,#0x20]
000314  2101              MOVS     r1,#1
000316  02c9              LSLS     r1,r1,#11
000318  4308              ORRS     r0,r0,r1
00031a  6220              STR      r0,[r4,#0x20]
;;;208    }
00031c  bd10              POP      {r4,pc}
;;;209    
                          ENDP

                  configSPI PROC
;;;210    void configSPI(void)
00031e  b538              PUSH     {r3-r5,lr}
;;;211    {
;;;212    /*---------------------------------------------------------------------------------------------------------*/
;;;213    /* Init SPI                                                                                                */
;;;214    /*---------------------------------------------------------------------------------------------------------*/
;;;215    	
;;;216    	/* Fuck mini51's SPI, seems the TX DR will have influence on RX DR 
;;;217    		 SOOOOOOOO, when master is TXing, slave only receive. 
;;;218    		 When master is RXing, master's MOSI need to be always high
;;;219    	*/
;;;220    	
;;;221    	/* Configure as a slave, clock idle low, falling clock edge Tx, rising edge Rx and 32-bit transaction */
;;;222    	/* Set IP clock divider. SPI clock rate = 10MHz */
;;;223    	SPI_Close(SPI);
000320  4c5a              LDR      r4,|L1.1164|
000322  4620              MOV      r0,r4
000324  f7fffffe          BL       SPI_Close
;;;224    
;;;225    	// peripheral clock frequency of slave device must be faster than the bus clock frequency of the master
;;;226    	SPI_Open(SPI, SPI_SLAVE, SPI_MODE_0, COMM_BIT_LENTH, COMM_BAUT_RATE);
000328  2000              MOVS     r0,#0
00032a  2204              MOVS     r2,#4
00032c  9000              STR      r0,[sp,#0]
00032e  2310              MOVS     r3,#0x10
000330  0411              LSLS     r1,r2,#16
000332  4620              MOV      r0,r4
000334  f7fffffe          BL       SPI_Open
000338  6820              LDR      r0,[r4,#0]
00033a  1521              ASRS     r1,r4,#20
00033c  4388              BICS     r0,r0,r1
00033e  6020              STR      r0,[r4,#0]
;;;227    
;;;228    //	  /* Enable the automatic hardware slave select function. Select the SS pin and configure as low-active. */
;;;229    //    SPI_EnableAutoSS(SPI, SPI_SS, SPI_SS_ACTIVE_LOW);
;;;230    
;;;231    	SPI_SET_MSB_FIRST(SPI);
;;;232    
;;;233    	// SS level trigger
;;;234    	// Set input slave select signal to edge-trigger
;;;235    	SPI->SSR |= SPI_SSR_SS_LTRIG_Msk;
000340  68a0              LDR      r0,[r4,#8]
000342  2110              MOVS     r1,#0x10
000344  4308              ORRS     r0,r0,r1
000346  60a0              STR      r0,[r4,#8]
;;;236    	// Set slave select signal SPISS to be active at low level.
;;;237    	SPI->SSR &= (~SPI_SSR_SS_LVL_Msk);
000348  68a0              LDR      r0,[r4,#8]
00034a  2104              MOVS     r1,#4
00034c  4388              BICS     r0,r0,r1
00034e  60a0              STR      r0,[r4,#8]
;;;238    
;;;239    	/* Use FIFO */
;;;240    //	SPI_EnableFIFO(SPI, COMM_FIFO_LENGTH, COMM_FIFO_LENGTH);
;;;241    
;;;242    	/* Enable SPI unit transfer interrupt */
;;;243    	SPI_EnableInt(SPI, SPI_IE_MASK);
000350  2101              MOVS     r1,#1
000352  4620              MOV      r0,r4
000354  f7fffffe          BL       SPI_EnableInt
000358  6820              LDR      r0,[r4,#0]
00035a  2101              MOVS     r1,#1
00035c  4308              ORRS     r0,r0,r1
00035e  6020              STR      r0,[r4,#0]
;;;244    		
;;;245    //	SPI_ClearRxFIFO(SPI);
;;;246    //	SPI_ClearTxFIFO(SPI);	
;;;247    	
;;;248    //	SPI_WRITE_TX(SPI, 0xFFFF);
;;;249    	SPI_TRIGGER(SPI);
;;;250    }
000360  bd38              POP      {r3-r5,pc}
;;;251    
                          ENDP

                  initPWM PROC
;;;257    
;;;258    void initPWM(void)
000362  b570              PUSH     {r4-r6,lr}
;;;259    {
;;;260        PWM_Stop(PWM, PWM_CHN_ALL_MSK);
000364  4c4a              LDR      r4,|L1.1168|
000366  213f              MOVS     r1,#0x3f
000368  4620              MOV      r0,r4
00036a  f7fffffe          BL       PWM_Stop
;;;261        PWM_SET_PRESCALER(PWM, 0, PWM_CHN01_PRESCALER);
00036e  6820              LDR      r0,[r4,#0]
000370  0a00              LSRS     r0,r0,#8
000372  0200              LSLS     r0,r0,#8
000374  1c40              ADDS     r0,r0,#1
000376  6020              STR      r0,[r4,#0]
;;;262    //    PWM_SET_PRESCALER(PWM, 1, PWM_CHN01_PRESCALER);
;;;263        PWM_SET_PRESCALER(PWM, 2, PWM_CHN23_PRESCALER);
000378  6820              LDR      r0,[r4,#0]
00037a  21ff              MOVS     r1,#0xff
00037c  0209              LSLS     r1,r1,#8
00037e  4388              BICS     r0,r0,r1
000380  30ff              ADDS     r0,r0,#0xff
000382  3001              ADDS     r0,#1
000384  6020              STR      r0,[r4,#0]
;;;264    //    PWM_SET_PRESCALER(PWM, 3, PWM_CHN23_PRESCALER);
;;;265        PWM_SET_PRESCALER(PWM, 4, PWM_CHN45_PRESCALER);
000386  6820              LDR      r0,[r4,#0]
000388  0209              LSLS     r1,r1,#8
00038a  4388              BICS     r0,r0,r1
00038c  2101              MOVS     r1,#1
00038e  0409              LSLS     r1,r1,#16
000390  1840              ADDS     r0,r0,r1
000392  6020              STR      r0,[r4,#0]
;;;266    //    PWM_SET_PRESCALER(PWM, 5, PWM_CHN45_PRESCALER);
;;;267        PWM_SET_DIVIDER(PWM, 0, PWM_CLK_DIV_1);
000394  6860              LDR      r0,[r4,#4]
000396  08c0              LSRS     r0,r0,#3
000398  00c0              LSLS     r0,r0,#3
00039a  1d00              ADDS     r0,r0,#4
00039c  6060              STR      r0,[r4,#4]
;;;268        PWM_SET_DIVIDER(PWM, 1, PWM_CLK_DIV_1);
00039e  6860              LDR      r0,[r4,#4]
0003a0  2170              MOVS     r1,#0x70
0003a2  4388              BICS     r0,r0,r1
0003a4  3040              ADDS     r0,r0,#0x40
0003a6  6060              STR      r0,[r4,#4]
;;;269        PWM_SET_DIVIDER(PWM, 2, PWM_CLK_DIV_1);
0003a8  6860              LDR      r0,[r4,#4]
0003aa  0109              LSLS     r1,r1,#4
0003ac  4388              BICS     r0,r0,r1
0003ae  1521              ASRS     r1,r4,#20
0003b0  1840              ADDS     r0,r0,r1
0003b2  6060              STR      r0,[r4,#4]
;;;270        PWM_SET_DIVIDER(PWM, 3, PWM_CLK_DIV_1);
0003b4  6860              LDR      r0,[r4,#4]
0003b6  2107              MOVS     r1,#7
0003b8  0309              LSLS     r1,r1,#12
0003ba  4388              BICS     r0,r0,r1
0003bc  2101              MOVS     r1,#1
0003be  0389              LSLS     r1,r1,#14
0003c0  1840              ADDS     r0,r0,r1
0003c2  6060              STR      r0,[r4,#4]
;;;271        PWM_SET_DIVIDER(PWM, 4, PWM_CLK_DIV_1);
0003c4  6860              LDR      r0,[r4,#4]
0003c6  2107              MOVS     r1,#7
0003c8  0409              LSLS     r1,r1,#16
0003ca  4388              BICS     r0,r0,r1
0003cc  2101              MOVS     r1,#1
0003ce  0489              LSLS     r1,r1,#18
0003d0  1840              ADDS     r0,r0,r1
0003d2  6060              STR      r0,[r4,#4]
;;;272        PWM_SET_DIVIDER(PWM, 5, PWM_CLK_DIV_1);
0003d4  6860              LDR      r0,[r4,#4]
0003d6  2107              MOVS     r1,#7
0003d8  0509              LSLS     r1,r1,#20
0003da  4388              BICS     r0,r0,r1
0003dc  0121              LSLS     r1,r4,#4
0003de  1840              ADDS     r0,r0,r1
0003e0  6060              STR      r0,[r4,#4]
;;;273    
;;;274    //    PWM->PCR = PCR_CLR_COUNTER | PCR_DEBUG_MODE | PCR_CH_EN(0) | PCR_PERIOD_MODE(0) |
;;;275    //		PCR_CH_EN(1) | PCR_PERIOD_MODE(1) | PCR_CH_EN(2) | PCR_PERIOD_MODE(2) |
;;;276    //		PCR_CH_EN(3) | PCR_PERIOD_MODE(3) | PCR_CH_EN(4) | PCR_PERIOD_MODE(4) |
;;;277    //		PCR_CH_EN(5) | PCR_PERIOD_MODE(5) |
;;;278    //		PCR_INV_EN(0) | PCR_INV_EN(2) | PCR_INV_EN(4) |
;;;279    //		PCR_INV_EN(1) | PCR_INV_EN(3) | PCR_INV_EN(5);
;;;280        PWM->PCR = PCR_CLR_COUNTER | PCR_DEBUG_MODE |
0003e2  482c              LDR      r0,|L1.1172|
0003e4  60a0              STR      r0,[r4,#8]
;;;281    		PCR_CH_EN(0) | PCR_PERIOD_MODE(0) |  
;;;282    		PCR_CH_EN(1) | PCR_PERIOD_MODE(1) | 
;;;283    		PCR_CH_EN(2) | PCR_PERIOD_MODE(2) | 
;;;284    		PCR_CH_EN(3) | PCR_PERIOD_MODE(3) | 
;;;285    		PCR_CH_EN(4) | PCR_PERIOD_MODE(4) | 
;;;286    		PCR_CH_EN(5) | PCR_PERIOD_MODE(5) |
;;;287    		PCR_INV_EN(0) | PCR_INV_EN(2) | PCR_INV_EN(4) |
;;;288    		PCR_INV_EN(1) | PCR_INV_EN(3) | PCR_INV_EN(5);
;;;289    //    PWM_SET_ALIGNED_TYPE(PWM_EDGE_ALIGNED);
;;;290    //    PWM_ENABLE_GROUP_MODE(PWM);
;;;291        PWM->CMR[0] = 0;
0003e6  2500              MOVS     r5,#0
0003e8  6265              STR      r5,[r4,#0x24]
;;;292        PWM->CMR[1] = 0;
0003ea  62a5              STR      r5,[r4,#0x28]
;;;293        PWM->CMR[2] = 0;
0003ec  62e5              STR      r5,[r4,#0x2c]
;;;294        PWM->CMR[3] = 0;
0003ee  6325              STR      r5,[r4,#0x30]
;;;295        PWM->CMR[4] = 0;
0003f0  6365              STR      r5,[r4,#0x34]
;;;296        PWM->CMR[5] = 0;
0003f2  63a5              STR      r5,[r4,#0x38]
;;;297        PWM->CNR[0] = PWM_PERIOD; 
0003f4  4828              LDR      r0,|L1.1176|
0003f6  60e0              STR      r0,[r4,#0xc]
;;;298        PWM->CNR[1] = PWM_PERIOD;    
0003f8  6120              STR      r0,[r4,#0x10]
;;;299        PWM->CNR[2] = PWM_PERIOD;                                    
0003fa  6160              STR      r0,[r4,#0x14]
;;;300        PWM->CNR[3] = PWM_PERIOD;
0003fc  61a0              STR      r0,[r4,#0x18]
;;;301        PWM->CNR[4] = PWM_PERIOD; 
0003fe  61e0              STR      r0,[r4,#0x1c]
;;;302        PWM->CNR[5] = PWM_PERIOD;
000400  6220              STR      r0,[r4,#0x20]
;;;303        PWM_EnableOutput(PWM, PWM_CHN_ALL_MSK);
000402  213f              MOVS     r1,#0x3f
000404  4620              MOV      r0,r4
000406  f7fffffe          BL       PWM_EnableOutput
;;;304        PWM_INT_DISABLE;	// Disable all PWM interrupt 
00040a  4821              LDR      r0,|L1.1168|
00040c  3040              ADDS     r0,r0,#0x40
00040e  6145              STR      r5,[r0,#0x14]
;;;305        BLDC_stopMotor();
000410  f7fffffe          BL       BLDC_stopMotor
;;;306        //MOTOR_SHUT_DOWN;
;;;307    
;;;308        // PWM duty change every each phase for both ramp up and locked state
;;;309    //    PWM->INTACCUCTL = 0x41; // Every 4 PWM periods change duty
;;;310    			    // this will be used in locked time
;;;311    			    // During startup ramp, duty change every x E-Circle
;;;312        PWM->PHCHGMASK = PHCHG_CTL_CMP0;	// Input of ACMP0 is controlled by PHCHG
000414  15a0              ASRS     r0,r4,#22
000416  e041              B        |L1.1180|
                  |L1.1048|
                          DCD      0xe000ed00
                  |L1.1052|
                          DCD      0xe000e400
                  |L1.1056|
                          DCD      0x50000200
                  |L1.1060|
                          DCD      0x260c03e0
                  |L1.1064|
                          DCD      0x2623fe1c
                  |L1.1068|
                          DCD      0x27cc03f4
                  |L1.1072|
                          DCD      0x27ec03f5
                  |L1.1076|
                          DCD      0x664c03f6
                  |L1.1080|
                          DCD      0x27803d10
                  |L1.1084|
                          DCD      0x2e8c03e2
                  |L1.1088|
                          DCD      0x2ecc03e3
                  |L1.1092|
                          DCD      0x224c03ec
                  |L1.1096|
                          DCD      0x61fc03fe
                  |L1.1100|
                          DCD      0x500040c0
                  |L1.1104|
                          DCD      0x50004240
                  |L1.1108|
                          DCD      0xfefffefe
                  |L1.1112|
                          DCD      0xfffffbfb
                  |L1.1116|
                          DCD      0x0000e002
                  |L1.1120|
                          DCD      0x50000040
                  |L1.1124|
                          DCD      0xfffff7f7
                  |L1.1128|
                          DCD      0xffffbfbf
                  |L1.1132|
                          DCD      0xffffefef
                  |L1.1136|
                          DCD      0xffff8383
                  |L1.1140|
                          DCD      0x0c03000a
                  |L1.1144|
                          DCD      0x40010000
                  |L1.1148|
                          DCD      0x1c01000a
                  |L1.1152|
                          DCD      0x400e0000
                  |L1.1156|
                          DCD      0x00440b05
                  |L1.1160|
                          DCD      0x015c0f39
                  |L1.1164|
                          DCD      0x40030000
                  |L1.1168|
                          DCD      0x40040000
                  |L1.1172|
                          DCD      0x08dddddf
                  |L1.1176|
                          DCD      0x00000373
                  |L1.1180|
00049c  492c              LDR      r1,|L1.1360|
00049e  3180              ADDS     r1,r1,#0x80
0004a0  6008              STR      r0,[r1,#0]
;;;313    }
0004a2  bd70              POP      {r4-r6,pc}
;;;314    
                          ENDP

                  initSys PROC
;;;315    void initSys(void)
0004a4  b510              PUSH     {r4,lr}
;;;316    {
;;;317        /* Unlock protected registers */
;;;318        SYS_UnlockReg();
0004a6  f7fffffe          BL       SYS_UnlockReg
;;;319        
;;;320        /* Clock initialization, Enable PWM, ADC, TIM, UART clock */
;;;321        initClk();
0004aa  f7fffffe          BL       initClk
;;;322        //CLK->APBCLK = CLK_APBCLK_UART_EN_Msk;
;;;323        
;;;324        /* Update System Core Clock */
;;;325        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock and cyclesPerUs automatically. */
;;;326        SystemCoreClockUpdate(); 
0004ae  f7fffffe          BL       SystemCoreClockUpdate
0004b2  4c29              LDR      r4,|L1.1368|
0004b4  4827              LDR      r0,|L1.1364|
0004b6  6160              STR      r0,[r4,#0x14]
0004b8  2103              MOVS     r1,#3
0004ba  1f08              SUBS     r0,r1,#4
0004bc  f7fffffe          BL       NVIC_SetPriority
0004c0  2000              MOVS     r0,#0
0004c2  61a0              STR      r0,[r4,#0x18]
0004c4  2007              MOVS     r0,#7
0004c6  6120              STR      r0,[r4,#0x10]
;;;327    
;;;328        /* System tick Configuration */
;;;329        // SYS TICK interrupt will be entered every 5ms
;;;330        SysTick_Config(SYS_TICK_RELOAD_VALUE);
;;;331        
;;;332        /* PWM Configuration */
;;;333        // Close all MOSFET here first, then output GPIO
;;;334        initPWM();
0004c8  f7fffffe          BL       initPWM
;;;335          
;;;336        /* IO Configuration */
;;;337        initGPIO();
0004cc  f7fffffe          BL       initGPIO
;;;338    
;;;339        /* ACMP initialization */
;;;340        //ACMP_Config();
;;;341    
;;;342        /* ADC initialization */
;;;343        configADC();
0004d0  f7fffffe          BL       configADC
;;;344    
;;;345        /* TIM initialization */
;;;346        configTIM();
0004d4  f7fffffe          BL       configTIM
;;;347    
;;;348        /* SPI initialization */
;;;349        configSPI();
0004d8  f7fffffe          BL       configSPI
;;;350    
;;;351        /* Enable all interrupt from NVIC */
;;;352        initIRQ();
0004dc  f7fffffe          BL       initIRQ
;;;353    
;;;354        /* Lock protected registers */
;;;355        SYS_LockReg();
0004e0  f7fffffe          BL       SYS_LockReg
;;;356                             
;;;357    }    
0004e4  bd10              POP      {r4,pc}
;;;358    
                          ENDP

                  initEnv PROC
;;;359    void initEnv(void)
0004e6  481d              LDR      r0,|L1.1372|
;;;360    {
;;;361    	tMotor.structMotor.unCommOK_CNT = 0;
0004e8  2100              MOVS     r1,#0
0004ea  62c1              STR      r1,[r0,#0x2c]  ; tMotor
;;;362    	tMotor.structMotor.unCommErrCNT = 0;
0004ec  6301              STR      r1,[r0,#0x30]  ; tMotor
;;;363    	unZXMatchCNT = 0;
0004ee  4a1c              LDR      r2,|L1.1376|
0004f0  6011              STR      r1,[r2,#0]  ; unZXMatchCNT
;;;364    	tMotor.structMotor.MSR.bNewComFrameReceived = FALSE;
0004f2  8881              LDRH     r1,[r0,#4]  ; tMotor
0004f4  2210              MOVS     r2,#0x10
0004f6  4391              BICS     r1,r1,r2
0004f8  8081              STRH     r1,[r0,#4]
;;;365    //	tSPI_LastState = SPI_RCV_IDLE;
;;;366    }
0004fa  4770              BX       lr
;;;367    uint32_t unWTF_Value = 0xA5D4;
                          ENDP

                  main PROC
;;;368    int main()
0004fc  f7fffffe          BL       initSys
;;;369    {
;;;370    
;;;371    	initSys();
;;;372    	initEnv();
000500  f7fffffe          BL       initEnv
;;;373    
;;;374    	PTC_checkMotor();
000504  f7fffffe          BL       PTC_checkMotor
;;;375    
;;;376    	/* ----==== Here is the parameter used for test ====----*/
;;;377    	// Max PWM Duty is: PWM_PERIOD = 441
;;;378    	// Max Period is:
;;;379    	MOTOR_SHUT_DOWN;
000508  4916              LDR      r1,|L1.1380|
00050a  2000              MOVS     r0,#0
00050c  6208              STR      r0,[r1,#0x20]
00050e  4a10              LDR      r2,|L1.1360|
000510  3240              ADDS     r2,r2,#0x40
000512  6150              STR      r0,[r2,#0x14]
000514  4814              LDR      r0,|L1.1384|
000516  6801              LDR      r1,[r0,#0]
000518  0383              LSLS     r3,r0,#14
00051a  4399              BICS     r1,r1,r3
00051c  6001              STR      r1,[r0,#0]
00051e  4912              LDR      r1,|L1.1384|
000520  3120              ADDS     r1,r1,#0x20
000522  680c              LDR      r4,[r1,#0]
000524  439c              BICS     r4,r4,r3
000526  600c              STR      r4,[r1,#0]
000528  6804              LDR      r4,[r0,#0]
00052a  0343              LSLS     r3,r0,#13
00052c  439c              BICS     r4,r4,r3
00052e  6004              STR      r4,[r0,#0]
000530  6808              LDR      r0,[r1,#0]
000532  4398              BICS     r0,r0,r3
000534  6008              STR      r0,[r1,#0]
000536  20ff              MOVS     r0,#0xff
000538  63d0              STR      r0,[r2,#0x3c]
00053a  6390              STR      r0,[r2,#0x38]
                  |L1.1340|
;;;380    
;;;381        // Example parameter
;;;382    //    tMotor.structMotor.unLocatingDuty = 200;
;;;383    //    tMotor.structMotor.unLocatingPeriod = 10;	// Unit ms
;;;384    //    tMotor.structMotor.unRampUpDuty = 320;
;;;385    //    tMotor.structMotor.unRampUpPeriod = 8000;	// Unit 2MH, 20ms, 500rpm
;;;386    //	tMotor.structMotor.unTargetDuty = 400;
;;;387    //	tMotor.structMotor.MCR.bRotateDirection = ROTATE_CLOCKWISE;	// Clockwise
;;;388    //    tMotor.structMotor.MCR.bMotorNeedToRun = TRUE;
;;;389        /* ----=============== Test End ================---- */
;;;390    
;;;391    	while(1)
;;;392    	{
;;;393    //		BLDC_SensorLessManager();
;;;394    		COMM_Manager();
00053c  f7fffffe          BL       COMM_Manager
000540  e7fc              B        |L1.1340|
;;;395    //		ERR_Manager();
;;;396    	}
;;;397    
;;;398    }
;;;399    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;503     */
;;;504    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000542  06c1              LSLS     r1,r0,#27
;;;505    {
;;;506      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000544  0ec9              LSRS     r1,r1,#27
000546  2001              MOVS     r0,#1
000548  4088              LSLS     r0,r0,r1
00054a  4908              LDR      r1,|L1.1388|
00054c  6008              STR      r0,[r1,#0]
;;;507    }
00054e  4770              BX       lr
;;;508    
                          ENDP

                  |L1.1360|
                          DCD      0x40040000
                  |L1.1364|
                          DCD      0x0001affe
                  |L1.1368|
                          DCD      0xe000e000
                  |L1.1372|
                          DCD      tMotor
                  |L1.1376|
                          DCD      unZXMatchCNT
                  |L1.1380|
                          DCD      0x50004240
                  |L1.1384|
                          DCD      0x40010000
                  |L1.1388|
                          DCD      0xe000e100

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  iTestSpeedSequence
000000  00fa012c          DCW      0x00fa,0x012c
000004  015e0190          DCW      0x015e,0x0190
000008  01c2012c          DCW      0x01c2,0x012c
00000c  019000fa          DCW      0x0190,0x00fa
000010  00c801c2          DCW      0x00c8,0x01c2
000014  00c8              DCW      0x00c8

                          AREA ||.data||, DATA, ALIGN=0

                  iTestSpeedSequenIndex
000000  00                DCB      0x00

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  iTestSpeedLastTime
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  unSystemTick
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  unWTF_Value
                          DCD      0x0000a5d4

;*** Start embedded assembler ***

#line 1 "User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_0ca38777____REV16|
#line 118 ".\\CMSIS\\core_cmInstr.h"
|__asm___6_main_c_0ca38777____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_0ca38777____REVSH|
#line 132
|__asm___6_main_c_0ca38777____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
