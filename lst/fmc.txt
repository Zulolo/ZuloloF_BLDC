; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos --omf_browse=.\obj\fmc.crf C:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver\fmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;32       */
;;;33     void FMC_Close(void)
000000  4855              LDR      r0,|L1.344|
;;;34     {
;;;35         FMC->ISPCON &= ~FMC_ISPCON_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;36     }
00000a  4770              BX       lr
;;;37     
                          ENDP

                  FMC_Erase PROC
;;;44       */
;;;45     int32_t FMC_Erase(uint32_t u32PageAddr)
00000c  4952              LDR      r1,|L1.344|
;;;46     {
;;;47         FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
00000e  2222              MOVS     r2,#0x22
000010  60ca              STR      r2,[r1,#0xc]
;;;48         FMC->ISPADR = u32PageAddr;
000012  6048              STR      r0,[r1,#4]
;;;49         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000014  2001              MOVS     r0,#1
000016  6108              STR      r0,[r1,#0x10]
                  |L1.24|
;;;50     
;;;51         while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
000018  6908              LDR      r0,[r1,#0x10]
00001a  07c0              LSLS     r0,r0,#31
00001c  d1fc              BNE      |L1.24|
;;;52     
;;;53         if (FMC->ISPCON & FMC_ISPCON_ISPFF_Msk) {
00001e  6808              LDR      r0,[r1,#0]
000020  0640              LSLS     r0,r0,#25
000022  d506              BPL      |L1.50|
;;;54             FMC->ISPCON |= FMC_ISPCON_ISPFF_Msk;
000024  6808              LDR      r0,[r1,#0]
000026  2240              MOVS     r2,#0x40
000028  4310              ORRS     r0,r0,r2
00002a  6008              STR      r0,[r1,#0]
;;;55             return -1;
00002c  2000              MOVS     r0,#0
00002e  43c0              MVNS     r0,r0
;;;56         }
;;;57         return 0;
;;;58     }
000030  4770              BX       lr
                  |L1.50|
000032  2000              MOVS     r0,#0                 ;57
000034  4770              BX       lr
;;;59     
                          ENDP

                  FMC_GetBootSource PROC
;;;65       */
;;;66     int32_t FMC_GetBootSource (void)
000036  4848              LDR      r0,|L1.344|
;;;67     {
;;;68         if (FMC->ISPCON & FMC_ISPCON_BS_Msk)
000038  6800              LDR      r0,[r0,#0]
00003a  0780              LSLS     r0,r0,#30
00003c  d501              BPL      |L1.66|
;;;69             return 1;
00003e  2001              MOVS     r0,#1
;;;70         else
;;;71             return 0;
;;;72     }
000040  4770              BX       lr
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;71
000044  4770              BX       lr
;;;73     
                          ENDP

                  FMC_Open PROC
;;;77       */
;;;78     void FMC_Open(void)
000046  4844              LDR      r0,|L1.344|
;;;79     {
;;;80         FMC->ISPCON |=  FMC_ISPCON_ISPEN_Msk;
000048  6801              LDR      r1,[r0,#0]
00004a  2201              MOVS     r2,#1
00004c  4311              ORRS     r1,r1,r2
00004e  6001              STR      r1,[r0,#0]
;;;81     }
000050  4770              BX       lr
;;;82     
                          ENDP

                  FMC_Read PROC
;;;88       */
;;;89     uint32_t FMC_Read(uint32_t u32Addr)
000052  4941              LDR      r1,|L1.344|
;;;90     {
;;;91         FMC->ISPCMD = FMC_ISPCMD_READ;
000054  2200              MOVS     r2,#0
000056  60ca              STR      r2,[r1,#0xc]
;;;92         FMC->ISPADR = u32Addr;
000058  6048              STR      r0,[r1,#4]
;;;93         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00005a  2001              MOVS     r0,#1
00005c  6108              STR      r0,[r1,#0x10]
                  |L1.94|
;;;94     
;;;95         while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
00005e  6908              LDR      r0,[r1,#0x10]
000060  07c0              LSLS     r0,r0,#31
000062  d1fc              BNE      |L1.94|
;;;96     
;;;97         return FMC->ISPDAT;
000064  6888              LDR      r0,[r1,#8]
;;;98     }
000066  4770              BX       lr
;;;99     
                          ENDP

                  FMC_ReadCID PROC
;;;104      */
;;;105    uint32_t FMC_ReadCID(void)
000068  483b              LDR      r0,|L1.344|
;;;106    {
;;;107        FMC->ISPCMD = FMC_ISPCMD_READ_CID;
00006a  210b              MOVS     r1,#0xb
00006c  60c1              STR      r1,[r0,#0xc]
;;;108        FMC->ISPADR = 0x0;
00006e  2100              MOVS     r1,#0
000070  6041              STR      r1,[r0,#4]
;;;109        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000072  2101              MOVS     r1,#1
000074  6101              STR      r1,[r0,#0x10]
                  |L1.118|
;;;110        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
000076  6901              LDR      r1,[r0,#0x10]
000078  07c9              LSLS     r1,r1,#31
00007a  d1fc              BNE      |L1.118|
;;;111        return FMC->ISPDAT;
00007c  6880              LDR      r0,[r0,#8]
;;;112    }
00007e  4770              BX       lr
;;;113    
                          ENDP

                  FMC_ReadPID PROC
;;;118      */
;;;119    uint32_t FMC_ReadPID(void)
000080  4835              LDR      r0,|L1.344|
;;;120    {
;;;121        FMC->ISPCMD = FMC_ISPCMD_READ_PID;
000082  210c              MOVS     r1,#0xc
000084  60c1              STR      r1,[r0,#0xc]
;;;122        FMC->ISPADR = 0x04;
000086  2104              MOVS     r1,#4
000088  6041              STR      r1,[r0,#4]
;;;123        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00008a  2101              MOVS     r1,#1
00008c  6101              STR      r1,[r0,#0x10]
                  |L1.142|
;;;124        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
00008e  6901              LDR      r1,[r0,#0x10]
000090  07c9              LSLS     r1,r1,#31
000092  d1fc              BNE      |L1.142|
;;;125        return FMC->ISPDAT;
000094  6880              LDR      r0,[r0,#8]
;;;126    }
000096  4770              BX       lr
;;;127    
                          ENDP

                  FMC_ReadUCID PROC
;;;133      */
;;;134    uint32_t FMC_ReadUCID(uint32_t u32Index)
000098  492f              LDR      r1,|L1.344|
;;;135    {
;;;136        FMC->ISPCMD = FMC_ISPCMD_READ_UID;
00009a  2204              MOVS     r2,#4
00009c  60ca              STR      r2,[r1,#0xc]
;;;137        FMC->ISPADR = (0x04 * u32Index) + 0x10;
00009e  0080              LSLS     r0,r0,#2
0000a0  3010              ADDS     r0,r0,#0x10
0000a2  6048              STR      r0,[r1,#4]
;;;138        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
0000a4  2001              MOVS     r0,#1
0000a6  6108              STR      r0,[r1,#0x10]
                  |L1.168|
;;;139    
;;;140        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
0000a8  6908              LDR      r0,[r1,#0x10]
0000aa  07c0              LSLS     r0,r0,#31
0000ac  d1fc              BNE      |L1.168|
;;;141    
;;;142        return FMC->ISPDAT;
0000ae  6888              LDR      r0,[r1,#8]
;;;143    }
0000b0  4770              BX       lr
;;;144    
                          ENDP

                  FMC_ReadUID PROC
;;;150      */
;;;151    uint32_t FMC_ReadUID(uint32_t u32Index)
0000b2  4929              LDR      r1,|L1.344|
;;;152    {
;;;153        FMC->ISPCMD = FMC_ISPCMD_READ_UID;
0000b4  2204              MOVS     r2,#4
0000b6  60ca              STR      r2,[r1,#0xc]
;;;154        FMC->ISPADR = 0x04 * u32Index;
0000b8  0080              LSLS     r0,r0,#2
0000ba  6048              STR      r0,[r1,#4]
;;;155        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
0000bc  2001              MOVS     r0,#1
0000be  6108              STR      r0,[r1,#0x10]
                  |L1.192|
;;;156    
;;;157        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
0000c0  6908              LDR      r0,[r1,#0x10]
0000c2  07c0              LSLS     r0,r0,#31
0000c4  d1fc              BNE      |L1.192|
;;;158    
;;;159        return FMC->ISPDAT;
0000c6  6888              LDR      r0,[r1,#8]
;;;160    }
0000c8  4770              BX       lr
;;;161    
                          ENDP

                  FMC_ReadDataFlashBaseAddr PROC
;;;166      */
;;;167    uint32_t FMC_ReadDataFlashBaseAddr(void)
0000ca  4823              LDR      r0,|L1.344|
;;;168    {
;;;169        return FMC->DFBADR;
0000cc  6940              LDR      r0,[r0,#0x14]
;;;170    }
0000ce  4770              BX       lr
;;;171    
                          ENDP

                  FMC_SetVectorPageAddr PROC
;;;176      */
;;;177    void FMC_SetVectorPageAddr(uint32_t u32PageAddr)
0000d0  4921              LDR      r1,|L1.344|
;;;178    {
;;;179        FMC->ISPCMD = FMC_ISPCMD_VECMAP;
0000d2  222e              MOVS     r2,#0x2e
0000d4  60ca              STR      r2,[r1,#0xc]
;;;180        FMC->ISPADR = u32PageAddr;
0000d6  6048              STR      r0,[r1,#4]
;;;181        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
0000d8  2001              MOVS     r0,#1
0000da  6108              STR      r0,[r1,#0x10]
                  |L1.220|
;;;182        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
0000dc  6908              LDR      r0,[r1,#0x10]
0000de  07c0              LSLS     r0,r0,#31
0000e0  d1fc              BNE      |L1.220|
;;;183    }
0000e2  4770              BX       lr
;;;184    
                          ENDP

                  FMC_GetVectorPageAddr PROC
;;;189      */
;;;190    uint32_t FMC_GetVectorPageAddr(void)
0000e4  481c              LDR      r0,|L1.344|
;;;191    {
;;;192        return (FMC->ISPSTA & 0x0FFFFF00ul);
0000e6  3040              ADDS     r0,r0,#0x40
0000e8  6800              LDR      r0,[r0,#0]
0000ea  491c              LDR      r1,|L1.348|
0000ec  4008              ANDS     r0,r0,r1
;;;193    }
0000ee  4770              BX       lr
;;;194    
                          ENDP

                  FMC_Write PROC
;;;200      */
;;;201    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
0000f0  4a19              LDR      r2,|L1.344|
;;;202    {
;;;203        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
0000f2  2321              MOVS     r3,#0x21
0000f4  60d3              STR      r3,[r2,#0xc]
;;;204        FMC->ISPADR = u32Addr;
0000f6  6050              STR      r0,[r2,#4]
;;;205        FMC->ISPDAT = u32Data;
0000f8  6091              STR      r1,[r2,#8]
;;;206        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
0000fa  2001              MOVS     r0,#1
0000fc  6110              STR      r0,[r2,#0x10]
                  |L1.254|
;;;207        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ;
0000fe  6910              LDR      r0,[r2,#0x10]
000100  07c0              LSLS     r0,r0,#31
000102  d1fc              BNE      |L1.254|
;;;208    }
000104  4770              BX       lr
;;;209    
                          ENDP

                  FMC_ReadConfig PROC
;;;217      */
;;;218    int32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count)
000106  b510              PUSH     {r4,lr}
;;;219    {
000108  4603              MOV      r3,r0
;;;220        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
00010a  2003              MOVS     r0,#3
00010c  460c              MOV      r4,r1                 ;219
00010e  0500              LSLS     r0,r0,#20
000110  f7fffffe          BL       FMC_Read
;;;221        if (u32Count < 2)
000114  6018              STR      r0,[r3,#0]
000116  2c02              CMP      r4,#2
000118  d303              BCC      |L1.290|
;;;222            return 0;
;;;223        u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4);
00011a  4811              LDR      r0,|L1.352|
00011c  f7fffffe          BL       FMC_Read
000120  6058              STR      r0,[r3,#4]
                  |L1.290|
000122  2000              MOVS     r0,#0                 ;222
;;;224        return 0;
;;;225    }
000124  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  FMC_WriteConfig PROC
;;;234      */
;;;235    int32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count)
000126  b570              PUSH     {r4-r6,lr}
;;;236    {
;;;237        FMC_ENABLE_CFG_UPDATE();
000128  4c0b              LDR      r4,|L1.344|
00012a  4605              MOV      r5,r0                 ;236
00012c  6820              LDR      r0,[r4,#0]
00012e  2610              MOVS     r6,#0x10
000130  4330              ORRS     r0,r0,r6
000132  6020              STR      r0,[r4,#0]
;;;238        FMC_Erase(FMC_CONFIG_BASE);
000134  01a3              LSLS     r3,r4,#6
000136  4618              MOV      r0,r3
000138  f7fffffe          BL       FMC_Erase
;;;239        FMC_Write(FMC_CONFIG_BASE, u32Config[0]);
00013c  4618              MOV      r0,r3
00013e  6829              LDR      r1,[r5,#0]
000140  f7fffffe          BL       FMC_Write
;;;240        FMC_Write(FMC_CONFIG_BASE+4, u32Config[1]);
000144  4806              LDR      r0,|L1.352|
000146  6869              LDR      r1,[r5,#4]
000148  f7fffffe          BL       FMC_Write
;;;241        FMC_DISABLE_CFG_UPDATE();
00014c  6820              LDR      r0,[r4,#0]
00014e  43b0              BICS     r0,r0,r6
000150  6020              STR      r0,[r4,#0]
;;;242        return 0;
000152  2000              MOVS     r0,#0
;;;243    }
000154  bd70              POP      {r4-r6,pc}
;;;244    
                          ENDP

000156  0000              DCW      0x0000
                  |L1.344|
                          DCD      0x5000c000
                  |L1.348|
                          DCD      0x0fffff00
                  |L1.352|
                          DCD      0x00300004

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Nuvoton\\NuMicro_DFP\\1.1.0\\Device\\Mini51\\Driver\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 464 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 479
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
