; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\protection.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\protection.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -IG:\Geek\Projects\Zulolo_F\Force\Code\ZuloloF_BLDC\RTE -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.0.7\Device\Mini51\Include -ID:\Keil_v5\ARM\CMSIS\Include -I\ -D__MICROLIB -D__UVISION_VERSION=518 --omf_browse=.\obj\protection.crf User\Protection.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PTC_checkMotor PROC
;;;16     
;;;17     void PTC_checkMotor(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;18     {
;;;19     	uint8_t unCheckIndex;
;;;20     	clearError();
000002  f7fffffe          BL       clearError
;;;21     	// Battery check
;;;22     	// Battery voltage check will be done in ADC interrupt on the fly, so no need to check here.
;;;23     
;;;24     	// LED check
;;;25     	// Check what?
;;;26     
;;;27     	// MOSFET check
;;;28     	// Open each MOSFET one by one to see if there is any current.
;;;29     	// If yes means some MOSFET is short
;;;30     	// Set ADC Current threshold to very low
;;;31     	// Set ADC Voltage threshold to very high
;;;32         // Configure and enable Comperator 0 to monitor channel 0(current) input greater or euqal to 93
;;;33         ADC_ENABLE_CMP0(ADC, ADC_CURRENT_CHN_IDX, ADC_CMP_GREATER_OR_EQUAL_TO, ADC_CURRENT_HIGH_THRS_MT, ADC_CURRENT_HIGH_CNT);
000006  4f11              LDR      r7,|L1.76|
000008  480f              LDR      r0,|L1.72|
00000a  62b8              STR      r0,[r7,#0x28]
;;;34         // Configure and enable Comperator 1 to monitor channel 7(battery) input less than 0x200
;;;35         ADC_ENABLE_CMP1(ADC, ADC_BATTERY_CHN_IDX, ADC_CMP_LESS_THAN, ADC_BAT_LOW_THRS_MT, ADC_BAT_LOW_CNT);
00000c  4810              LDR      r0,|L1.80|
00000e  62f8              STR      r0,[r7,#0x2c]
;;;36     	for (unCheckIndex = 0; unCheckIndex < (sizeof(unMosfetTestTable) / sizeof(uint32_t*)); unCheckIndex++)
;;;37     	{
;;;38     		SET_MOSFET_ON_MANUAL(unMosfetTestTable[unCheckIndex]);
000010  4e10              LDR      r6,|L1.84|
000012  2400              MOVS     r4,#0                 ;36
                  |L1.20|
000014  2000              MOVS     r0,#0
000016  00a5              LSLS     r5,r4,#2
000018  5971              LDR      r1,[r6,r5]
00001a  6008              STR      r0,[r1,#0]
;;;39     		delay(MOTOR_TEST_MOSFET_ON_DURATION);
00001c  2032              MOVS     r0,#0x32
00001e  f7fffffe          BL       delay
;;;40     		SET_MOSFET_OFF_MANUAL(unMosfetTestTable[unCheckIndex]);
000022  5971              LDR      r1,[r6,r5]
000024  2001              MOVS     r0,#1
000026  6008              STR      r0,[r1,#0]
;;;41     		if (IS_ANY_EEROR == TRUE)
000028  480b              LDR      r0,|L1.88|
00002a  6800              LDR      r0,[r0,#0]  ; unErrorMaster
00002c  2800              CMP      r0,#0
00002e  d001              BEQ      |L1.52|
;;;42     		{
;;;43     			BLDC_stopMotor();
000030  f7fffffe          BL       BLDC_stopMotor
                  |L1.52|
000034  1c64              ADDS     r4,r4,#1
000036  b2e4              UXTB     r4,r4                 ;36
000038  2c06              CMP      r4,#6                 ;36
00003a  d3eb              BCC      |L1.20|
;;;44     //			while (1)
;;;45     //			{
;;;46     //				ERR_Manager();
;;;47     //			}
;;;48     		}
;;;49     	}
;;;50         // Configure and enable Comperator 0 to monitor channel 0(current) input greater or euqal to 93
;;;51         ADC_ENABLE_CMP0(ADC, ADC_CURRENT_CHN_IDX, ADC_CMP_GREATER_OR_EQUAL_TO, ADC_CURRENT_HIGH_THRS, ADC_CURRENT_HIGH_CNT);
00003c  4807              LDR      r0,|L1.92|
00003e  62b8              STR      r0,[r7,#0x28]
;;;52         // Configure and enable Comperator 1 to monitor channel 7(battery) input less than 0x200
;;;53         ADC_ENABLE_CMP1(ADC, ADC_BATTERY_CHN_IDX, ADC_CMP_LESS_THAN, ADC_BAT_LOW_THRS, ADC_BAT_LOW_CNT);
000040  4807              LDR      r0,|L1.96|
000042  62f8              STR      r0,[r7,#0x2c]
;;;54     }
000044  bdf8              POP      {r3-r7,pc}
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x00050b05
                  |L1.76|
                          DCD      0x400e0000
                  |L1.80|
                          DCD      0x01890f39
                  |L1.84|
                          DCD      ||.data||
                  |L1.88|
                          DCD      unErrorMaster
                  |L1.92|
                          DCD      0x00440b05
                  |L1.96|
                          DCD      0x015c0f39

                          AREA ||.data||, DATA, ALIGN=2

                  unMosfetTestTable
                          DCD      0x50004248
                          DCD      0x50004250
                          DCD      0x50004258
                          DCD      0x5000424c
                          DCD      0x50004254
                          DCD      0x50004210

;*** Start embedded assembler ***

#line 1 "User\\Protection.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_Protection_c_b9b63061____REV16|
#line 118 ".\\CMSIS\\core_cmInstr.h"
|__asm___12_Protection_c_b9b63061____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_Protection_c_b9b63061____REVSH|
#line 132
|__asm___12_Protection_c_b9b63061____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
