; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Mini51Series\Include -I..\..\..\Library\StdDriver\inc -I.\StdDriver\inc -I.\CMSIS -I.\RTE\Device\Mini54ZDE -I.\RTE\_BLDC_driver -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Driver -ID:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.1.0\Device\Mini51\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DCLK_APBCLK_ACMP_EN_Pos=CLK_APBCLK_CMP_EN_Pos -DFOR_CAR --omf_browse=.\obj\retarget.crf RTE\Device\Mini54ZDE\retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  stackDump PROC
;;;42     
;;;43     void stackDump(uint32_t stack[])
000000  b510              PUSH     {r4,lr}
;;;44     {
000002  4604              MOV      r4,r0
;;;45     	printf("r0  = 0x%x\n", stack[r0]);
000004  6801              LDR      r1,[r0,#0]
000006  a029              ADR      r0,|L1.172|
000008  f7fffffe          BL       __2printf
;;;46     	printf("r1  = 0x%x\n", stack[r1]);
00000c  a02a              ADR      r0,|L1.184|
00000e  6861              LDR      r1,[r4,#4]
000010  f7fffffe          BL       __2printf
;;;47     	printf("r2  = 0x%x\n", stack[r2]);
000014  a02b              ADR      r0,|L1.196|
000016  68a1              LDR      r1,[r4,#8]
000018  f7fffffe          BL       __2printf
;;;48     	printf("r3  = 0x%x\n", stack[r3]);
00001c  a02c              ADR      r0,|L1.208|
00001e  68e1              LDR      r1,[r4,#0xc]
000020  f7fffffe          BL       __2printf
;;;49     	printf("r12 = 0x%x\n", stack[r12]);
000024  a02d              ADR      r0,|L1.220|
000026  6921              LDR      r1,[r4,#0x10]
000028  f7fffffe          BL       __2printf
;;;50     	printf("lr  = 0x%x\n", stack[lr]);
00002c  a02e              ADR      r0,|L1.232|
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       __2printf
;;;51     	printf("pc  = 0x%x\n", stack[pc]);
000034  a02f              ADR      r0,|L1.244|
000036  69a1              LDR      r1,[r4,#0x18]
000038  f7fffffe          BL       __2printf
;;;52     	printf("psr = 0x%x\n", stack[psr]);
00003c  a030              ADR      r0,|L1.256|
00003e  69e1              LDR      r1,[r4,#0x1c]
000040  f7fffffe          BL       __2printf
;;;53     } 
000044  bd10              POP      {r4,pc}
;;;54     
                          ENDP

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;55     void Hard_Fault_Handler(uint32_t stack[])
000046  4604              MOV      r4,r0
;;;56     {     
;;;57         printf("In Hard Fault Handler\n");
000048  a030              ADR      r0,|L1.268|
00004a  f7fffffe          BL       __2printf
;;;58     
;;;59         stackDump(stack);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       stackDump
                  |L1.84|
;;;60     	
;;;61     	//Chip Reset
;;;62     	//SYS_UnlockReg();
;;;63     	//SYS->IPRSTC1 |= SYS_IPRSTC1_CHIP_RST_Msk;
;;;64     
;;;65         while(1);
000054  e7fe              B        |L1.84|
;;;66     }
;;;67     
                          ENDP

                  SendChar_ToUART PROC
;;;309    
;;;310    void SendChar_ToUART(int ch)
000056  4933              LDR      r1,|L1.292|
                  |L1.88|
;;;311    {
;;;312    #ifndef DISABLE_UART
;;;313            while(UART->FSR & UART_FSR_TX_FULL_Msk);
000058  698a              LDR      r2,[r1,#0x18]
00005a  0212              LSLS     r2,r2,#8
00005c  d4fc              BMI      |L1.88|
;;;314            UART->THR = ch;
00005e  6008              STR      r0,[r1,#0]
;;;315            if(ch == '\n'){
000060  280a              CMP      r0,#0xa
000062  d104              BNE      |L1.110|
                  |L1.100|
;;;316                while(UART->FSR & UART_FSR_TX_FULL_Msk);
000064  6988              LDR      r0,[r1,#0x18]
000066  0200              LSLS     r0,r0,#8
000068  d4fc              BMI      |L1.100|
;;;317                UART->THR = '\r';
00006a  200d              MOVS     r0,#0xd
00006c  6008              STR      r0,[r1,#0]
                  |L1.110|
;;;318            }
;;;319    #endif
;;;320    }
00006e  4770              BX       lr
;;;321    
                          ENDP

                  SendChar PROC
;;;328    
;;;329    void SendChar(int ch)
000070  e7fe              B        SendChar_ToUART
;;;330    {
;;;331    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;332        g_buf[g_buf_len++] = ch;
;;;333        g_buf[g_buf_len] = '\0';
;;;334        if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;335        {
;;;336    
;;;337            /* Send the char */
;;;338    
;;;339            if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;340            {
;;;341                g_buf_len = 0;
;;;342                return;
;;;343            }
;;;344            else
;;;345            {
;;;346                int i;
;;;347    
;;;348                for(i=0;i<g_buf_len;i++)
;;;349                    SendChar_ToUART(g_buf[i]);
;;;350                g_buf_len = 0;
;;;351            }
;;;352        }
;;;353    #else
;;;354        SendChar_ToUART(ch);
;;;355    #endif
;;;356    }
;;;357    
                          ENDP

                  GetChar PROC
;;;365    
;;;366    char GetChar(void)
000072  482c              LDR      r0,|L1.292|
                  |L1.116|
;;;367    {
;;;368    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;369    # if defined ( __CC_ARM   )
;;;370        int nRet;
;;;371        while(SH_DoCommand(0x101, 0, &nRet) != 0)
;;;372        {
;;;373            if(nRet != 0)
;;;374            {
;;;375                SH_DoCommand(0x07, 0, &nRet);
;;;376                return (char)nRet;
;;;377            }
;;;378        }
;;;379    # else
;;;380        int nRet;
;;;381        while(SH_DoCommand(0x7, 0, &nRet) != 0)  
;;;382        {
;;;383            if(nRet != 0)
;;;384                return (char)nRet;
;;;385        }
;;;386    # endif    
;;;387    #endif
;;;388    #ifndef DISABLE_UART
;;;389            while (1){
;;;390                if(!(UART->FSR & UART_FSR_RX_EMPTY_Msk))
000074  6981              LDR      r1,[r0,#0x18]
000076  0449              LSLS     r1,r1,#17
000078  d4fc              BMI      |L1.116|
;;;391                {
;;;392                    return (UART->RBR);
00007a  6800              LDR      r0,[r0,#0]
00007c  b2c0              UXTB     r0,r0
;;;393                    
;;;394                }
;;;395            }
;;;396    #else
;;;397        return(0);
;;;398    #endif
;;;399    }
00007e  4770              BX       lr
;;;400    
                          ENDP

                  kbhit PROC
;;;408      */
;;;409    int kbhit(void)
000080  4828              LDR      r0,|L1.292|
;;;410    {
;;;411    #ifndef DISABLE_UART
;;;412        return !(UART->FSR & UART_FSR_RX_EMPTY_Msk);
000082  6980              LDR      r0,[r0,#0x18]
000084  0440              LSLS     r0,r0,#17
000086  17c0              ASRS     r0,r0,#31
000088  1c40              ADDS     r0,r0,#1
;;;413    #else
;;;414        return(0);
;;;415    #endif
;;;416    }
00008a  4770              BX       lr
;;;417    
                          ENDP

                  IsDebugFifoEmpty PROC
;;;424      */
;;;425    int IsDebugFifoEmpty(void)
00008c  4825              LDR      r0,|L1.292|
;;;426    {
;;;427    #ifndef DISABLE_UART
;;;428        return (UART->FSR & UART_FSR_TE_FLAG_Msk) ? 1 : 0;
00008e  6980              LDR      r0,[r0,#0x18]
000090  00c0              LSLS     r0,r0,#3
000092  0fc0              LSRS     r0,r0,#31
;;;429    #else
;;;430        return(1);
;;;431    #endif    
;;;432    
;;;433    }
000094  4770              BX       lr
;;;434    
                          ENDP

                  _ttywrch PROC
;;;437    /*---------------------------------------------------------------------------------------------------------*/
;;;438    void _ttywrch(int ch)
000096  e7fe              B        SendChar_ToUART
;;;439    {
;;;440      SendChar(ch);
;;;441      return;
;;;442    }
;;;443    
                          ENDP

                  fputc PROC
;;;444    int fputc(int ch, FILE *f)
000098  b500              PUSH     {lr}
;;;445    {
00009a  4603              MOV      r3,r0
00009c  f7fffffe          BL       SendChar_ToUART
;;;446      SendChar(ch);
;;;447      return ch;
0000a0  4618              MOV      r0,r3
;;;448    }
0000a2  bd00              POP      {pc}
;;;449    
                          ENDP

                  fgetc PROC
;;;450    int fgetc(FILE *f) {
0000a4  e7fe              B        GetChar
;;;451       return (GetChar());
;;;452    }
;;;453    
                          ENDP

                  ferror PROC
;;;454    
;;;455    int ferror(FILE *f) {
0000a6  2000              MOVS     r0,#0
;;;456      return EOF;
0000a8  43c0              MVNS     r0,r0
;;;457    }
0000aa  4770              BX       lr
;;;458    
                          ENDP

                  |L1.172|
0000ac  72302020          DCB      "r0  = 0x%x\n",0
0000b0  3d203078
0000b4  25780a00
                  |L1.184|
0000b8  72312020          DCB      "r1  = 0x%x\n",0
0000bc  3d203078
0000c0  25780a00
                  |L1.196|
0000c4  72322020          DCB      "r2  = 0x%x\n",0
0000c8  3d203078
0000cc  25780a00
                  |L1.208|
0000d0  72332020          DCB      "r3  = 0x%x\n",0
0000d4  3d203078
0000d8  25780a00
                  |L1.220|
0000dc  72313220          DCB      "r12 = 0x%x\n",0
0000e0  3d203078
0000e4  25780a00
                  |L1.232|
0000e8  6c722020          DCB      "lr  = 0x%x\n",0
0000ec  3d203078
0000f0  25780a00
                  |L1.244|
0000f4  70632020          DCB      "pc  = 0x%x\n",0
0000f8  3d203078
0000fc  25780a00
                  |L1.256|
000100  70737220          DCB      "psr = 0x%x\n",0
000104  3d203078
000108  25780a00
                  |L1.268|
00010c  496e2048          DCB      "In Hard Fault Handler\n",0
000110  61726420
000114  4661756c
000118  74204861
00011c  6e646c65
000120  720a00  
000123  00                DCB      0
                  |L1.292|
                          DCD      0x40050000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\Mini54ZDE\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_8c64092a____REV16|
#line 464 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.1.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_8c64092a____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_8c64092a____REVSH|
#line 479
|__asm___10_retarget_c_8c64092a____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 283 "RTE\\Device\\Mini54ZDE\\retarget.c"
|HardFault_Handler| PROC
#line 284

 MOVS r0, #4 
 MOV r1, LR 
 TST r0, r1 
 BEQ Stack_Use_MSP 
 MRS R0, PSP 
 B Get_LR_and_Branch 
Stack_Use_MSP 
 MRS R0, MSP 
Get_LR_and_Branch 
 MOV R1, LR 
 LDR R2,= |Hard_Fault_Handler| 
 BX R2 
	ENDP

;*** End   embedded assembler ***
